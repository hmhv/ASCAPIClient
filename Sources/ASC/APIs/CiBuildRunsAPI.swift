//
// CiBuildRunsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CiBuildRunsAPI {

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildRunsActionsGetToManyRelated: String, CaseIterable {
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiBuildActions
     */
    public enum FieldsCiBuildActions_ciBuildRunsActionsGetToManyRelated: String, CaseIterable {
        case actiontype = "actionType"
        case artifacts = "artifacts"
        case buildrun = "buildRun"
        case completionstatus = "completionStatus"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case isrequiredtopass = "isRequiredToPass"
        case issuecounts = "issueCounts"
        case issues = "issues"
        case name = "name"
        case starteddate = "startedDate"
        case testresults = "testResults"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsActionsGetToManyRelated: String, CaseIterable {
        case buildrun = "buildRun"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CiBuildActionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsActionsGetToManyRelated(id: String, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciBuildRunsActionsGetToManyRelated]? = nil, fieldsCiBuildActions: [FieldsCiBuildActions_ciBuildRunsActionsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciBuildRunsActionsGetToManyRelated]? = nil) async throws -> CiBuildActionsResponse {
        return try await ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(id: id, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiBuildActions: fieldsCiBuildActions, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiBuildActionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsActionsGetToManyRelated(urlString: String) async throws -> CiBuildActionsResponse {
        return try await ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciBuildRuns/{id}/actions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CiBuildActionsResponse> 
     */
    open class func ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(id: String, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciBuildRunsActionsGetToManyRelated]? = nil, fieldsCiBuildActions: [FieldsCiBuildActions_ciBuildRunsActionsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciBuildRunsActionsGetToManyRelated]? = nil) -> RequestBuilder<CiBuildActionsResponse> {
        var localVariablePath = "/v1/ciBuildRuns/{id}/actions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciBuildRuns]": (wrappedValue: fieldsCiBuildRuns?.encodeToJSON(), isExplode: false),
            "fields[ciBuildActions]": (wrappedValue: fieldsCiBuildActions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildActionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciBuildRuns/{id}/actions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiBuildActionsResponse> 
     */
    open class func ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CiBuildActionsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildActionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterBetaAppReviewSubmissionBetaReviewState
     */
    public enum FilterBetaAppReviewSubmissionBetaReviewState_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }

    /**
     * enum for parameter filterBuildAudienceType
     */
    public enum FilterBuildAudienceType_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case internalOnly = "INTERNAL_ONLY"
        case appStoreEligible = "APP_STORE_ELIGIBLE"
    }

    /**
     * enum for parameter filterPreReleaseVersionPlatform
     */
    public enum FilterPreReleaseVersionPlatform_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter filterProcessingState
     */
    public enum FilterProcessingState_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case processing = "PROCESSING"
        case failed = "FAILED"
        case invalid = "INVALID"
        case valid = "VALID"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case prereleaseversion = "preReleaseVersion"
        case prereleaseversion2 = "-preReleaseVersion"
        case uploadeddate = "uploadedDate"
        case uploadeddate2 = "-uploadedDate"
        case version = "version"
        case version2 = "-version"
    }

    /**
     * enum for parameter fieldsBuildBundles
     */
    public enum FieldsBuildBundles_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case appclipdomaincachestatus = "appClipDomainCacheStatus"
        case appclipdomaindebugstatus = "appClipDomainDebugStatus"
        case betaappclipinvocations = "betaAppClipInvocations"
        case buildbundlefilesizes = "buildBundleFileSizes"
        case bundleid = "bundleId"
        case bundletype = "bundleType"
        case dsymurl = "dSYMUrl"
        case deviceprotocols = "deviceProtocols"
        case entitlements = "entitlements"
        case filename = "fileName"
        case hasondemandresources = "hasOnDemandResources"
        case hasprerenderedicon = "hasPrerenderedIcon"
        case hassirikit = "hasSirikit"
        case includessymbols = "includesSymbols"
        case isiosbuildmacappstorecompatible = "isIosBuildMacAppStoreCompatible"
        case locales = "locales"
        case platformbuild = "platformBuild"
        case requiredcapabilities = "requiredCapabilities"
        case sdkbuild = "sdkBuild"
        case supportedarchitectures = "supportedArchitectures"
        case useslocationservices = "usesLocationServices"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case iconasset = "iconAsset"
        case icontype = "iconType"
        case name = "name"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case build = "build"
        case externalbuildstate = "externalBuildState"
        case internalbuildstate = "internalBuildState"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appdescription = "appDescription"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case createddate = "createdDate"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case prereleaseversion = "preReleaseVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#39;buildAudienceType&#39; (optional)
     - parameter filterExpired: (query) filter by attribute &#39;expired&#39; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#39;processingState&#39; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuildBundles: (query) the fields to include for returned resources of type buildBundles (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: BuildsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsBuildsGetToManyRelated(id: String, filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState_ciBuildRunsBuildsGetToManyRelated]? = nil, filterBuildAudienceType: [FilterBuildAudienceType_ciBuildRunsBuildsGetToManyRelated]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform_ciBuildRunsBuildsGetToManyRelated]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [FilterProcessingState_ciBuildRunsBuildsGetToManyRelated]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [Sort_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildBundles: [FieldsBuildBundles_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildIcons: [FieldsBuildIcons_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaTesters: [FieldsBetaTesters_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaGroups: [FieldsBetaGroups_ciBuildRunsBuildsGetToManyRelated]? = nil, limit: Int? = nil, limitIndividualTesters: Int? = nil, limitBetaGroups: Int? = nil, limitBetaBuildLocalizations: Int? = nil, limitIcons: Int? = nil, limitBuildBundles: Int? = nil, include: [Include_ciBuildRunsBuildsGetToManyRelated]? = nil) async throws -> BuildsResponse {
        return try await ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(id: id, filterBetaAppReviewSubmissionBetaReviewState: filterBetaAppReviewSubmissionBetaReviewState, filterBuildAudienceType: filterBuildAudienceType, filterExpired: filterExpired, filterPreReleaseVersionPlatform: filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion: filterPreReleaseVersionVersion, filterProcessingState: filterProcessingState, filterUsesNonExemptEncryption: filterUsesNonExemptEncryption, filterVersion: filterVersion, filterApp: filterApp, filterAppStoreVersion: filterAppStoreVersion, filterBetaGroups: filterBetaGroups, filterPreReleaseVersion: filterPreReleaseVersion, filterId: filterId, sort: sort, fieldsBuildBundles: fieldsBuildBundles, fieldsBuildIcons: fieldsBuildIcons, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBetaTesters: fieldsBetaTesters, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsApps: fieldsApps, fieldsBuilds: fieldsBuilds, fieldsBetaGroups: fieldsBetaGroups, limit: limit, limitIndividualTesters: limitIndividualTesters, limitBetaGroups: limitBetaGroups, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitIcons: limitIcons, limitBuildBundles: limitBuildBundles, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsBuildsGetToManyRelated(urlString: String) async throws -> BuildsResponse {
        return try await ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciBuildRuns/{id}/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#39;buildAudienceType&#39; (optional)
     - parameter filterExpired: (query) filter by attribute &#39;expired&#39; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#39;processingState&#39; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuildBundles: (query) the fields to include for returned resources of type buildBundles (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(id: String, filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState_ciBuildRunsBuildsGetToManyRelated]? = nil, filterBuildAudienceType: [FilterBuildAudienceType_ciBuildRunsBuildsGetToManyRelated]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform_ciBuildRunsBuildsGetToManyRelated]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [FilterProcessingState_ciBuildRunsBuildsGetToManyRelated]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [Sort_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildBundles: [FieldsBuildBundles_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildIcons: [FieldsBuildIcons_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaTesters: [FieldsBetaTesters_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciBuildRunsBuildsGetToManyRelated]? = nil, fieldsBetaGroups: [FieldsBetaGroups_ciBuildRunsBuildsGetToManyRelated]? = nil, limit: Int? = nil, limitIndividualTesters: Int? = nil, limitBetaGroups: Int? = nil, limitBetaBuildLocalizations: Int? = nil, limitIcons: Int? = nil, limitBuildBundles: Int? = nil, include: [Include_ciBuildRunsBuildsGetToManyRelated]? = nil) -> RequestBuilder<BuildsResponse> {
        var localVariablePath = "/v1/ciBuildRuns/{id}/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[betaAppReviewSubmission.betaReviewState]": (wrappedValue: filterBetaAppReviewSubmissionBetaReviewState?.encodeToJSON(), isExplode: false),
            "filter[buildAudienceType]": (wrappedValue: filterBuildAudienceType?.encodeToJSON(), isExplode: false),
            "filter[expired]": (wrappedValue: filterExpired?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion.platform]": (wrappedValue: filterPreReleaseVersionPlatform?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion.version]": (wrappedValue: filterPreReleaseVersionVersion?.encodeToJSON(), isExplode: false),
            "filter[processingState]": (wrappedValue: filterProcessingState?.encodeToJSON(), isExplode: false),
            "filter[usesNonExemptEncryption]": (wrappedValue: filterUsesNonExemptEncryption?.encodeToJSON(), isExplode: false),
            "filter[version]": (wrappedValue: filterVersion?.encodeToJSON(), isExplode: false),
            "filter[app]": (wrappedValue: filterApp?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersion]": (wrappedValue: filterAppStoreVersion?.encodeToJSON(), isExplode: false),
            "filter[betaGroups]": (wrappedValue: filterBetaGroups?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion]": (wrappedValue: filterPreReleaseVersion?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[buildBundles]": (wrappedValue: fieldsBuildBundles?.encodeToJSON(), isExplode: false),
            "fields[buildIcons]": (wrappedValue: fieldsBuildIcons?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewSubmissions]": (wrappedValue: fieldsBetaAppReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[individualTesters]": (wrappedValue: limitIndividualTesters?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[betaBuildLocalizations]": (wrappedValue: limitBetaBuildLocalizations?.encodeToJSON(), isExplode: true),
            "limit[icons]": (wrappedValue: limitIcons?.encodeToJSON(), isExplode: true),
            "limit[buildBundles]": (wrappedValue: limitBuildBundles?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciBuildRuns/{id}/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter ciBuildRunCreateRequest: (body) CiBuildRun representation 
     - returns: CiBuildRunResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsCreateInstance(ciBuildRunCreateRequest: CiBuildRunCreateRequest) async throws -> CiBuildRunResponse {
        return try await ciBuildRunsCreateInstanceWithRequestBuilder(ciBuildRunCreateRequest: ciBuildRunCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiBuildRunResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsCreateInstance(urlString: String) async throws -> CiBuildRunResponse {
        return try await ciBuildRunsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/ciBuildRuns
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter ciBuildRunCreateRequest: (body) CiBuildRun representation 
     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsCreateInstanceWithRequestBuilder(ciBuildRunCreateRequest: CiBuildRunCreateRequest) -> RequestBuilder<CiBuildRunResponse> {
        let localVariablePath = "/v1/ciBuildRuns"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ciBuildRunCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/ciBuildRuns
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<CiBuildRunResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildRunsGetInstance: String, CaseIterable {
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsGetInstance: String, CaseIterable {
        case builds = "builds"
        case destinationbranch = "destinationBranch"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiBuildActions
     */
    public enum FieldsCiBuildActions_ciBuildRunsGetInstance: String, CaseIterable {
        case actiontype = "actionType"
        case artifacts = "artifacts"
        case buildrun = "buildRun"
        case completionstatus = "completionStatus"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case isrequiredtopass = "isRequiredToPass"
        case issuecounts = "issueCounts"
        case issues = "issues"
        case name = "name"
        case starteddate = "startedDate"
        case testresults = "testResults"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciBuildRunsGetInstance: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: CiBuildRunResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsGetInstance(id: String, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciBuildRunsGetInstance]? = nil, include: [Include_ciBuildRunsGetInstance]? = nil, fieldsCiBuildActions: [FieldsCiBuildActions_ciBuildRunsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_ciBuildRunsGetInstance]? = nil, limitBuilds: Int? = nil) async throws -> CiBuildRunResponse {
        return try await ciBuildRunsGetInstanceWithRequestBuilder(id: id, fieldsCiBuildRuns: fieldsCiBuildRuns, include: include, fieldsCiBuildActions: fieldsCiBuildActions, fieldsBuilds: fieldsBuilds, limitBuilds: limitBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiBuildRunResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciBuildRunsGetInstance(urlString: String) async throws -> CiBuildRunResponse {
        return try await ciBuildRunsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciBuildRuns/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsGetInstanceWithRequestBuilder(id: String, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciBuildRunsGetInstance]? = nil, include: [Include_ciBuildRunsGetInstance]? = nil, fieldsCiBuildActions: [FieldsCiBuildActions_ciBuildRunsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_ciBuildRunsGetInstance]? = nil, limitBuilds: Int? = nil) -> RequestBuilder<CiBuildRunResponse> {
        var localVariablePath = "/v1/ciBuildRuns/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciBuildRuns]": (wrappedValue: fieldsCiBuildRuns?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[ciBuildActions]": (wrappedValue: fieldsCiBuildActions?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciBuildRuns/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<CiBuildRunResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
