//
// AppsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppsAPI {

    /**
     * enum for parameter fieldsAlternativeDistributionKeys
     */
    public enum FieldsAlternativeDistributionKeys_appsAlternativeDistributionKeyGetToOneRelated: String, CaseIterable {
        case app = "app"
        case publickey = "publicKey"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - returns: AlternativeDistributionKeyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAlternativeDistributionKeyGetToOneRelated(id: String, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsAlternativeDistributionKeyGetToOneRelated]? = nil) async throws -> AlternativeDistributionKeyResponse {
        return try await appsAlternativeDistributionKeyGetToOneRelatedWithRequestBuilder(id: id, fieldsAlternativeDistributionKeys: fieldsAlternativeDistributionKeys).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AlternativeDistributionKeyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAlternativeDistributionKeyGetToOneRelated(urlString: String) async throws -> AlternativeDistributionKeyResponse {
        return try await appsAlternativeDistributionKeyGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/alternativeDistributionKey
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - returns: RequestBuilder<AlternativeDistributionKeyResponse> 
     */
    open class func appsAlternativeDistributionKeyGetToOneRelatedWithRequestBuilder(id: String, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsAlternativeDistributionKeyGetToOneRelated]? = nil) -> RequestBuilder<AlternativeDistributionKeyResponse> {
        var localVariablePath = "/v1/apps/{id}/alternativeDistributionKey"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[alternativeDistributionKeys]": (wrappedValue: fieldsAlternativeDistributionKeys?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionKeyResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/alternativeDistributionKey
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AlternativeDistributionKeyResponse> 
     */
    open class func appsAlternativeDistributionKeyGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AlternativeDistributionKeyResponse> {
        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionKeyResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterAccessType
     */
    public enum FilterAccessType_appsAnalyticsReportRequestsGetToManyRelated: String, CaseIterable {
        case oneTimeSnapshot = "ONE_TIME_SNAPSHOT"
        case ongoing = "ONGOING"
    }

    /**
     * enum for parameter fieldsAnalyticsReportRequests
     */
    public enum FieldsAnalyticsReportRequests_appsAnalyticsReportRequestsGetToManyRelated: String, CaseIterable {
        case accesstype = "accessType"
        case app = "app"
        case reports = "reports"
        case stoppedduetoinactivity = "stoppedDueToInactivity"
    }

    /**
     * enum for parameter fieldsAnalyticsReports
     */
    public enum FieldsAnalyticsReports_appsAnalyticsReportRequestsGetToManyRelated: String, CaseIterable {
        case category = "category"
        case instances = "instances"
        case name = "name"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAnalyticsReportRequestsGetToManyRelated: String, CaseIterable {
        case reports = "reports"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterAccessType: (query) filter by attribute &#39;accessType&#39; (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAnalyticsReports: (query) the fields to include for returned resources of type analyticsReports (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitReports: (query) maximum number of related reports returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AnalyticsReportRequestsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAnalyticsReportRequestsGetToManyRelated(id: String, filterAccessType: [FilterAccessType_appsAnalyticsReportRequestsGetToManyRelated]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsAnalyticsReportRequestsGetToManyRelated]? = nil, fieldsAnalyticsReports: [FieldsAnalyticsReports_appsAnalyticsReportRequestsGetToManyRelated]? = nil, limit: Int? = nil, limitReports: Int? = nil, include: [Include_appsAnalyticsReportRequestsGetToManyRelated]? = nil) async throws -> AnalyticsReportRequestsResponse {
        return try await appsAnalyticsReportRequestsGetToManyRelatedWithRequestBuilder(id: id, filterAccessType: filterAccessType, fieldsAnalyticsReportRequests: fieldsAnalyticsReportRequests, fieldsAnalyticsReports: fieldsAnalyticsReports, limit: limit, limitReports: limitReports, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AnalyticsReportRequestsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAnalyticsReportRequestsGetToManyRelated(urlString: String) async throws -> AnalyticsReportRequestsResponse {
        return try await appsAnalyticsReportRequestsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/analyticsReportRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterAccessType: (query) filter by attribute &#39;accessType&#39; (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAnalyticsReports: (query) the fields to include for returned resources of type analyticsReports (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitReports: (query) maximum number of related reports returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AnalyticsReportRequestsResponse> 
     */
    open class func appsAnalyticsReportRequestsGetToManyRelatedWithRequestBuilder(id: String, filterAccessType: [FilterAccessType_appsAnalyticsReportRequestsGetToManyRelated]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsAnalyticsReportRequestsGetToManyRelated]? = nil, fieldsAnalyticsReports: [FieldsAnalyticsReports_appsAnalyticsReportRequestsGetToManyRelated]? = nil, limit: Int? = nil, limitReports: Int? = nil, include: [Include_appsAnalyticsReportRequestsGetToManyRelated]? = nil) -> RequestBuilder<AnalyticsReportRequestsResponse> {
        var localVariablePath = "/v1/apps/{id}/analyticsReportRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[accessType]": (wrappedValue: filterAccessType?.encodeToJSON(), isExplode: false),
            "fields[analyticsReportRequests]": (wrappedValue: fieldsAnalyticsReportRequests?.encodeToJSON(), isExplode: false),
            "fields[analyticsReports]": (wrappedValue: fieldsAnalyticsReports?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[reports]": (wrappedValue: limitReports?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsReportRequestsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/analyticsReportRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AnalyticsReportRequestsResponse> 
     */
    open class func appsAnalyticsReportRequestsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AnalyticsReportRequestsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AnalyticsReportRequestsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppAvailabilities
     */
    public enum FieldsAppAvailabilities_appsAppAvailabilityGetToOneRelated: String, CaseIterable {
        case app = "app"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppAvailabilityGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsAppAvailabilityGetToOneRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppAvailabilityGetToOneRelated: String, CaseIterable {
        case app = "app"
        case availableterritories = "availableTerritories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppAvailabilityResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppAvailabilityGetToOneRelated(id: String, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsAppAvailabilityGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsAppAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil, include: [Include_appsAppAvailabilityGetToOneRelated]? = nil) async throws -> AppAvailabilityResponse {
        return try await appsAppAvailabilityGetToOneRelatedWithRequestBuilder(id: id, fieldsAppAvailabilities: fieldsAppAvailabilities, fieldsApps: fieldsApps, fieldsTerritories: fieldsTerritories, limitAvailableTerritories: limitAvailableTerritories, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppAvailabilityResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppAvailabilityGetToOneRelated(urlString: String) async throws -> AppAvailabilityResponse {
        return try await appsAppAvailabilityGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appAvailability
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppAvailabilityResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsAppAvailabilityGetToOneRelatedWithRequestBuilder(id: String, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsAppAvailabilityGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsAppAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil, include: [Include_appsAppAvailabilityGetToOneRelated]? = nil) -> RequestBuilder<AppAvailabilityResponse> {
        var localVariablePath = "/v1/apps/{id}/appAvailability"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appAvailabilities]": (wrappedValue: fieldsAppAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit[availableTerritories]": (wrappedValue: limitAvailableTerritories?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appAvailability
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppAvailabilityResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsAppAvailabilityGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppAvailabilityResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsAppClipsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppClipsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appsAppClipsGetToManyRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppClipsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterBundleId: (query) filter by attribute &#39;bundleId&#39; (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppClipDefaultExperiences: (query) maximum number of related appClipDefaultExperiences returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppClipsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppClipsGetToManyRelated(id: String, filterBundleId: [String]? = nil, fieldsAppClips: [FieldsAppClips_appsAppClipsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppClipsGetToManyRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appsAppClipsGetToManyRelated]? = nil, limit: Int? = nil, limitAppClipDefaultExperiences: Int? = nil, include: [Include_appsAppClipsGetToManyRelated]? = nil) async throws -> AppClipsResponse {
        return try await appsAppClipsGetToManyRelatedWithRequestBuilder(id: id, filterBundleId: filterBundleId, fieldsAppClips: fieldsAppClips, fieldsApps: fieldsApps, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, limit: limit, limitAppClipDefaultExperiences: limitAppClipDefaultExperiences, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppClipsGetToManyRelated(urlString: String) async throws -> AppClipsResponse {
        return try await appsAppClipsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appClips
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterBundleId: (query) filter by attribute &#39;bundleId&#39; (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppClipDefaultExperiences: (query) maximum number of related appClipDefaultExperiences returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppClipsResponse> 
     */
    open class func appsAppClipsGetToManyRelatedWithRequestBuilder(id: String, filterBundleId: [String]? = nil, fieldsAppClips: [FieldsAppClips_appsAppClipsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppClipsGetToManyRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appsAppClipsGetToManyRelated]? = nil, limit: Int? = nil, limitAppClipDefaultExperiences: Int? = nil, include: [Include_appsAppClipsGetToManyRelated]? = nil) -> RequestBuilder<AppClipsResponse> {
        var localVariablePath = "/v1/apps/{id}/appClips"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[bundleId]": (wrappedValue: filterBundleId?.encodeToJSON(), isExplode: false),
            "fields[appClips]": (wrappedValue: fieldsAppClips?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appClipDefaultExperiences]": (wrappedValue: limitAppClipDefaultExperiences?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appClips
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipsResponse> 
     */
    open class func appsAppClipsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsAppCustomProductPagesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageVersions
     */
    public enum FieldsAppCustomProductPageVersions_appsAppCustomProductPagesGetToManyRelated: String, CaseIterable {
        case appcustomproductpage = "appCustomProductPage"
        case appcustomproductpagelocalizations = "appCustomProductPageLocalizations"
        case state = "state"
        case version = "version"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppCustomProductPagesGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppCustomProductPagesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterVisible: (query) filter by attribute &#39;visible&#39; (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppCustomProductPageVersions: (query) maximum number of related appCustomProductPageVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppCustomProductPagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppCustomProductPagesGetToManyRelated(id: String, filterVisible: [String]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsAppCustomProductPagesGetToManyRelated]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions_appsAppCustomProductPagesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppCustomProductPagesGetToManyRelated]? = nil, limit: Int? = nil, limitAppCustomProductPageVersions: Int? = nil, include: [Include_appsAppCustomProductPagesGetToManyRelated]? = nil) async throws -> AppCustomProductPagesResponse {
        return try await appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(id: id, filterVisible: filterVisible, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsAppCustomProductPageVersions: fieldsAppCustomProductPageVersions, fieldsApps: fieldsApps, limit: limit, limitAppCustomProductPageVersions: limitAppCustomProductPageVersions, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppCustomProductPagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppCustomProductPagesGetToManyRelated(urlString: String) async throws -> AppCustomProductPagesResponse {
        return try await appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appCustomProductPages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterVisible: (query) filter by attribute &#39;visible&#39; (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppCustomProductPageVersions: (query) maximum number of related appCustomProductPageVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppCustomProductPagesResponse> 
     */
    open class func appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(id: String, filterVisible: [String]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsAppCustomProductPagesGetToManyRelated]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions_appsAppCustomProductPagesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppCustomProductPagesGetToManyRelated]? = nil, limit: Int? = nil, limitAppCustomProductPageVersions: Int? = nil, include: [Include_appsAppCustomProductPagesGetToManyRelated]? = nil) -> RequestBuilder<AppCustomProductPagesResponse> {
        var localVariablePath = "/v1/apps/{id}/appCustomProductPages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[visible]": (wrappedValue: filterVisible?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPages]": (wrappedValue: fieldsAppCustomProductPages?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPageVersions]": (wrappedValue: fieldsAppCustomProductPageVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appCustomProductPageVersions]": (wrappedValue: limitAppCustomProductPageVersions?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppCustomProductPagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appCustomProductPages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppCustomProductPagesResponse> 
     */
    open class func appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppCustomProductPagesResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppCustomProductPagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appdescription = "appDescription"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case createddate = "createdDate"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarationDocuments
     */
    public enum FieldsAppEncryptionDeclarationDocuments_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case downloadurl = "downloadUrl"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppEncryptionDeclarationsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
        case builds = "builds"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEncryptionDeclarationDocuments: (query) the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppEncryptionDeclarationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppEncryptionDeclarationsGetToManyRelated(id: String, filterPlatform: [FilterPlatform_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, filterBuilds: [String]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsAppEncryptionDeclarationDocuments: [FieldsAppEncryptionDeclarationDocuments_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [Include_appsAppEncryptionDeclarationsGetToManyRelated]? = nil) async throws -> AppEncryptionDeclarationsResponse {
        return try await appsAppEncryptionDeclarationsGetToManyRelatedWithRequestBuilder(id: id, filterPlatform: filterPlatform, filterBuilds: filterBuilds, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsApps: fieldsApps, fieldsAppEncryptionDeclarationDocuments: fieldsAppEncryptionDeclarationDocuments, fieldsBuilds: fieldsBuilds, limit: limit, limitBuilds: limitBuilds, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppEncryptionDeclarationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppEncryptionDeclarationsGetToManyRelated(urlString: String) async throws -> AppEncryptionDeclarationsResponse {
        return try await appsAppEncryptionDeclarationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appEncryptionDeclarations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEncryptionDeclarationDocuments: (query) the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppEncryptionDeclarationsResponse> 
     */
    open class func appsAppEncryptionDeclarationsGetToManyRelatedWithRequestBuilder(id: String, filterPlatform: [FilterPlatform_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, filterBuilds: [String]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsAppEncryptionDeclarationDocuments: [FieldsAppEncryptionDeclarationDocuments_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_appsAppEncryptionDeclarationsGetToManyRelated]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [Include_appsAppEncryptionDeclarationsGetToManyRelated]? = nil) -> RequestBuilder<AppEncryptionDeclarationsResponse> {
        var localVariablePath = "/v1/apps/{id}/appEncryptionDeclarations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[builds]": (wrappedValue: filterBuilds?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarationDocuments]": (wrappedValue: fieldsAppEncryptionDeclarationDocuments?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppEncryptionDeclarationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appEncryptionDeclarations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppEncryptionDeclarationsResponse> 
     */
    open class func appsAppEncryptionDeclarationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppEncryptionDeclarationsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppEncryptionDeclarationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterEventState
     */
    public enum FilterEventState_appsAppEventsGetToManyRelated: String, CaseIterable {
        case draft = "DRAFT"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case published = "PUBLISHED"
        case past = "PAST"
        case archived = "ARCHIVED"
    }

    /**
     * enum for parameter fieldsAppEventLocalizations
     */
    public enum FieldsAppEventLocalizations_appsAppEventsGetToManyRelated: String, CaseIterable {
        case appevent = "appEvent"
        case appeventscreenshots = "appEventScreenshots"
        case appeventvideoclips = "appEventVideoClips"
        case locale = "locale"
        case longdescription = "longDescription"
        case name = "name"
        case shortdescription = "shortDescription"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsAppEventsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppEventsGetToManyRelated: String, CaseIterable {
        case localizations = "localizations"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterEventState: (query) filter by attribute &#39;eventState&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppEventLocalizations: (query) the fields to include for returned resources of type appEventLocalizations (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppEventsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppEventsGetToManyRelated(id: String, filterEventState: [FilterEventState_appsAppEventsGetToManyRelated]? = nil, filterId: [String]? = nil, fieldsAppEventLocalizations: [FieldsAppEventLocalizations_appsAppEventsGetToManyRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_appsAppEventsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, include: [Include_appsAppEventsGetToManyRelated]? = nil) async throws -> AppEventsResponse {
        return try await appsAppEventsGetToManyRelatedWithRequestBuilder(id: id, filterEventState: filterEventState, filterId: filterId, fieldsAppEventLocalizations: fieldsAppEventLocalizations, fieldsAppEvents: fieldsAppEvents, limit: limit, limitLocalizations: limitLocalizations, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppEventsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppEventsGetToManyRelated(urlString: String) async throws -> AppEventsResponse {
        return try await appsAppEventsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appEvents
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterEventState: (query) filter by attribute &#39;eventState&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppEventLocalizations: (query) the fields to include for returned resources of type appEventLocalizations (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppEventsResponse> 
     */
    open class func appsAppEventsGetToManyRelatedWithRequestBuilder(id: String, filterEventState: [FilterEventState_appsAppEventsGetToManyRelated]? = nil, filterId: [String]? = nil, fieldsAppEventLocalizations: [FieldsAppEventLocalizations_appsAppEventsGetToManyRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_appsAppEventsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, include: [Include_appsAppEventsGetToManyRelated]? = nil) -> RequestBuilder<AppEventsResponse> {
        var localVariablePath = "/v1/apps/{id}/appEvents"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[eventState]": (wrappedValue: filterEventState?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[appEventLocalizations]": (wrappedValue: fieldsAppEventLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appEvents]": (wrappedValue: fieldsAppEvents?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppEventsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appEvents
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppEventsResponse> 
     */
    open class func appsAppEventsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppEventsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppEventsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appsAppInfosGetToManyRelated: String, CaseIterable {
        case ageratingoverride = "ageRatingOverride"
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsAppInfosGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case brazilageratingv2 = "brazilAgeRatingV2"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
        case state = "state"
    }

    /**
     * enum for parameter fieldsAppInfoLocalizations
     */
    public enum FieldsAppInfoLocalizations_appsAppInfosGetToManyRelated: String, CaseIterable {
        case appinfo = "appInfo"
        case locale = "locale"
        case name = "name"
        case privacychoicesurl = "privacyChoicesUrl"
        case privacypolicytext = "privacyPolicyText"
        case privacypolicyurl = "privacyPolicyUrl"
        case subtitle = "subtitle"
    }

    /**
     * enum for parameter fieldsAppCategories
     */
    public enum FieldsAppCategories_appsAppInfosGetToManyRelated: String, CaseIterable {
        case parent = "parent"
        case platforms = "platforms"
        case subcategories = "subcategories"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppInfosGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppInfosGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppInfoLocalizations: (query) the fields to include for returned resources of type appInfoLocalizations (optional)
     - parameter fieldsAppCategories: (query) the fields to include for returned resources of type appCategories (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppInfoLocalizations: (query) maximum number of related appInfoLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppInfosResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppInfosGetToManyRelated(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appsAppInfosGetToManyRelated]? = nil, fieldsAppInfos: [FieldsAppInfos_appsAppInfosGetToManyRelated]? = nil, fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations_appsAppInfosGetToManyRelated]? = nil, fieldsAppCategories: [FieldsAppCategories_appsAppInfosGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppInfosGetToManyRelated]? = nil, limit: Int? = nil, limitAppInfoLocalizations: Int? = nil, include: [Include_appsAppInfosGetToManyRelated]? = nil) async throws -> AppInfosResponse {
        return try await appsAppInfosGetToManyRelatedWithRequestBuilder(id: id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppInfos: fieldsAppInfos, fieldsAppInfoLocalizations: fieldsAppInfoLocalizations, fieldsAppCategories: fieldsAppCategories, fieldsApps: fieldsApps, limit: limit, limitAppInfoLocalizations: limitAppInfoLocalizations, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppInfosResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppInfosGetToManyRelated(urlString: String) async throws -> AppInfosResponse {
        return try await appsAppInfosGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appInfos
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppInfoLocalizations: (query) the fields to include for returned resources of type appInfoLocalizations (optional)
     - parameter fieldsAppCategories: (query) the fields to include for returned resources of type appCategories (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppInfoLocalizations: (query) maximum number of related appInfoLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppInfosResponse> 
     */
    open class func appsAppInfosGetToManyRelatedWithRequestBuilder(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appsAppInfosGetToManyRelated]? = nil, fieldsAppInfos: [FieldsAppInfos_appsAppInfosGetToManyRelated]? = nil, fieldsAppInfoLocalizations: [FieldsAppInfoLocalizations_appsAppInfosGetToManyRelated]? = nil, fieldsAppCategories: [FieldsAppCategories_appsAppInfosGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppInfosGetToManyRelated]? = nil, limit: Int? = nil, limitAppInfoLocalizations: Int? = nil, include: [Include_appsAppInfosGetToManyRelated]? = nil) -> RequestBuilder<AppInfosResponse> {
        var localVariablePath = "/v1/apps/{id}/appInfos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(), isExplode: false),
            "fields[appInfos]": (wrappedValue: fieldsAppInfos?.encodeToJSON(), isExplode: false),
            "fields[appInfoLocalizations]": (wrappedValue: fieldsAppInfoLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appCategories]": (wrappedValue: fieldsAppCategories?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appInfoLocalizations]": (wrappedValue: limitAppInfoLocalizations?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppInfosResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appInfos
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppInfosResponse> 
     */
    open class func appsAppInfosGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppInfosResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppInfosResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsAppPricePointsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppPricePointsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsAppPricePointsGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppPricePointsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppPricePointsV3Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppPricePointsGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsAppPricePointsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsAppPricePointsGetToManyRelated]? = nil) async throws -> AppPricePointsV3Response {
        return try await appsAppPricePointsGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsAppPricePoints: fieldsAppPricePoints, fieldsApps: fieldsApps, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPricePointsV3Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppPricePointsGetToManyRelated(urlString: String) async throws -> AppPricePointsV3Response {
        return try await appsAppPricePointsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appPricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppPricePointsV3Response> 
     */
    open class func appsAppPricePointsGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsAppPricePointsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsAppPricePointsGetToManyRelated]? = nil) -> RequestBuilder<AppPricePointsV3Response> {
        var localVariablePath = "/v1/apps/{id}/appPricePoints"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[appPricePoints]": (wrappedValue: fieldsAppPricePoints?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPricePointsV3Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appPricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPricePointsV3Response> 
     */
    open class func appsAppPricePointsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPricePointsV3Response> {
        let localVariableRequestBuilder: RequestBuilder<AppPricePointsV3Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsAppPriceScheduleGetToOneRelated: String, CaseIterable {
        case apppricepoint = "appPricePoint"
        case enddate = "endDate"
        case manual = "manual"
        case startdate = "startDate"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsAppPriceSchedules
     */
    public enum FieldsAppPriceSchedules_appsAppPriceScheduleGetToOneRelated: String, CaseIterable {
        case app = "app"
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppPriceScheduleGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsAppPriceScheduleGetToOneRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppPriceScheduleGetToOneRelated: String, CaseIterable {
        case app = "app"
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case manualprices = "manualPrices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - parameter limitAutomaticPrices: (query) maximum number of related automaticPrices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppPriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppPriceScheduleGetToOneRelated(id: String, fieldsAppPrices: [FieldsAppPrices_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppPriceScheduleGetToOneRelated]? = nil, limitManualPrices: Int? = nil, limitAutomaticPrices: Int? = nil, include: [Include_appsAppPriceScheduleGetToOneRelated]? = nil) async throws -> AppPriceScheduleResponse {
        return try await appsAppPriceScheduleGetToOneRelatedWithRequestBuilder(id: id, fieldsAppPrices: fieldsAppPrices, fieldsAppPriceSchedules: fieldsAppPriceSchedules, fieldsApps: fieldsApps, fieldsTerritories: fieldsTerritories, limitManualPrices: limitManualPrices, limitAutomaticPrices: limitAutomaticPrices, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppPriceScheduleGetToOneRelated(urlString: String) async throws -> AppPriceScheduleResponse {
        return try await appsAppPriceScheduleGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appPriceSchedule
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - parameter limitAutomaticPrices: (query) maximum number of related automaticPrices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppPriceScheduleResponse> 
     */
    open class func appsAppPriceScheduleGetToOneRelatedWithRequestBuilder(id: String, fieldsAppPrices: [FieldsAppPrices_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsAppPriceScheduleGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsAppPriceScheduleGetToOneRelated]? = nil, limitManualPrices: Int? = nil, limitAutomaticPrices: Int? = nil, include: [Include_appsAppPriceScheduleGetToOneRelated]? = nil) -> RequestBuilder<AppPriceScheduleResponse> {
        var localVariablePath = "/v1/apps/{id}/appPriceSchedule"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appPrices]": (wrappedValue: fieldsAppPrices?.encodeToJSON(), isExplode: false),
            "fields[appPriceSchedules]": (wrappedValue: fieldsAppPriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit[manualPrices]": (wrappedValue: limitManualPrices?.encodeToJSON(), isExplode: true),
            "limit[automaticPrices]": (wrappedValue: limitAutomaticPrices?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appPriceSchedule
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPriceScheduleResponse> 
     */
    open class func appsAppPriceScheduleGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPriceScheduleResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppPriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case enddate = "endDate"
        case latestcontrolversion = "latestControlVersion"
        case name = "name"
        case platform = "platform"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatments
     */
    public enum FieldsAppStoreVersionExperimentTreatments_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case appicon = "appIcon"
        case appiconname = "appIconName"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimenttreatmentlocalizations = "appStoreVersionExperimentTreatmentLocalizations"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case name = "name"
        case promoteddate = "promotedDate"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppStoreVersionExperimentsV2GetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case latestcontrolversion = "latestControlVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitControlVersions: (query) maximum number of related controlVersions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreVersionExperimentsV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppStoreVersionExperimentsV2GetToManyRelated(id: String, filterState: [FilterState_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limit: Int? = nil, limitControlVersions: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [Include_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil) async throws -> AppStoreVersionExperimentsV2Response {
        return try await appsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(id: id, filterState: filterState, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments: fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, limit: limit, limitControlVersions: limitControlVersions, limitAppStoreVersionExperimentTreatments: limitAppStoreVersionExperimentTreatments, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionExperimentsV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppStoreVersionExperimentsV2GetToManyRelated(urlString: String) async throws -> AppStoreVersionExperimentsV2Response {
        return try await appsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appStoreVersionExperimentsV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitControlVersions: (query) maximum number of related controlVersions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreVersionExperimentsV2Response> 
     */
    open class func appsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(id: String, filterState: [FilterState_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limit: Int? = nil, limitControlVersions: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [Include_appsAppStoreVersionExperimentsV2GetToManyRelated]? = nil) -> RequestBuilder<AppStoreVersionExperimentsV2Response> {
        var localVariablePath = "/v1/apps/{id}/appStoreVersionExperimentsV2"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperimentTreatments]": (wrappedValue: fieldsAppStoreVersionExperimentTreatments?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[controlVersions]": (wrappedValue: limitControlVersions?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentTreatments]": (wrappedValue: limitAppStoreVersionExperimentTreatments?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appStoreVersionExperimentsV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionExperimentsV2Response> 
     */
    open class func appsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionExperimentsV2Response> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterAppStoreState
     */
    public enum FilterAppStoreState_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case accepted = "ACCEPTED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingContract = "PENDING_CONTRACT"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
        case processingForAppStore = "PROCESSING_FOR_APP_STORE"
        case readyForReview = "READY_FOR_REVIEW"
        case readyForSale = "READY_FOR_SALE"
        case rejected = "REJECTED"
        case removedFromSale = "REMOVED_FROM_SALE"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
        case notApplicable = "NOT_APPLICABLE"
    }

    /**
     * enum for parameter filterAppVersionState
     */
    public enum FilterAppVersionState_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case accepted = "ACCEPTED"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case processingForDistribution = "PROCESSING_FOR_DISTRIBUTION"
        case readyForDistribution = "READY_FOR_DISTRIBUTION"
        case readyForReview = "READY_FOR_REVIEW"
        case rejected = "REJECTED"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case ageratingoverride = "ageRatingOverride"
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case enddate = "endDate"
        case latestcontrolversion = "latestControlVersion"
        case name = "name"
        case platform = "platform"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case versions = "versions"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppStoreVersionsGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterAppStoreState: (query) filter by attribute &#39;appStoreState&#39; (optional)
     - parameter filterAppVersionState: (query) filter by attribute &#39;appVersionState&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterVersionString: (query) filter by attribute &#39;versionString&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppStoreVersionsGetToManyRelated(id: String, filterAppStoreState: [FilterAppStoreState_appsAppStoreVersionsGetToManyRelated]? = nil, filterAppVersionState: [FilterAppVersionState_appsAppStoreVersionsGetToManyRelated]? = nil, filterPlatform: [FilterPlatform_appsAppStoreVersionsGetToManyRelated]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_appsAppStoreVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, include: [Include_appsAppStoreVersionsGetToManyRelated]? = nil) async throws -> AppStoreVersionsResponse {
        return try await appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(id: id, filterAppStoreState: filterAppStoreState, filterAppVersionState: filterAppVersionState, filterPlatform: filterPlatform, filterVersionString: filterVersionString, filterId: filterId, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, limit: limit, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAppStoreVersionsGetToManyRelated(urlString: String) async throws -> AppStoreVersionsResponse {
        return try await appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/appStoreVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterAppStoreState: (query) filter by attribute &#39;appStoreState&#39; (optional)
     - parameter filterAppVersionState: (query) filter by attribute &#39;appVersionState&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterVersionString: (query) filter by attribute &#39;versionString&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreVersionsResponse> 
     */
    open class func appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(id: String, filterAppStoreState: [FilterAppStoreState_appsAppStoreVersionsGetToManyRelated]? = nil, filterAppVersionState: [FilterAppVersionState_appsAppStoreVersionsGetToManyRelated]? = nil, filterPlatform: [FilterPlatform_appsAppStoreVersionsGetToManyRelated]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appsAppStoreVersionsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_appsAppStoreVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, include: [Include_appsAppStoreVersionsGetToManyRelated]? = nil) -> RequestBuilder<AppStoreVersionsResponse> {
        var localVariablePath = "/v1/apps/{id}/appStoreVersions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[appStoreState]": (wrappedValue: filterAppStoreState?.encodeToJSON(), isExplode: false),
            "filter[appVersionState]": (wrappedValue: filterAppVersionState?.encodeToJSON(), isExplode: false),
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[versionString]": (wrappedValue: filterVersionString?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(), isExplode: false),
            "fields[appStoreReviewDetails]": (wrappedValue: fieldsAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionSubmissions]": (wrappedValue: fieldsAppStoreVersionSubmissions?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[routingAppCoverages]": (wrappedValue: fieldsRoutingAppCoverages?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionPhasedReleases]": (wrappedValue: fieldsAppStoreVersionPhasedReleases?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionLocalizations]": (wrappedValue: limitAppStoreVersionLocalizations?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperiments]": (wrappedValue: limitAppStoreVersionExperiments?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/appStoreVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionsResponse> 
     */
    open class func appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsAvailableTerritoriesGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: TerritoriesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAvailableTerritoriesGetToManyRelated(id: String, fieldsTerritories: [FieldsTerritories_appsAvailableTerritoriesGetToManyRelated]? = nil, limit: Int? = nil) async throws -> TerritoriesResponse {
        return try await appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(id: id, fieldsTerritories: fieldsTerritories, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: TerritoriesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsAvailableTerritoriesGetToManyRelated(urlString: String) async throws -> TerritoriesResponse {
        return try await appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/availableTerritories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<TerritoriesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(id: String, fieldsTerritories: [FieldsTerritories_appsAvailableTerritoriesGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<TerritoriesResponse> {
        var localVariablePath = "/v1/apps/{id}/availableTerritories"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TerritoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/availableTerritories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<TerritoriesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<TerritoriesResponse> {
        let localVariableRequestBuilder: RequestBuilder<TerritoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsBetaAppLocalizationsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BetaAppLocalizationsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaAppLocalizationsGetToManyRelated(id: String, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsBetaAppLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BetaAppLocalizationsWithoutIncludesResponse {
        return try await appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaAppLocalizationsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaAppLocalizationsGetToManyRelated(urlString: String) async throws -> BetaAppLocalizationsWithoutIncludesResponse {
        return try await appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/betaAppLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse> 
     */
    open class func appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsBetaAppLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/betaAppLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaAppLocalizations]": (wrappedValue: fieldsBetaAppLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/betaAppLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse> 
     */
    open class func appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaAppLocalizationsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsBetaAppReviewDetailGetToOneRelated: String, CaseIterable {
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - returns: BetaAppReviewDetailWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaAppReviewDetailGetToOneRelated(id: String, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsBetaAppReviewDetailGetToOneRelated]? = nil) async throws -> BetaAppReviewDetailWithoutIncludesResponse {
        return try await appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaAppReviewDetailWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaAppReviewDetailGetToOneRelated(urlString: String) async throws -> BetaAppReviewDetailWithoutIncludesResponse {
        return try await appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/betaAppReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - returns: RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse> 
     */
    open class func appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsBetaAppReviewDetailGetToOneRelated]? = nil) -> RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/betaAppReviewDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaAppReviewDetails]": (wrappedValue: fieldsBetaAppReviewDetails?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/betaAppReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse> 
     */
    open class func appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaAppReviewDetailWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsBetaGroupsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BetaGroupsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaGroupsGetToManyRelated(id: String, fieldsBetaGroups: [FieldsBetaGroups_appsBetaGroupsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BetaGroupsWithoutIncludesResponse {
        return try await appsBetaGroupsGetToManyRelatedWithRequestBuilder(id: id, fieldsBetaGroups: fieldsBetaGroups, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaGroupsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaGroupsGetToManyRelated(urlString: String) async throws -> BetaGroupsWithoutIncludesResponse {
        return try await appsBetaGroupsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaGroupsWithoutIncludesResponse> 
     */
    open class func appsBetaGroupsGetToManyRelatedWithRequestBuilder(id: String, fieldsBetaGroups: [FieldsBetaGroups_appsBetaGroupsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BetaGroupsWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaGroupsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaGroupsWithoutIncludesResponse> 
     */
    open class func appsBetaGroupsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaGroupsWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaGroupsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsBetaLicenseAgreementGetToOneRelated: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - returns: BetaLicenseAgreementWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaLicenseAgreementGetToOneRelated(id: String, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsBetaLicenseAgreementGetToOneRelated]? = nil) async throws -> BetaLicenseAgreementWithoutIncludesResponse {
        return try await appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(id: id, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaLicenseAgreementWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaLicenseAgreementGetToOneRelated(urlString: String) async throws -> BetaLicenseAgreementWithoutIncludesResponse {
        return try await appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/betaLicenseAgreement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - returns: RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse> 
     */
    open class func appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(id: String, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsBetaLicenseAgreementGetToOneRelated]? = nil) -> RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/betaLicenseAgreement"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaLicenseAgreements]": (wrappedValue: fieldsBetaLicenseAgreements?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/betaLicenseAgreement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse> 
     */
    open class func appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaLicenseAgreementWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_appsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case betatesters = "betaTesters"
    }

    /**
     * enum for parameter period
     */
    public enum Period_appsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case p7D = "P7D"
        case p30D = "P30D"
        case p90D = "P90D"
        case p365D = "P365D"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTesterUsagesGetMetrics(id: String, limit: Int? = nil, groupBy: [GroupBy_appsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_appsBetaTesterUsagesGetMetrics? = nil) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await appsBetaTesterUsagesGetMetricsWithRequestBuilder(id: id, limit: limit, groupBy: groupBy, filterBetaTesters: filterBetaTesters, period: period).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTesterUsagesGetMetrics(urlString: String) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await appsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func appsBetaTesterUsagesGetMetricsWithRequestBuilder(id: String, limit: Int? = nil, groupBy: [GroupBy_appsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_appsBetaTesterUsagesGetMetrics? = nil) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        var localVariablePath = "/v1/apps/{id}/metrics/betaTesterUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[betaTesters]": (wrappedValue: filterBetaTesters?.encodeToJSON(), isExplode: false),
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func appsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appBetaTestersLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTestersDeleteToManyRelationship(id: String, appBetaTestersLinkagesRequest: AppBetaTestersLinkagesRequest) async throws {
        return try await appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(id: id, appBetaTestersLinkagesRequest: appBetaTestersLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTestersDeleteToManyRelationship(urlString: String) async throws {
        return try await appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/apps/{id}/relationships/betaTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appBetaTestersLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(id: String, appBetaTestersLinkagesRequest: AppBetaTestersLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/apps/{id}/relationships/betaTesters"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appBetaTestersLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/apps/{id}/relationships/betaTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BuildsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBuildsGetToManyRelated(id: String, fieldsBuilds: [FieldsBuilds_appsBuildsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BuildsWithoutIncludesResponse {
        return try await appsBuildsGetToManyRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBuildsGetToManyRelated(urlString: String) async throws -> BuildsWithoutIncludesResponse {
        return try await appsBuildsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BuildsWithoutIncludesResponse> 
     */
    open class func appsBuildsGetToManyRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_appsBuildsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BuildsWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildsWithoutIncludesResponse> 
     */
    open class func appsBuildsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildsWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BuildsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsCiProductGetToOneRelated: String, CaseIterable {
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsCiProductGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_appsCiProductGetToOneRelated: String, CaseIterable {
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_appsCiProductGetToOneRelated: String, CaseIterable {
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsCiProductGetToOneRelated: String, CaseIterable {
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CiProductResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsCiProductGetToOneRelated(id: String, fieldsCiProducts: [FieldsCiProducts_appsCiProductGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsCiProductGetToOneRelated]? = nil, fieldsScmRepositories: [FieldsScmRepositories_appsCiProductGetToOneRelated]? = nil, fieldsBundleIds: [FieldsBundleIds_appsCiProductGetToOneRelated]? = nil, limitPrimaryRepositories: Int? = nil, include: [Include_appsCiProductGetToOneRelated]? = nil) async throws -> CiProductResponse {
        return try await appsCiProductGetToOneRelatedWithRequestBuilder(id: id, fieldsCiProducts: fieldsCiProducts, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, fieldsBundleIds: fieldsBundleIds, limitPrimaryRepositories: limitPrimaryRepositories, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiProductResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsCiProductGetToOneRelated(urlString: String) async throws -> CiProductResponse {
        return try await appsCiProductGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/ciProduct
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func appsCiProductGetToOneRelatedWithRequestBuilder(id: String, fieldsCiProducts: [FieldsCiProducts_appsCiProductGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsCiProductGetToOneRelated]? = nil, fieldsScmRepositories: [FieldsScmRepositories_appsCiProductGetToOneRelated]? = nil, fieldsBundleIds: [FieldsBundleIds_appsCiProductGetToOneRelated]? = nil, limitPrimaryRepositories: Int? = nil, include: [Include_appsCiProductGetToOneRelated]? = nil) -> RequestBuilder<CiProductResponse> {
        var localVariablePath = "/v1/apps/{id}/ciProduct"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(), isExplode: false),
            "limit[primaryRepositories]": (wrappedValue: limitPrimaryRepositories?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiProductResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/ciProduct
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func appsCiProductGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CiProductResponse> {
        let localVariableRequestBuilder: RequestBuilder<CiProductResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterTerritory
     */
    public enum FilterTerritory_appsCustomerReviewsGetToManyRelated: String, CaseIterable {
        case abw = "ABW"
        case afg = "AFG"
        case ago = "AGO"
        case aia = "AIA"
        case alb = "ALB"
        case and = "AND"
        case ant = "ANT"
        case are = "ARE"
        case arg = "ARG"
        case arm = "ARM"
        case asm = "ASM"
        case atg = "ATG"
        case aus = "AUS"
        case aut = "AUT"
        case aze = "AZE"
        case bdi = "BDI"
        case bel = "BEL"
        case ben = "BEN"
        case bes = "BES"
        case bfa = "BFA"
        case bgd = "BGD"
        case bgr = "BGR"
        case bhr = "BHR"
        case bhs = "BHS"
        case bih = "BIH"
        case blr = "BLR"
        case blz = "BLZ"
        case bmu = "BMU"
        case bol = "BOL"
        case bra = "BRA"
        case brb = "BRB"
        case brn = "BRN"
        case btn = "BTN"
        case bwa = "BWA"
        case caf = "CAF"
        case can = "CAN"
        case che = "CHE"
        case chl = "CHL"
        case chn = "CHN"
        case civ = "CIV"
        case cmr = "CMR"
        case cod = "COD"
        case cog = "COG"
        case cok = "COK"
        case col = "COL"
        case com = "COM"
        case cpv = "CPV"
        case cri = "CRI"
        case cub = "CUB"
        case cuw = "CUW"
        case cxr = "CXR"
        case cym = "CYM"
        case cyp = "CYP"
        case cze = "CZE"
        case deu = "DEU"
        case dji = "DJI"
        case dma = "DMA"
        case dnk = "DNK"
        case dom = "DOM"
        case dza = "DZA"
        case ecu = "ECU"
        case egy = "EGY"
        case eri = "ERI"
        case esp = "ESP"
        case est = "EST"
        case eth = "ETH"
        case fin = "FIN"
        case fji = "FJI"
        case flk = "FLK"
        case fra = "FRA"
        case fro = "FRO"
        case fsm = "FSM"
        case gab = "GAB"
        case gbr = "GBR"
        case geo = "GEO"
        case ggy = "GGY"
        case gha = "GHA"
        case gib = "GIB"
        case gin = "GIN"
        case glp = "GLP"
        case gmb = "GMB"
        case gnb = "GNB"
        case gnq = "GNQ"
        case grc = "GRC"
        case grd = "GRD"
        case grl = "GRL"
        case gtm = "GTM"
        case guf = "GUF"
        case gum = "GUM"
        case guy = "GUY"
        case hkg = "HKG"
        case hnd = "HND"
        case hrv = "HRV"
        case hti = "HTI"
        case hun = "HUN"
        case idn = "IDN"
        case imn = "IMN"
        case ind = "IND"
        case irl = "IRL"
        case irq = "IRQ"
        case isl = "ISL"
        case isr = "ISR"
        case ita = "ITA"
        case jam = "JAM"
        case jey = "JEY"
        case jor = "JOR"
        case jpn = "JPN"
        case kaz = "KAZ"
        case ken = "KEN"
        case kgz = "KGZ"
        case khm = "KHM"
        case kir = "KIR"
        case kna = "KNA"
        case kor = "KOR"
        case kwt = "KWT"
        case lao = "LAO"
        case lbn = "LBN"
        case lbr = "LBR"
        case lby = "LBY"
        case lca = "LCA"
        case lie = "LIE"
        case lka = "LKA"
        case lso = "LSO"
        case ltu = "LTU"
        case lux = "LUX"
        case lva = "LVA"
        case mac = "MAC"
        case mar = "MAR"
        case mco = "MCO"
        case mda = "MDA"
        case mdg = "MDG"
        case mdv = "MDV"
        case mex = "MEX"
        case mhl = "MHL"
        case mkd = "MKD"
        case mli = "MLI"
        case mlt = "MLT"
        case mmr = "MMR"
        case mne = "MNE"
        case mng = "MNG"
        case mnp = "MNP"
        case moz = "MOZ"
        case mrt = "MRT"
        case msr = "MSR"
        case mtq = "MTQ"
        case mus = "MUS"
        case mwi = "MWI"
        case mys = "MYS"
        case myt = "MYT"
        case nam = "NAM"
        case ncl = "NCL"
        case ner = "NER"
        case nfk = "NFK"
        case nga = "NGA"
        case nic = "NIC"
        case niu = "NIU"
        case nld = "NLD"
        case nor = "NOR"
        case npl = "NPL"
        case nru = "NRU"
        case nzl = "NZL"
        case omn = "OMN"
        case pak = "PAK"
        case pan = "PAN"
        case per = "PER"
        case phl = "PHL"
        case plw = "PLW"
        case png = "PNG"
        case pol = "POL"
        case pri = "PRI"
        case prt = "PRT"
        case pry = "PRY"
        case pse = "PSE"
        case pyf = "PYF"
        case qat = "QAT"
        case reu = "REU"
        case rou = "ROU"
        case rus = "RUS"
        case rwa = "RWA"
        case sau = "SAU"
        case sen = "SEN"
        case sgp = "SGP"
        case shn = "SHN"
        case slb = "SLB"
        case sle = "SLE"
        case slv = "SLV"
        case smr = "SMR"
        case som = "SOM"
        case spm = "SPM"
        case srb = "SRB"
        case ssd = "SSD"
        case stp = "STP"
        case sur = "SUR"
        case svk = "SVK"
        case svn = "SVN"
        case swe = "SWE"
        case swz = "SWZ"
        case sxm = "SXM"
        case syc = "SYC"
        case tca = "TCA"
        case tcd = "TCD"
        case tgo = "TGO"
        case tha = "THA"
        case tjk = "TJK"
        case tkm = "TKM"
        case tls = "TLS"
        case ton = "TON"
        case tto = "TTO"
        case tun = "TUN"
        case tur = "TUR"
        case tuv = "TUV"
        case twn = "TWN"
        case tza = "TZA"
        case uga = "UGA"
        case ukr = "UKR"
        case umi = "UMI"
        case ury = "URY"
        case usa = "USA"
        case uzb = "UZB"
        case vat = "VAT"
        case vct = "VCT"
        case ven = "VEN"
        case vgb = "VGB"
        case vir = "VIR"
        case vnm = "VNM"
        case vut = "VUT"
        case wlf = "WLF"
        case wsm = "WSM"
        case yem = "YEM"
        case zaf = "ZAF"
        case zmb = "ZMB"
        case zwe = "ZWE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsCustomerReviewsGetToManyRelated: String, CaseIterable {
        case createddate = "createdDate"
        case createddate2 = "-createdDate"
        case rating = "rating"
        case rating2 = "-rating"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsCustomerReviewsGetToManyRelated: String, CaseIterable {
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_appsCustomerReviewsGetToManyRelated: String, CaseIterable {
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsCustomerReviewsGetToManyRelated: String, CaseIterable {
        case response = "response"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsCustomerReviewsGetToManyRelated(id: String, filterRating: [String]? = nil, filterTerritory: [FilterTerritory_appsCustomerReviewsGetToManyRelated]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsCustomerReviewsGetToManyRelated]? = nil) async throws -> CustomerReviewsResponse {
        return try await appsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: id, filterRating: filterRating, filterTerritory: filterTerritory, existsPublishedResponse: existsPublishedResponse, sort: sort, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsCustomerReviewsGetToManyRelated(urlString: String) async throws -> CustomerReviewsResponse {
        return try await appsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/customerReviews
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: String, filterRating: [String]? = nil, filterTerritory: [FilterTerritory_appsCustomerReviewsGetToManyRelated]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsCustomerReviewsGetToManyRelated]? = nil) -> RequestBuilder<CustomerReviewsResponse> {
        var localVariablePath = "/v1/apps/{id}/customerReviews"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[rating]": (wrappedValue: filterRating?.encodeToJSON(), isExplode: false),
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "exists[publishedResponse]": (wrappedValue: existsPublishedResponse?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[customerReviews]": (wrappedValue: fieldsCustomerReviews?.encodeToJSON(), isExplode: false),
            "fields[customerReviewResponses]": (wrappedValue: fieldsCustomerReviewResponses?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/customerReviews
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CustomerReviewsResponse> {
        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsEndUserLicenseAgreementGetToOneRelated: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - returns: EndUserLicenseAgreementWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsEndUserLicenseAgreementGetToOneRelated(id: String, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsEndUserLicenseAgreementGetToOneRelated]? = nil) async throws -> EndUserLicenseAgreementWithoutIncludesResponse {
        return try await appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(id: id, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: EndUserLicenseAgreementWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsEndUserLicenseAgreementGetToOneRelated(urlString: String) async throws -> EndUserLicenseAgreementWithoutIncludesResponse {
        return try await appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/endUserLicenseAgreement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - returns: RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse> 
     */
    open class func appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(id: String, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsEndUserLicenseAgreementGetToOneRelated]? = nil) -> RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/endUserLicenseAgreement"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[endUserLicenseAgreements]": (wrappedValue: fieldsEndUserLicenseAgreements?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/endUserLicenseAgreement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse> 
     */
    open class func appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<EndUserLicenseAgreementWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSetReleases
     */
    public enum FieldsGameCenterLeaderboardSetReleases_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboardset = "gameCenterLeaderboardSet"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterAppVersions
     */
    public enum FieldsGameCenterAppVersions_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case compatibilityversions = "compatibilityVersions"
        case enabled = "enabled"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGameCenterDetailGetToOneRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterAppVersions: (query) maximum number of related gameCenterAppVersions returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitAchievementReleases: (query) maximum number of related achievementReleases returned (when they are included) (optional)
     - parameter limitLeaderboardReleases: (query) maximum number of related leaderboardReleases returned (when they are included) (optional)
     - parameter limitLeaderboardSetReleases: (query) maximum number of related leaderboardSetReleases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGameCenterDetailGetToOneRelated(id: String, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_appsGameCenterDetailGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_appsGameCenterDetailGetToOneRelated]? = nil, limitGameCenterAppVersions: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterAchievements: Int? = nil, limitAchievementReleases: Int? = nil, limitLeaderboardReleases: Int? = nil, limitLeaderboardSetReleases: Int? = nil, include: [Include_appsGameCenterDetailGetToOneRelated]? = nil) async throws -> GameCenterDetailResponse {
        return try await appsGameCenterDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardSetReleases: fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterAppVersions: fieldsGameCenterAppVersions, fieldsGameCenterAchievements: fieldsGameCenterAchievements, fieldsApps: fieldsApps, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limitGameCenterAppVersions: limitGameCenterAppVersions, limitGameCenterLeaderboards: limitGameCenterLeaderboards, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitGameCenterAchievements: limitGameCenterAchievements, limitAchievementReleases: limitAchievementReleases, limitLeaderboardReleases: limitLeaderboardReleases, limitLeaderboardSetReleases: limitLeaderboardSetReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGameCenterDetailGetToOneRelated(urlString: String) async throws -> GameCenterDetailResponse {
        return try await appsGameCenterDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/gameCenterDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterAppVersions: (query) maximum number of related gameCenterAppVersions returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitAchievementReleases: (query) maximum number of related achievementReleases returned (when they are included) (optional)
     - parameter limitLeaderboardReleases: (query) maximum number of related leaderboardReleases returned (when they are included) (optional)
     - parameter limitLeaderboardSetReleases: (query) maximum number of related leaderboardSetReleases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterDetailResponse> 
     */
    open class func appsGameCenterDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_appsGameCenterDetailGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appsGameCenterDetailGetToOneRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_appsGameCenterDetailGetToOneRelated]? = nil, limitGameCenterAppVersions: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterAchievements: Int? = nil, limitAchievementReleases: Int? = nil, limitLeaderboardReleases: Int? = nil, limitLeaderboardSetReleases: Int? = nil, include: [Include_appsGameCenterDetailGetToOneRelated]? = nil) -> RequestBuilder<GameCenterDetailResponse> {
        var localVariablePath = "/v1/apps/{id}/gameCenterDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSetReleases]": (wrappedValue: fieldsGameCenterLeaderboardSetReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAppVersions]": (wrappedValue: fieldsGameCenterAppVersions?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit[gameCenterAppVersions]": (wrappedValue: limitGameCenterAppVersions?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboards]": (wrappedValue: limitGameCenterLeaderboards?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[gameCenterAchievements]": (wrappedValue: limitGameCenterAchievements?.encodeToJSON(), isExplode: true),
            "limit[achievementReleases]": (wrappedValue: limitAchievementReleases?.encodeToJSON(), isExplode: true),
            "limit[leaderboardReleases]": (wrappedValue: limitLeaderboardReleases?.encodeToJSON(), isExplode: true),
            "limit[leaderboardSetReleases]": (wrappedValue: limitLeaderboardSetReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/gameCenterDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterDetailResponse> 
     */
    open class func appsGameCenterDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterDetailResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsGameCenterEnabledVersionsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsGameCenterEnabledVersionsGetToManyRelated: String, CaseIterable {
        case versionstring = "versionString"
        case versionstring2 = "-versionString"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGameCenterEnabledVersionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGameCenterEnabledVersionsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGameCenterEnabledVersionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case compatibleversions = "compatibleVersions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterVersionString: (query) filter by attribute &#39;versionString&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterEnabledVersionsResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGameCenterEnabledVersionsGetToManyRelated(id: String, filterPlatform: [FilterPlatform_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, sort: [Sort_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [Include_appsGameCenterEnabledVersionsGetToManyRelated]? = nil) async throws -> GameCenterEnabledVersionsResponse {
        return try await appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(id: id, filterPlatform: filterPlatform, filterVersionString: filterVersionString, filterId: filterId, sort: sort, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsApps: fieldsApps, limit: limit, limitCompatibleVersions: limitCompatibleVersions, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterEnabledVersionsResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGameCenterEnabledVersionsGetToManyRelated(urlString: String) async throws -> GameCenterEnabledVersionsResponse {
        return try await appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/gameCenterEnabledVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterVersionString: (query) filter by attribute &#39;versionString&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterEnabledVersionsResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(id: String, filterPlatform: [FilterPlatform_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, sort: [Sort_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsGameCenterEnabledVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [Include_appsGameCenterEnabledVersionsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterEnabledVersionsResponse> {
        var localVariablePath = "/v1/apps/{id}/gameCenterEnabledVersions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[versionString]": (wrappedValue: filterVersionString?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[gameCenterEnabledVersions]": (wrappedValue: fieldsGameCenterEnabledVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[compatibleVersions]": (wrappedValue: limitCompatibleVersions?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterEnabledVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/gameCenterEnabledVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterEnabledVersionsResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterEnabledVersionsResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterEnabledVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterAppStoreVersionsAppStoreState
     */
    public enum FilterAppStoreVersionsAppStoreState_appsGetCollection: String, CaseIterable {
        case accepted = "ACCEPTED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingContract = "PENDING_CONTRACT"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
        case processingForAppStore = "PROCESSING_FOR_APP_STORE"
        case readyForReview = "READY_FOR_REVIEW"
        case readyForSale = "READY_FOR_SALE"
        case rejected = "REJECTED"
        case removedFromSale = "REMOVED_FROM_SALE"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
        case notApplicable = "NOT_APPLICABLE"
    }

    /**
     * enum for parameter filterAppStoreVersionsAppVersionState
     */
    public enum FilterAppStoreVersionsAppVersionState_appsGetCollection: String, CaseIterable {
        case accepted = "ACCEPTED"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case processingForDistribution = "PROCESSING_FOR_DISTRIBUTION"
        case readyForDistribution = "READY_FOR_DISTRIBUTION"
        case readyForReview = "READY_FOR_REVIEW"
        case rejected = "REJECTED"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
    }

    /**
     * enum for parameter filterAppStoreVersionsPlatform
     */
    public enum FilterAppStoreVersionsPlatform_appsGetCollection: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsGetCollection: String, CaseIterable {
        case bundleid = "bundleId"
        case bundleid2 = "-bundleId"
        case name = "name"
        case name2 = "-name"
        case sku = "sku"
        case sku2 = "-sku"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGetCollection: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGetCollection: String, CaseIterable {
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case builds = "builds"
        case ciproduct = "ciProduct"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case prices = "prices"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsGetCollection: String, CaseIterable {
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_appsGetCollection: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsAppPriceSchedules
     */
    public enum FieldsAppPriceSchedules_appsGetCollection: String, CaseIterable {
        case app = "app"
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsGetCollection: String, CaseIterable {
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionKeys
     */
    public enum FieldsAlternativeDistributionKeys_appsGetCollection: String, CaseIterable {
        case app = "app"
        case publickey = "publicKey"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case lastupdatedbyactor = "lastUpdatedByActor"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submittedbyactor = "submittedByActor"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsGetCollection: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsGetCollection: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsAppAvailabilities
     */
    public enum FieldsAppAvailabilities_appsGetCollection: String, CaseIterable {
        case app = "app"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsGetCollection: String, CaseIterable {
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsGetCollection: String, CaseIterable {
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsGetCollection: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsMarketplaceSearchDetails
     */
    public enum FieldsMarketplaceSearchDetails_appsGetCollection: String, CaseIterable {
        case app = "app"
        case catalogurl = "catalogUrl"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsGetCollection: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case brazilageratingv2 = "brazilAgeRatingV2"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
        case state = "state"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsGetCollection: String, CaseIterable {
        case app = "app"
        case description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsGetCollection: String, CaseIterable {
        case app = "app"
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case apps = "apps"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case referencename = "referenceName"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsGetCollection: String, CaseIterable {
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsGetCollection: String, CaseIterable {
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsAnalyticsReportRequests
     */
    public enum FieldsAnalyticsReportRequests_appsGetCollection: String, CaseIterable {
        case accesstype = "accessType"
        case app = "app"
        case reports = "reports"
        case stoppedduetoinactivity = "stoppedDueToInactivity"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsGetCollection: String, CaseIterable {
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case enddate = "endDate"
        case latestcontrolversion = "latestControlVersion"
        case name = "name"
        case platform = "platform"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGetCollection: String, CaseIterable {
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsGetCollection: String, CaseIterable {
        case duration = "duration"
        case optin = "optIn"
        case renewaltype = "renewalType"
        case sandboxoptin = "sandboxOptIn"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsGetCollection: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsGetCollection: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_appsGetCollection: String, CaseIterable {
        case app = "app"
        case appdescription = "appDescription"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case createddate = "createdDate"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsGetCollection: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_appsGetCollection: String, CaseIterable {
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter filterAppStoreVersionsAppStoreState: (query) filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     - parameter filterAppStoreVersionsAppVersionState: (query) filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)
     - parameter filterAppStoreVersionsPlatform: (query) filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     - parameter filterBundleId: (query) filter by attribute &#39;bundleId&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterSku: (query) filter by attribute &#39;sku&#39; (optional)
     - parameter filterAppStoreVersions: (query) filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter existsGameCenterEnabledVersions: (query) filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - returns: AppsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGetCollection(filterAppStoreVersionsAppStoreState: [FilterAppStoreVersionsAppStoreState_appsGetCollection]? = nil, filterAppStoreVersionsAppVersionState: [FilterAppStoreVersionsAppVersionState_appsGetCollection]? = nil, filterAppStoreVersionsPlatform: [FilterAppStoreVersionsPlatform_appsGetCollection]? = nil, filterBundleId: [String]? = nil, filterName: [String]? = nil, filterSku: [String]? = nil, filterAppStoreVersions: [String]? = nil, filterId: [String]? = nil, existsGameCenterEnabledVersions: Bool? = nil, sort: [Sort_appsGetCollection]? = nil, fieldsApps: [FieldsApps_appsGetCollection]? = nil, limit: Int? = nil, include: [Include_appsGetCollection]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsGetCollection]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGetCollection]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsGetCollection]? = nil, fieldsCiProducts: [FieldsCiProducts_appsGetCollection]? = nil, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsGetCollection]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsGetCollection]? = nil, fieldsBetaGroups: [FieldsBetaGroups_appsGetCollection]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsGetCollection]? = nil, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsGetCollection]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsGetCollection]? = nil, fieldsAppEvents: [FieldsAppEvents_appsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_appsGetCollection]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsGetCollection]? = nil, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsGetCollection]? = nil, fieldsAppClips: [FieldsAppClips_appsGetCollection]? = nil, fieldsAppInfos: [FieldsAppInfos_appsGetCollection]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsGetCollection]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsGetCollection]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsGetCollection]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsGetCollection]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsGetCollection]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsGetCollection]? = nil, fieldsAppPrices: [FieldsAppPrices_appsGetCollection]? = nil, fieldsAppPreOrders: [FieldsAppPreOrders_appsGetCollection]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsGetCollection]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGetCollection]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsGetCollection]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsGetCollection]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsGetCollection]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsGetCollection]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsGetCollection]? = nil, fieldsTerritories: [FieldsTerritories_appsGetCollection]? = nil, fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics_appsGetCollection]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEncryptionDeclarations: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) async throws -> AppsResponse {
        return try await appsGetCollectionWithRequestBuilder(filterAppStoreVersionsAppStoreState: filterAppStoreVersionsAppStoreState, filterAppStoreVersionsAppVersionState: filterAppStoreVersionsAppVersionState, filterAppStoreVersionsPlatform: filterAppStoreVersionsPlatform, filterBundleId: filterBundleId, filterName: filterName, filterSku: filterSku, filterAppStoreVersions: filterAppStoreVersions, filterId: filterId, existsGameCenterEnabledVersions: existsGameCenterEnabledVersions, sort: sort, fieldsApps: fieldsApps, limit: limit, include: include, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsAppPriceSchedules: fieldsAppPriceSchedules, fieldsCiProducts: fieldsCiProducts, fieldsAlternativeDistributionKeys: fieldsAlternativeDistributionKeys, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsBetaGroups: fieldsBetaGroups, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsAppAvailabilities: fieldsAppAvailabilities, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppEvents: fieldsAppEvents, fieldsBuilds: fieldsBuilds, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsMarketplaceSearchDetails: fieldsMarketplaceSearchDetails, fieldsAppClips: fieldsAppClips, fieldsAppInfos: fieldsAppInfos, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsAppPricePoints: fieldsAppPricePoints, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsAnalyticsReportRequests: fieldsAnalyticsReportRequests, fieldsAppPrices: fieldsAppPrices, fieldsAppPreOrders: fieldsAppPreOrders, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsTerritories: fieldsTerritories, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitAppClips: limitAppClips, limitAppCustomProductPages: limitAppCustomProductPages, limitAppEncryptionDeclarations: limitAppEncryptionDeclarations, limitAppEvents: limitAppEvents, limitAppInfos: limitAppInfos, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2, limitAppStoreVersions: limitAppStoreVersions, limitAvailableTerritories: limitAvailableTerritories, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitInAppPurchases: limitInAppPurchases, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPreReleaseVersions: limitPreReleaseVersions, limitPrices: limitPrices, limitPromotedPurchases: limitPromotedPurchases, limitReviewSubmissions: limitReviewSubmissions, limitSubscriptionGroups: limitSubscriptionGroups).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGetCollection(urlString: String) async throws -> AppsResponse {
        return try await appsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterAppStoreVersionsAppStoreState: (query) filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     - parameter filterAppStoreVersionsAppVersionState: (query) filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)
     - parameter filterAppStoreVersionsPlatform: (query) filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     - parameter filterBundleId: (query) filter by attribute &#39;bundleId&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterSku: (query) filter by attribute &#39;sku&#39; (optional)
     - parameter filterAppStoreVersions: (query) filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter existsGameCenterEnabledVersions: (query) filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - returns: RequestBuilder<AppsResponse> 
     */
    open class func appsGetCollectionWithRequestBuilder(filterAppStoreVersionsAppStoreState: [FilterAppStoreVersionsAppStoreState_appsGetCollection]? = nil, filterAppStoreVersionsAppVersionState: [FilterAppStoreVersionsAppVersionState_appsGetCollection]? = nil, filterAppStoreVersionsPlatform: [FilterAppStoreVersionsPlatform_appsGetCollection]? = nil, filterBundleId: [String]? = nil, filterName: [String]? = nil, filterSku: [String]? = nil, filterAppStoreVersions: [String]? = nil, filterId: [String]? = nil, existsGameCenterEnabledVersions: Bool? = nil, sort: [Sort_appsGetCollection]? = nil, fieldsApps: [FieldsApps_appsGetCollection]? = nil, limit: Int? = nil, include: [Include_appsGetCollection]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsGetCollection]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGetCollection]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsGetCollection]? = nil, fieldsCiProducts: [FieldsCiProducts_appsGetCollection]? = nil, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsGetCollection]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsGetCollection]? = nil, fieldsBetaGroups: [FieldsBetaGroups_appsGetCollection]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsGetCollection]? = nil, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsGetCollection]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsGetCollection]? = nil, fieldsAppEvents: [FieldsAppEvents_appsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_appsGetCollection]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsGetCollection]? = nil, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsGetCollection]? = nil, fieldsAppClips: [FieldsAppClips_appsGetCollection]? = nil, fieldsAppInfos: [FieldsAppInfos_appsGetCollection]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsGetCollection]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsGetCollection]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsGetCollection]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsGetCollection]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsGetCollection]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsGetCollection]? = nil, fieldsAppPrices: [FieldsAppPrices_appsGetCollection]? = nil, fieldsAppPreOrders: [FieldsAppPreOrders_appsGetCollection]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsGetCollection]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGetCollection]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsGetCollection]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsGetCollection]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsGetCollection]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsGetCollection]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsGetCollection]? = nil, fieldsTerritories: [FieldsTerritories_appsGetCollection]? = nil, fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics_appsGetCollection]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEncryptionDeclarations: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) -> RequestBuilder<AppsResponse> {
        let localVariablePath = "/v1/apps"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[appStoreVersions.appStoreState]": (wrappedValue: filterAppStoreVersionsAppStoreState?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersions.appVersionState]": (wrappedValue: filterAppStoreVersionsAppVersionState?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersions.platform]": (wrappedValue: filterAppStoreVersionsPlatform?.encodeToJSON(), isExplode: false),
            "filter[bundleId]": (wrappedValue: filterBundleId?.encodeToJSON(), isExplode: false),
            "filter[name]": (wrappedValue: filterName?.encodeToJSON(), isExplode: false),
            "filter[sku]": (wrappedValue: filterSku?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersions]": (wrappedValue: filterAppStoreVersions?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "exists[gameCenterEnabledVersions]": (wrappedValue: existsGameCenterEnabledVersions?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewDetails]": (wrappedValue: fieldsBetaAppReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[appPriceSchedules]": (wrappedValue: fieldsAppPriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionKeys]": (wrappedValue: fieldsAlternativeDistributionKeys?.encodeToJSON(), isExplode: false),
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[appAvailabilities]": (wrappedValue: fieldsAppAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[customerReviews]": (wrappedValue: fieldsCustomerReviews?.encodeToJSON(), isExplode: false),
            "fields[appEvents]": (wrappedValue: fieldsAppEvents?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaLicenseAgreements]": (wrappedValue: fieldsBetaLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[marketplaceSearchDetails]": (wrappedValue: fieldsMarketplaceSearchDetails?.encodeToJSON(), isExplode: false),
            "fields[appClips]": (wrappedValue: fieldsAppClips?.encodeToJSON(), isExplode: false),
            "fields[appInfos]": (wrappedValue: fieldsAppInfos?.encodeToJSON(), isExplode: false),
            "fields[betaAppLocalizations]": (wrappedValue: fieldsBetaAppLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appPricePoints]": (wrappedValue: fieldsAppPricePoints?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGroups]": (wrappedValue: fieldsSubscriptionGroups?.encodeToJSON(), isExplode: false),
            "fields[analyticsReportRequests]": (wrappedValue: fieldsAnalyticsReportRequests?.encodeToJSON(), isExplode: false),
            "fields[appPrices]": (wrappedValue: fieldsAppPrices?.encodeToJSON(), isExplode: false),
            "fields[appPreOrders]": (wrappedValue: fieldsAppPreOrders?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[gameCenterEnabledVersions]": (wrappedValue: fieldsGameCenterEnabledVersions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGracePeriods]": (wrappedValue: fieldsSubscriptionGracePeriods?.encodeToJSON(), isExplode: false),
            "fields[endUserLicenseAgreements]": (wrappedValue: fieldsEndUserLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPages]": (wrappedValue: fieldsAppCustomProductPages?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "fields[perfPowerMetrics]": (wrappedValue: fieldsPerfPowerMetrics?.encodeToJSON(), isExplode: false),
            "limit[appClips]": (wrappedValue: limitAppClips?.encodeToJSON(), isExplode: true),
            "limit[appCustomProductPages]": (wrappedValue: limitAppCustomProductPages?.encodeToJSON(), isExplode: true),
            "limit[appEncryptionDeclarations]": (wrappedValue: limitAppEncryptionDeclarations?.encodeToJSON(), isExplode: true),
            "limit[appEvents]": (wrappedValue: limitAppEvents?.encodeToJSON(), isExplode: true),
            "limit[appInfos]": (wrappedValue: limitAppInfos?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersions]": (wrappedValue: limitAppStoreVersions?.encodeToJSON(), isExplode: true),
            "limit[availableTerritories]": (wrappedValue: limitAvailableTerritories?.encodeToJSON(), isExplode: true),
            "limit[betaAppLocalizations]": (wrappedValue: limitBetaAppLocalizations?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
            "limit[gameCenterEnabledVersions]": (wrappedValue: limitGameCenterEnabledVersions?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchases]": (wrappedValue: limitInAppPurchases?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchasesV2]": (wrappedValue: limitInAppPurchasesV2?.encodeToJSON(), isExplode: true),
            "limit[preReleaseVersions]": (wrappedValue: limitPreReleaseVersions?.encodeToJSON(), isExplode: true),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
            "limit[promotedPurchases]": (wrappedValue: limitPromotedPurchases?.encodeToJSON(), isExplode: true),
            "limit[reviewSubmissions]": (wrappedValue: limitReviewSubmissions?.encodeToJSON(), isExplode: true),
            "limit[subscriptionGroups]": (wrappedValue: limitSubscriptionGroups?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppsResponse> 
     */
    open class func appsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<AppsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGetInstance: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGetInstance: String, CaseIterable {
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case builds = "builds"
        case ciproduct = "ciProduct"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case prices = "prices"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsGetInstance: String, CaseIterable {
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_appsGetInstance: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsAppPriceSchedules
     */
    public enum FieldsAppPriceSchedules_appsGetInstance: String, CaseIterable {
        case app = "app"
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsGetInstance: String, CaseIterable {
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionKeys
     */
    public enum FieldsAlternativeDistributionKeys_appsGetInstance: String, CaseIterable {
        case app = "app"
        case publickey = "publicKey"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case lastupdatedbyactor = "lastUpdatedByActor"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submittedbyactor = "submittedByActor"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsGetInstance: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsGetInstance: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsAppAvailabilities
     */
    public enum FieldsAppAvailabilities_appsGetInstance: String, CaseIterable {
        case app = "app"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsGetInstance: String, CaseIterable {
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsGetInstance: String, CaseIterable {
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsGetInstance: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsMarketplaceSearchDetails
     */
    public enum FieldsMarketplaceSearchDetails_appsGetInstance: String, CaseIterable {
        case app = "app"
        case catalogurl = "catalogUrl"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsGetInstance: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case brazilageratingv2 = "brazilAgeRatingV2"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
        case state = "state"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsGetInstance: String, CaseIterable {
        case app = "app"
        case description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsGetInstance: String, CaseIterable {
        case app = "app"
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case apps = "apps"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case referencename = "referenceName"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsGetInstance: String, CaseIterable {
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsGetInstance: String, CaseIterable {
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsAnalyticsReportRequests
     */
    public enum FieldsAnalyticsReportRequests_appsGetInstance: String, CaseIterable {
        case accesstype = "accessType"
        case app = "app"
        case reports = "reports"
        case stoppedduetoinactivity = "stoppedDueToInactivity"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsGetInstance: String, CaseIterable {
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case enddate = "endDate"
        case latestcontrolversion = "latestControlVersion"
        case name = "name"
        case platform = "platform"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGetInstance: String, CaseIterable {
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsGetInstance: String, CaseIterable {
        case duration = "duration"
        case optin = "optIn"
        case renewaltype = "renewalType"
        case sandboxoptin = "sandboxOptIn"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsGetInstance: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsGetInstance: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_appsGetInstance: String, CaseIterable {
        case app = "app"
        case appdescription = "appDescription"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case createddate = "createdDate"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsGetInstance: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_appsGetInstance: String, CaseIterable {
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGetInstance(id: String, fieldsApps: [FieldsApps_appsGetInstance]? = nil, include: [Include_appsGetInstance]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsGetInstance]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGetInstance]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsGetInstance]? = nil, fieldsCiProducts: [FieldsCiProducts_appsGetInstance]? = nil, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsGetInstance]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsGetInstance]? = nil, fieldsBetaGroups: [FieldsBetaGroups_appsGetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsGetInstance]? = nil, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsGetInstance]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsGetInstance]? = nil, fieldsAppEvents: [FieldsAppEvents_appsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appsGetInstance]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsGetInstance]? = nil, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsGetInstance]? = nil, fieldsAppClips: [FieldsAppClips_appsGetInstance]? = nil, fieldsAppInfos: [FieldsAppInfos_appsGetInstance]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsGetInstance]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsGetInstance]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsGetInstance]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsGetInstance]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsGetInstance]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsGetInstance]? = nil, fieldsAppPrices: [FieldsAppPrices_appsGetInstance]? = nil, fieldsAppPreOrders: [FieldsAppPreOrders_appsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsGetInstance]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGetInstance]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsGetInstance]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsGetInstance]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsGetInstance]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsGetInstance]? = nil, fieldsTerritories: [FieldsTerritories_appsGetInstance]? = nil, fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics_appsGetInstance]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEncryptionDeclarations: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) async throws -> AppResponse {
        return try await appsGetInstanceWithRequestBuilder(id: id, fieldsApps: fieldsApps, include: include, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsAppPriceSchedules: fieldsAppPriceSchedules, fieldsCiProducts: fieldsCiProducts, fieldsAlternativeDistributionKeys: fieldsAlternativeDistributionKeys, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsBetaGroups: fieldsBetaGroups, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsAppAvailabilities: fieldsAppAvailabilities, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppEvents: fieldsAppEvents, fieldsBuilds: fieldsBuilds, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsMarketplaceSearchDetails: fieldsMarketplaceSearchDetails, fieldsAppClips: fieldsAppClips, fieldsAppInfos: fieldsAppInfos, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsAppPricePoints: fieldsAppPricePoints, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsAnalyticsReportRequests: fieldsAnalyticsReportRequests, fieldsAppPrices: fieldsAppPrices, fieldsAppPreOrders: fieldsAppPreOrders, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsTerritories: fieldsTerritories, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitAppClips: limitAppClips, limitAppCustomProductPages: limitAppCustomProductPages, limitAppEncryptionDeclarations: limitAppEncryptionDeclarations, limitAppEvents: limitAppEvents, limitAppInfos: limitAppInfos, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2, limitAppStoreVersions: limitAppStoreVersions, limitAvailableTerritories: limitAvailableTerritories, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitInAppPurchases: limitInAppPurchases, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPreReleaseVersions: limitPreReleaseVersions, limitPrices: limitPrices, limitPromotedPurchases: limitPromotedPurchases, limitReviewSubmissions: limitReviewSubmissions, limitSubscriptionGroups: limitSubscriptionGroups).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsGetInstance(urlString: String) async throws -> AppResponse {
        return try await appsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppPriceSchedules: (query) the fields to include for returned resources of type appPriceSchedules (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsAlternativeDistributionKeys: (query) the fields to include for returned resources of type alternativeDistributionKeys (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppAvailabilities: (query) the fields to include for returned resources of type appAvailabilities (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAnalyticsReportRequests: (query) the fields to include for returned resources of type analyticsReportRequests (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsGetInstanceWithRequestBuilder(id: String, fieldsApps: [FieldsApps_appsGetInstance]? = nil, include: [Include_appsGetInstance]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_appsGetInstance]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_appsGetInstance]? = nil, fieldsAppPriceSchedules: [FieldsAppPriceSchedules_appsGetInstance]? = nil, fieldsCiProducts: [FieldsCiProducts_appsGetInstance]? = nil, fieldsAlternativeDistributionKeys: [FieldsAlternativeDistributionKeys_appsGetInstance]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsGetInstance]? = nil, fieldsBetaGroups: [FieldsBetaGroups_appsGetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsGetInstance]? = nil, fieldsAppAvailabilities: [FieldsAppAvailabilities_appsGetInstance]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appsGetInstance]? = nil, fieldsAppEvents: [FieldsAppEvents_appsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appsGetInstance]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_appsGetInstance]? = nil, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsGetInstance]? = nil, fieldsAppClips: [FieldsAppClips_appsGetInstance]? = nil, fieldsAppInfos: [FieldsAppInfos_appsGetInstance]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_appsGetInstance]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsGetInstance]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsGetInstance]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsGetInstance]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsGetInstance]? = nil, fieldsAnalyticsReportRequests: [FieldsAnalyticsReportRequests_appsGetInstance]? = nil, fieldsAppPrices: [FieldsAppPrices_appsGetInstance]? = nil, fieldsAppPreOrders: [FieldsAppPreOrders_appsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appsGetInstance]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_appsGetInstance]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsGetInstance]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_appsGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsGetInstance]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_appsGetInstance]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_appsGetInstance]? = nil, fieldsTerritories: [FieldsTerritories_appsGetInstance]? = nil, fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics_appsGetInstance]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEncryptionDeclarations: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) -> RequestBuilder<AppResponse> {
        var localVariablePath = "/v1/apps/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewDetails]": (wrappedValue: fieldsBetaAppReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[appPriceSchedules]": (wrappedValue: fieldsAppPriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionKeys]": (wrappedValue: fieldsAlternativeDistributionKeys?.encodeToJSON(), isExplode: false),
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[appAvailabilities]": (wrappedValue: fieldsAppAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[customerReviews]": (wrappedValue: fieldsCustomerReviews?.encodeToJSON(), isExplode: false),
            "fields[appEvents]": (wrappedValue: fieldsAppEvents?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaLicenseAgreements]": (wrappedValue: fieldsBetaLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[marketplaceSearchDetails]": (wrappedValue: fieldsMarketplaceSearchDetails?.encodeToJSON(), isExplode: false),
            "fields[appClips]": (wrappedValue: fieldsAppClips?.encodeToJSON(), isExplode: false),
            "fields[appInfos]": (wrappedValue: fieldsAppInfos?.encodeToJSON(), isExplode: false),
            "fields[betaAppLocalizations]": (wrappedValue: fieldsBetaAppLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appPricePoints]": (wrappedValue: fieldsAppPricePoints?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGroups]": (wrappedValue: fieldsSubscriptionGroups?.encodeToJSON(), isExplode: false),
            "fields[analyticsReportRequests]": (wrappedValue: fieldsAnalyticsReportRequests?.encodeToJSON(), isExplode: false),
            "fields[appPrices]": (wrappedValue: fieldsAppPrices?.encodeToJSON(), isExplode: false),
            "fields[appPreOrders]": (wrappedValue: fieldsAppPreOrders?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[gameCenterEnabledVersions]": (wrappedValue: fieldsGameCenterEnabledVersions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGracePeriods]": (wrappedValue: fieldsSubscriptionGracePeriods?.encodeToJSON(), isExplode: false),
            "fields[endUserLicenseAgreements]": (wrappedValue: fieldsEndUserLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPages]": (wrappedValue: fieldsAppCustomProductPages?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "fields[perfPowerMetrics]": (wrappedValue: fieldsPerfPowerMetrics?.encodeToJSON(), isExplode: false),
            "limit[appClips]": (wrappedValue: limitAppClips?.encodeToJSON(), isExplode: true),
            "limit[appCustomProductPages]": (wrappedValue: limitAppCustomProductPages?.encodeToJSON(), isExplode: true),
            "limit[appEncryptionDeclarations]": (wrappedValue: limitAppEncryptionDeclarations?.encodeToJSON(), isExplode: true),
            "limit[appEvents]": (wrappedValue: limitAppEvents?.encodeToJSON(), isExplode: true),
            "limit[appInfos]": (wrappedValue: limitAppInfos?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersions]": (wrappedValue: limitAppStoreVersions?.encodeToJSON(), isExplode: true),
            "limit[availableTerritories]": (wrappedValue: limitAvailableTerritories?.encodeToJSON(), isExplode: true),
            "limit[betaAppLocalizations]": (wrappedValue: limitBetaAppLocalizations?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
            "limit[gameCenterEnabledVersions]": (wrappedValue: limitGameCenterEnabledVersions?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchases]": (wrappedValue: limitInAppPurchases?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchasesV2]": (wrappedValue: limitInAppPurchasesV2?.encodeToJSON(), isExplode: true),
            "limit[preReleaseVersions]": (wrappedValue: limitPreReleaseVersions?.encodeToJSON(), isExplode: true),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
            "limit[promotedPurchases]": (wrappedValue: limitPromotedPurchases?.encodeToJSON(), isExplode: true),
            "limit[reviewSubmissions]": (wrappedValue: limitReviewSubmissions?.encodeToJSON(), isExplode: true),
            "limit[subscriptionGroups]": (wrappedValue: limitSubscriptionGroups?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterInAppPurchaseType
     */
    public enum FilterInAppPurchaseType_appsInAppPurchasesGetToManyRelated: String, CaseIterable {
        case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
        case nonConsumable = "NON_CONSUMABLE"
        case consumable = "CONSUMABLE"
        case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
        case freeSubscription = "FREE_SUBSCRIPTION"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsInAppPurchasesGetToManyRelated: String, CaseIterable {
        case inapppurchasetype = "inAppPurchaseType"
        case inapppurchasetype2 = "-inAppPurchaseType"
        case productid = "productId"
        case productid2 = "-productId"
        case referencename = "referenceName"
        case referencename2 = "-referenceName"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsInAppPurchasesGetToManyRelated: String, CaseIterable {
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsInAppPurchasesGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsInAppPurchasesGetToManyRelated: String, CaseIterable {
        case apps = "apps"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#39;inAppPurchaseType&#39; (optional)
     - parameter filterCanBeSubmitted: (query) filter by canBeSubmitted (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: InAppPurchasesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsInAppPurchasesGetToManyRelated(id: String, filterInAppPurchaseType: [FilterInAppPurchaseType_appsInAppPurchasesGetToManyRelated]? = nil, filterCanBeSubmitted: [String]? = nil, sort: [Sort_appsInAppPurchasesGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsInAppPurchasesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsInAppPurchasesGetToManyRelated]? = nil, limit: Int? = nil, limitApps: Int? = nil, include: [Include_appsInAppPurchasesGetToManyRelated]? = nil) async throws -> InAppPurchasesResponse {
        return try await appsInAppPurchasesGetToManyRelatedWithRequestBuilder(id: id, filterInAppPurchaseType: filterInAppPurchaseType, filterCanBeSubmitted: filterCanBeSubmitted, sort: sort, fieldsInAppPurchases: fieldsInAppPurchases, fieldsApps: fieldsApps, limit: limit, limitApps: limitApps, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: InAppPurchasesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsInAppPurchasesGetToManyRelated(urlString: String) async throws -> InAppPurchasesResponse {
        return try await appsInAppPurchasesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/inAppPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#39;inAppPurchaseType&#39; (optional)
     - parameter filterCanBeSubmitted: (query) filter by canBeSubmitted (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchasesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsInAppPurchasesGetToManyRelatedWithRequestBuilder(id: String, filterInAppPurchaseType: [FilterInAppPurchaseType_appsInAppPurchasesGetToManyRelated]? = nil, filterCanBeSubmitted: [String]? = nil, sort: [Sort_appsInAppPurchasesGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsInAppPurchasesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsInAppPurchasesGetToManyRelated]? = nil, limit: Int? = nil, limitApps: Int? = nil, include: [Include_appsInAppPurchasesGetToManyRelated]? = nil) -> RequestBuilder<InAppPurchasesResponse> {
        var localVariablePath = "/v1/apps/{id}/inAppPurchases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[inAppPurchaseType]": (wrappedValue: filterInAppPurchaseType?.encodeToJSON(), isExplode: false),
            "filter[canBeSubmitted]": (wrappedValue: filterCanBeSubmitted?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[apps]": (wrappedValue: limitApps?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/inAppPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<InAppPurchasesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsInAppPurchasesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<InAppPurchasesResponse> {
        let localVariableRequestBuilder: RequestBuilder<InAppPurchasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterInAppPurchaseType
     */
    public enum FilterInAppPurchaseType_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case consumable = "CONSUMABLE"
        case nonConsumable = "NON_CONSUMABLE"
        case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case missingMetadata = "MISSING_METADATA"
        case waitingForUpload = "WAITING_FOR_UPLOAD"
        case processingContent = "PROCESSING_CONTENT"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
        case approved = "APPROVED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case removedFromSale = "REMOVED_FROM_SALE"
        case rejected = "REJECTED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case inapppurchasetype = "inAppPurchaseType"
        case inapppurchasetype2 = "-inAppPurchaseType"
        case name = "name"
        case name2 = "-name"
    }

    /**
     * enum for parameter fieldsInAppPurchaseAppStoreReviewScreenshots
     */
    public enum FieldsInAppPurchaseAppStoreReviewScreenshots_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case inapppurchasev2 = "inAppPurchaseV2"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsInAppPurchaseAvailabilities
     */
    public enum FieldsInAppPurchaseAvailabilities_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case inapppurchase = "inAppPurchase"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsInAppPurchaseLocalizations
     */
    public enum FieldsInAppPurchaseLocalizations_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case description = "description"
        case inapppurchasev2 = "inAppPurchaseV2"
        case locale = "locale"
        case name = "name"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchasePriceSchedules
     */
    public enum FieldsInAppPurchasePriceSchedules_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsInAppPurchaseContents
     */
    public enum FieldsInAppPurchaseContents_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case filename = "fileName"
        case filesize = "fileSize"
        case inapppurchasev2 = "inAppPurchaseV2"
        case lastmodifieddate = "lastModifiedDate"
        case url = "url"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsInAppPurchasesV2GetToManyRelated: String, CaseIterable {
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case promotedpurchase = "promotedPurchase"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#39;inAppPurchaseType&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterProductId: (query) filter by attribute &#39;productId&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: InAppPurchasesV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsInAppPurchasesV2GetToManyRelated(id: String, filterInAppPurchaseType: [FilterInAppPurchaseType_appsInAppPurchasesV2GetToManyRelated]? = nil, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [FilterState_appsInAppPurchasesV2GetToManyRelated]? = nil, sort: [Sort_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_appsInAppPurchasesV2GetToManyRelated]? = nil, limit: Int? = nil, limitInAppPurchaseLocalizations: Int? = nil, include: [Include_appsInAppPurchasesV2GetToManyRelated]? = nil) async throws -> InAppPurchasesV2Response {
        return try await appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(id: id, filterInAppPurchaseType: filterInAppPurchaseType, filterName: filterName, filterProductId: filterProductId, filterState: filterState, sort: sort, fieldsInAppPurchaseAppStoreReviewScreenshots: fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchaseAvailabilities: fieldsInAppPurchaseAvailabilities, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsInAppPurchaseLocalizations: fieldsInAppPurchaseLocalizations, fieldsInAppPurchases: fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules: fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents: fieldsInAppPurchaseContents, limit: limit, limitInAppPurchaseLocalizations: limitInAppPurchaseLocalizations, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: InAppPurchasesV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsInAppPurchasesV2GetToManyRelated(urlString: String) async throws -> InAppPurchasesV2Response {
        return try await appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/inAppPurchasesV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#39;inAppPurchaseType&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterProductId: (query) filter by attribute &#39;productId&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchasesV2Response> 
     */
    open class func appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(id: String, filterInAppPurchaseType: [FilterInAppPurchaseType_appsInAppPurchasesV2GetToManyRelated]? = nil, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [FilterState_appsInAppPurchasesV2GetToManyRelated]? = nil, sort: [Sort_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_appsInAppPurchasesV2GetToManyRelated]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_appsInAppPurchasesV2GetToManyRelated]? = nil, limit: Int? = nil, limitInAppPurchaseLocalizations: Int? = nil, include: [Include_appsInAppPurchasesV2GetToManyRelated]? = nil) -> RequestBuilder<InAppPurchasesV2Response> {
        var localVariablePath = "/v1/apps/{id}/inAppPurchasesV2"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[inAppPurchaseType]": (wrappedValue: filterInAppPurchaseType?.encodeToJSON(), isExplode: false),
            "filter[name]": (wrappedValue: filterName?.encodeToJSON(), isExplode: false),
            "filter[productId]": (wrappedValue: filterProductId?.encodeToJSON(), isExplode: false),
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseAppStoreReviewScreenshots]": (wrappedValue: fieldsInAppPurchaseAppStoreReviewScreenshots?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseAvailabilities]": (wrappedValue: fieldsInAppPurchaseAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseLocalizations]": (wrappedValue: fieldsInAppPurchaseLocalizations?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchasePriceSchedules]": (wrappedValue: fieldsInAppPurchasePriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseContents]": (wrappedValue: fieldsInAppPurchaseContents?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchaseLocalizations]": (wrappedValue: limitInAppPurchaseLocalizations?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasesV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/inAppPurchasesV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<InAppPurchasesV2Response> 
     */
    open class func appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<InAppPurchasesV2Response> {
        let localVariableRequestBuilder: RequestBuilder<InAppPurchasesV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsMarketplaceSearchDetails
     */
    public enum FieldsMarketplaceSearchDetails_appsMarketplaceSearchDetailGetToOneRelated: String, CaseIterable {
        case app = "app"
        case catalogurl = "catalogUrl"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - returns: MarketplaceSearchDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsMarketplaceSearchDetailGetToOneRelated(id: String, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsMarketplaceSearchDetailGetToOneRelated]? = nil) async throws -> MarketplaceSearchDetailResponse {
        return try await appsMarketplaceSearchDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsMarketplaceSearchDetails: fieldsMarketplaceSearchDetails).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: MarketplaceSearchDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsMarketplaceSearchDetailGetToOneRelated(urlString: String) async throws -> MarketplaceSearchDetailResponse {
        return try await appsMarketplaceSearchDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/marketplaceSearchDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsMarketplaceSearchDetails: (query) the fields to include for returned resources of type marketplaceSearchDetails (optional)
     - returns: RequestBuilder<MarketplaceSearchDetailResponse> 
     */
    open class func appsMarketplaceSearchDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsMarketplaceSearchDetails: [FieldsMarketplaceSearchDetails_appsMarketplaceSearchDetailGetToOneRelated]? = nil) -> RequestBuilder<MarketplaceSearchDetailResponse> {
        var localVariablePath = "/v1/apps/{id}/marketplaceSearchDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[marketplaceSearchDetails]": (wrappedValue: fieldsMarketplaceSearchDetails?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MarketplaceSearchDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/marketplaceSearchDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<MarketplaceSearchDetailResponse> 
     */
    open class func appsMarketplaceSearchDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<MarketplaceSearchDetailResponse> {
        let localVariableRequestBuilder: RequestBuilder<MarketplaceSearchDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterMetricType
     */
    public enum FilterMetricType_appsPerfPowerMetricsGetToManyRelated: String, CaseIterable {
        case disk = "DISK"
        case hang = "HANG"
        case battery = "BATTERY"
        case launch = "LAUNCH"
        case memory = "MEMORY"
        case animation = "ANIMATION"
        case termination = "TERMINATION"
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsPerfPowerMetricsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#39;deviceType&#39; (optional)
     - parameter filterMetricType: (query) filter by attribute &#39;metricType&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - returns: XcodeMetrics
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPerfPowerMetricsGetToManyRelated(id: String, filterDeviceType: [String]? = nil, filterMetricType: [FilterMetricType_appsPerfPowerMetricsGetToManyRelated]? = nil, filterPlatform: [FilterPlatform_appsPerfPowerMetricsGetToManyRelated]? = nil) async throws -> XcodeMetrics {
        return try await appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(id: id, filterDeviceType: filterDeviceType, filterMetricType: filterMetricType, filterPlatform: filterPlatform).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: XcodeMetrics
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPerfPowerMetricsGetToManyRelated(urlString: String) async throws -> XcodeMetrics {
        return try await appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/perfPowerMetrics
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#39;deviceType&#39; (optional)
     - parameter filterMetricType: (query) filter by attribute &#39;metricType&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(id: String, filterDeviceType: [String]? = nil, filterMetricType: [FilterMetricType_appsPerfPowerMetricsGetToManyRelated]? = nil, filterPlatform: [FilterPlatform_appsPerfPowerMetricsGetToManyRelated]? = nil) -> RequestBuilder<XcodeMetrics> {
        var localVariablePath = "/v1/apps/{id}/perfPowerMetrics"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[deviceType]": (wrappedValue: filterDeviceType?.encodeToJSON(), isExplode: false),
            "filter[metricType]": (wrappedValue: filterMetricType?.encodeToJSON(), isExplode: false),
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<XcodeMetrics>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/perfPowerMetrics
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<XcodeMetrics> {
        let localVariableRequestBuilder: RequestBuilder<XcodeMetrics>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsPreOrderGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - returns: AppPreOrderWithoutIncludesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPreOrderGetToOneRelated(id: String, fieldsAppPreOrders: [FieldsAppPreOrders_appsPreOrderGetToOneRelated]? = nil) async throws -> AppPreOrderWithoutIncludesResponse {
        return try await appsPreOrderGetToOneRelatedWithRequestBuilder(id: id, fieldsAppPreOrders: fieldsAppPreOrders).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPreOrderWithoutIncludesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPreOrderGetToOneRelated(urlString: String) async throws -> AppPreOrderWithoutIncludesResponse {
        return try await appsPreOrderGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/preOrder
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - returns: RequestBuilder<AppPreOrderWithoutIncludesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPreOrderGetToOneRelatedWithRequestBuilder(id: String, fieldsAppPreOrders: [FieldsAppPreOrders_appsPreOrderGetToOneRelated]? = nil) -> RequestBuilder<AppPreOrderWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/preOrder"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appPreOrders]": (wrappedValue: fieldsAppPreOrders?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPreOrderWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/preOrder
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPreOrderWithoutIncludesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPreOrderGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPreOrderWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppPreOrderWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsPreReleaseVersionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: PreReleaseVersionsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPreReleaseVersionsGetToManyRelated(id: String, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsPreReleaseVersionsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> PreReleaseVersionsWithoutIncludesResponse {
        return try await appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(id: id, fieldsPreReleaseVersions: fieldsPreReleaseVersions, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: PreReleaseVersionsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPreReleaseVersionsGetToManyRelated(urlString: String) async throws -> PreReleaseVersionsWithoutIncludesResponse {
        return try await appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/preReleaseVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<PreReleaseVersionsWithoutIncludesResponse> 
     */
    open class func appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(id: String, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_appsPreReleaseVersionsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<PreReleaseVersionsWithoutIncludesResponse> {
        var localVariablePath = "/v1/apps/{id}/preReleaseVersions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PreReleaseVersionsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/preReleaseVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<PreReleaseVersionsWithoutIncludesResponse> 
     */
    open class func appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<PreReleaseVersionsWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<PreReleaseVersionsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppPriceTiers
     */
    public enum FieldsAppPriceTiers_appsPricePointsGetToManyRelated: String, CaseIterable {
        case pricepoints = "pricePoints"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsPricePointsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case customerprice = "customerPrice"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsPricePointsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsPricePointsGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPricePointsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case pricetier = "priceTier"
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by id(s) of related &#39;priceTier&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppPricePointsV2Response
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPricePointsGetToManyRelated(id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPriceTiers: [FieldsAppPriceTiers_appsPricePointsGetToManyRelated]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsPricePointsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsPricePointsGetToManyRelated]? = nil) async throws -> AppPricePointsV2Response {
        return try await appsPricePointsGetToManyRelatedWithRequestBuilder(id: id, filterPriceTier: filterPriceTier, filterTerritory: filterTerritory, fieldsAppPriceTiers: fieldsAppPriceTiers, fieldsAppPricePoints: fieldsAppPricePoints, fieldsApps: fieldsApps, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPricePointsV2Response
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPricePointsGetToManyRelated(urlString: String) async throws -> AppPricePointsV2Response {
        return try await appsPricePointsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/pricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by id(s) of related &#39;priceTier&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppPricePointsV2Response> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPricePointsGetToManyRelatedWithRequestBuilder(id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPriceTiers: [FieldsAppPriceTiers_appsPricePointsGetToManyRelated]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints_appsPricePointsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_appsPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsPricePointsGetToManyRelated]? = nil) -> RequestBuilder<AppPricePointsV2Response> {
        var localVariablePath = "/v1/apps/{id}/pricePoints"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[priceTier]": (wrappedValue: filterPriceTier?.encodeToJSON(), isExplode: false),
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[appPriceTiers]": (wrappedValue: fieldsAppPriceTiers?.encodeToJSON(), isExplode: false),
            "fields[appPricePoints]": (wrappedValue: fieldsAppPricePoints?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPricePointsV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/pricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPricePointsV2Response> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPricePointsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPricePointsV2Response> {
        let localVariableRequestBuilder: RequestBuilder<AppPricePointsV2Response>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppPriceTiers
     */
    public enum FieldsAppPriceTiers_appsPricesGetToManyRelated: String, CaseIterable {
        case pricepoints = "pricePoints"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsPricesGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsPricesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPricesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case pricetier = "priceTier"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppPricesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPricesGetToManyRelated(id: String, fieldsAppPriceTiers: [FieldsAppPriceTiers_appsPricesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsPricesGetToManyRelated]? = nil, fieldsAppPrices: [FieldsAppPrices_appsPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsPricesGetToManyRelated]? = nil) async throws -> AppPricesResponse {
        return try await appsPricesGetToManyRelatedWithRequestBuilder(id: id, fieldsAppPriceTiers: fieldsAppPriceTiers, fieldsApps: fieldsApps, fieldsAppPrices: fieldsAppPrices, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPricesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPricesGetToManyRelated(urlString: String) async throws -> AppPricesResponse {
        return try await appsPricesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppPricesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPricesGetToManyRelatedWithRequestBuilder(id: String, fieldsAppPriceTiers: [FieldsAppPriceTiers_appsPricesGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsPricesGetToManyRelated]? = nil, fieldsAppPrices: [FieldsAppPrices_appsPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appsPricesGetToManyRelated]? = nil) -> RequestBuilder<AppPricesResponse> {
        var localVariablePath = "/v1/apps/{id}/prices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appPriceTiers]": (wrappedValue: fieldsAppPriceTiers?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[appPrices]": (wrappedValue: fieldsAppPrices?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPricesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appsPricesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPricesResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsPromotedPurchasesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_appsPromotedPurchasesGetToManyRelated: String, CaseIterable {
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionavailability = "subscriptionAvailability"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsPromotedPurchasesGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPromotedPurchaseImages
     */
    public enum FieldsPromotedPurchaseImages_appsPromotedPurchasesGetToManyRelated: String, CaseIterable {
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case promotedpurchase = "promotedPurchase"
        case sourcefilechecksum = "sourceFileChecksum"
        case state = "state"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPromotedPurchasesGetToManyRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case subscription = "subscription"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: PromotedPurchasesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesGetToManyRelated(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_appsPromotedPurchasesGetToManyRelated]? = nil, limit: Int? = nil, limitPromotionImages: Int? = nil, include: [Include_appsPromotedPurchasesGetToManyRelated]? = nil) async throws -> PromotedPurchasesResponse {
        return try await appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(id: id, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptions: fieldsSubscriptions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPromotedPurchaseImages: fieldsPromotedPurchaseImages, limit: limit, limitPromotionImages: limitPromotionImages, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: PromotedPurchasesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesGetToManyRelated(urlString: String) async throws -> PromotedPurchasesResponse {
        return try await appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<PromotedPurchasesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_appsPromotedPurchasesGetToManyRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_appsPromotedPurchasesGetToManyRelated]? = nil, limit: Int? = nil, limitPromotionImages: Int? = nil, include: [Include_appsPromotedPurchasesGetToManyRelated]? = nil) -> RequestBuilder<PromotedPurchasesResponse> {
        var localVariablePath = "/v1/apps/{id}/promotedPurchases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchaseImages]": (wrappedValue: fieldsPromotedPurchaseImages?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[promotionImages]": (wrappedValue: limitPromotionImages?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromotedPurchasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<PromotedPurchasesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<PromotedPurchasesResponse> {
        let localVariableRequestBuilder: RequestBuilder<PromotedPurchasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: AppPromotedPurchasesLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesGetToManyRelationship(id: String, limit: Int? = nil) async throws -> AppPromotedPurchasesLinkagesResponse {
        return try await appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPromotedPurchasesLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesGetToManyRelationship(urlString: String) async throws -> AppPromotedPurchasesLinkagesResponse {
        return try await appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/relationships/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<AppPromotedPurchasesLinkagesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<AppPromotedPurchasesLinkagesResponse> {
        var localVariablePath = "/v1/apps/{id}/relationships/promotedPurchases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPromotedPurchasesLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/relationships/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPromotedPurchasesLinkagesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<AppPromotedPurchasesLinkagesResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppPromotedPurchasesLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appPromotedPurchasesLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesReplaceToManyRelationship(id: String, appPromotedPurchasesLinkagesRequest: AppPromotedPurchasesLinkagesRequest) async throws {
        return try await appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(id: id, appPromotedPurchasesLinkagesRequest: appPromotedPurchasesLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsPromotedPurchasesReplaceToManyRelationship(urlString: String) async throws {
        return try await appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/apps/{id}/relationships/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appPromotedPurchasesLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(id: String, appPromotedPurchasesLinkagesRequest: AppPromotedPurchasesLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/apps/{id}/relationships/promotedPurchases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appPromotedPurchasesLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/apps/{id}/relationships/promotedPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case unresolvedIssues = "UNRESOLVED_ISSUES"
        case canceling = "CANCELING"
        case completing = "COMPLETING"
        case complete = "COMPLETE"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case removed = "removed"
        case resolved = "resolved"
        case reviewsubmission = "reviewSubmission"
        case state = "state"
    }

    /**
     * enum for parameter fieldsActors
     */
    public enum FieldsActors_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case actortype = "actorType"
        case apikeyid = "apiKeyId"
        case useremail = "userEmail"
        case userfirstname = "userFirstName"
        case userlastname = "userLastName"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case lastupdatedbyactor = "lastUpdatedByActor"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submittedbyactor = "submittedByActor"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsReviewSubmissionsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case items = "items"
        case lastupdatedbyactor = "lastUpdatedByActor"
        case submittedbyactor = "submittedByActor"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: ReviewSubmissionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsReviewSubmissionsGetToManyRelated(id: String, filterPlatform: [FilterPlatform_appsReviewSubmissionsGetToManyRelated]? = nil, filterState: [FilterState_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsActors: [FieldsActors_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsReviewSubmissionsGetToManyRelated]? = nil, limit: Int? = nil, limitItems: Int? = nil, include: [Include_appsReviewSubmissionsGetToManyRelated]? = nil) async throws -> ReviewSubmissionsResponse {
        return try await appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(id: id, filterPlatform: filterPlatform, filterState: filterState, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, fieldsActors: fieldsActors, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsReviewSubmissions: fieldsReviewSubmissions, limit: limit, limitItems: limitItems, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ReviewSubmissionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsReviewSubmissionsGetToManyRelated(urlString: String) async throws -> ReviewSubmissionsResponse {
        return try await appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(id: String, filterPlatform: [FilterPlatform_appsReviewSubmissionsGetToManyRelated]? = nil, filterState: [FilterState_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsActors: [FieldsActors_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_appsReviewSubmissionsGetToManyRelated]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_appsReviewSubmissionsGetToManyRelated]? = nil, limit: Int? = nil, limitItems: Int? = nil, include: [Include_appsReviewSubmissionsGetToManyRelated]? = nil) -> RequestBuilder<ReviewSubmissionsResponse> {
        var localVariablePath = "/v1/apps/{id}/reviewSubmissions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(), isExplode: false),
            "fields[reviewSubmissionItems]": (wrappedValue: fieldsReviewSubmissionItems?.encodeToJSON(), isExplode: false),
            "fields[actors]": (wrappedValue: fieldsActors?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[items]": (wrappedValue: limitItems?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<ReviewSubmissionsResponse> {
        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsSubscriptionGracePeriodGetToOneRelated: String, CaseIterable {
        case duration = "duration"
        case optin = "optIn"
        case renewaltype = "renewalType"
        case sandboxoptin = "sandboxOptIn"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - returns: SubscriptionGracePeriodResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsSubscriptionGracePeriodGetToOneRelated(id: String, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsSubscriptionGracePeriodGetToOneRelated]? = nil) async throws -> SubscriptionGracePeriodResponse {
        return try await appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(id: id, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionGracePeriodResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsSubscriptionGracePeriodGetToOneRelated(urlString: String) async throws -> SubscriptionGracePeriodResponse {
        return try await appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/subscriptionGracePeriod
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - returns: RequestBuilder<SubscriptionGracePeriodResponse> 
     */
    open class func appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(id: String, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_appsSubscriptionGracePeriodGetToOneRelated]? = nil) -> RequestBuilder<SubscriptionGracePeriodResponse> {
        var localVariablePath = "/v1/apps/{id}/subscriptionGracePeriod"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionGracePeriods]": (wrappedValue: fieldsSubscriptionGracePeriods?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionGracePeriodResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/subscriptionGracePeriod
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionGracePeriodResponse> 
     */
    open class func appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionGracePeriodResponse> {
        let localVariableRequestBuilder: RequestBuilder<SubscriptionGracePeriodResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterSubscriptionsState
     */
    public enum FilterSubscriptionsState_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case missingMetadata = "MISSING_METADATA"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
        case approved = "APPROVED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case removedFromSale = "REMOVED_FROM_SALE"
        case rejected = "REJECTED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case referencename = "referenceName"
        case referencename2 = "-referenceName"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionavailability = "subscriptionAvailability"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsSubscriptionGroupLocalizations
     */
    public enum FieldsSubscriptionGroupLocalizations_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case customappname = "customAppName"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscriptiongroup = "subscriptionGroup"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsSubscriptionGroupsGetToManyRelated: String, CaseIterable {
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterSubscriptionsState: (query) filter by attribute &#39;subscriptions.state&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionGroupsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsSubscriptionGroupsGetToManyRelated(id: String, filterReferenceName: [String]? = nil, filterSubscriptionsState: [FilterSubscriptionsState_appsSubscriptionGroupsGetToManyRelated]? = nil, sort: [Sort_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptionGroupLocalizations: [FieldsSubscriptionGroupLocalizations_appsSubscriptionGroupsGetToManyRelated]? = nil, limit: Int? = nil, limitSubscriptions: Int? = nil, limitSubscriptionGroupLocalizations: Int? = nil, include: [Include_appsSubscriptionGroupsGetToManyRelated]? = nil) async throws -> SubscriptionGroupsResponse {
        return try await appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(id: id, filterReferenceName: filterReferenceName, filterSubscriptionsState: filterSubscriptionsState, sort: sort, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsSubscriptionGroupLocalizations: fieldsSubscriptionGroupLocalizations, limit: limit, limitSubscriptions: limitSubscriptions, limitSubscriptionGroupLocalizations: limitSubscriptionGroupLocalizations, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionGroupsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsSubscriptionGroupsGetToManyRelated(urlString: String) async throws -> SubscriptionGroupsResponse {
        return try await appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/subscriptionGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterSubscriptionsState: (query) filter by attribute &#39;subscriptions.state&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionGroupsResponse> 
     */
    open class func appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(id: String, filterReferenceName: [String]? = nil, filterSubscriptionsState: [FilterSubscriptionsState_appsSubscriptionGroupsGetToManyRelated]? = nil, sort: [Sort_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_appsSubscriptionGroupsGetToManyRelated]? = nil, fieldsSubscriptionGroupLocalizations: [FieldsSubscriptionGroupLocalizations_appsSubscriptionGroupsGetToManyRelated]? = nil, limit: Int? = nil, limitSubscriptions: Int? = nil, limitSubscriptionGroupLocalizations: Int? = nil, include: [Include_appsSubscriptionGroupsGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionGroupsResponse> {
        var localVariablePath = "/v1/apps/{id}/subscriptionGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[referenceName]": (wrappedValue: filterReferenceName?.encodeToJSON(), isExplode: false),
            "filter[subscriptions.state]": (wrappedValue: filterSubscriptionsState?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGroups]": (wrappedValue: fieldsSubscriptionGroups?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGroupLocalizations]": (wrappedValue: fieldsSubscriptionGroupLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[subscriptions]": (wrappedValue: limitSubscriptions?.encodeToJSON(), isExplode: true),
            "limit[subscriptionGroupLocalizations]": (wrappedValue: limitSubscriptionGroupLocalizations?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionGroupsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/subscriptionGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionGroupsResponse> 
     */
    open class func appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionGroupsResponse> {
        let localVariableRequestBuilder: RequestBuilder<SubscriptionGroupsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appUpdateRequest: (body) App representation 
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsUpdateInstance(id: String, appUpdateRequest: AppUpdateRequest) async throws -> AppResponse {
        return try await appsUpdateInstanceWithRequestBuilder(id: id, appUpdateRequest: appUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsUpdateInstance(urlString: String) async throws -> AppResponse {
        return try await appsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/apps/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appUpdateRequest: (body) App representation 
     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsUpdateInstanceWithRequestBuilder(id: String, appUpdateRequest: AppUpdateRequest) -> RequestBuilder<AppResponse> {
        var localVariablePath = "/v1/apps/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/apps/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
