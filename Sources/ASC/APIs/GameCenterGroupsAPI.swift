//
// GameCenterGroupsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GameCenterGroupsAPI {

    /**

     - parameter gameCenterGroupCreateRequest: (body) GameCenterGroup representation 
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsCreateInstance(gameCenterGroupCreateRequest: GameCenterGroupCreateRequest) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsCreateInstanceWithRequestBuilder(gameCenterGroupCreateRequest: gameCenterGroupCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsCreateInstance(urlString: String) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/gameCenterGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter gameCenterGroupCreateRequest: (body) GameCenterGroup representation 
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsCreateInstanceWithRequestBuilder(gameCenterGroupCreateRequest: GameCenterGroupCreateRequest) -> RequestBuilder<GameCenterGroupResponse> {
        let localVariablePath = "/v1/gameCenterGroups"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterGroupCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/gameCenterGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsDeleteInstance(id: String) async throws {
        return try await gameCenterGroupsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsDeleteInstance(urlString: String) async throws {
        return try await gameCenterGroupsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterGroups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterAchievementLocalizations
     */
    public enum FieldsGameCenterAchievementLocalizations_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case afterearneddescription = "afterEarnedDescription"
        case beforeearneddescription = "beforeEarnedDescription"
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterachievementimage = "gameCenterAchievementImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGameCenterAchievementsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterArchived: (query) filter by attribute &#39;archived&#39; (optional)
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterAchievementsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelated(id: String, filterArchived: [String]? = nil, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil) async throws -> GameCenterAchievementsResponse {
        return try await gameCenterGroupsGameCenterAchievementsGetToManyRelatedWithRequestBuilder(id: id, filterArchived: filterArchived, filterReferenceName: filterReferenceName, filterId: filterId, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterAchievementLocalizations: fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limit: limit, limitLocalizations: limitLocalizations, limitReleases: limitReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterAchievementsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelated(urlString: String) async throws -> GameCenterAchievementsResponse {
        return try await gameCenterGroupsGameCenterAchievementsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterArchived: (query) filter by attribute &#39;archived&#39; (optional)
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterAchievementsResponse> 
     */
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelatedWithRequestBuilder(id: String, filterArchived: [String]? = nil, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterAchievementsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterAchievementsResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/gameCenterAchievements"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[archived]": (wrappedValue: filterArchived?.encodeToJSON(), isExplode: false),
            "filter[referenceName]": (wrappedValue: filterReferenceName?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementLocalizations]": (wrappedValue: fieldsGameCenterAchievementLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterAchievementsResponse> 
     */
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterAchievementsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: GameCenterGroupGameCenterAchievementsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelationship(id: String, limit: Int? = nil) async throws -> GameCenterGroupGameCenterAchievementsLinkagesResponse {
        return try await gameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupGameCenterAchievementsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelationship(urlString: String) async throws -> GameCenterGroupGameCenterAchievementsLinkagesResponse {
        return try await gameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterAchievementsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterAchievementsLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(id: String, gameCenterGroupGameCenterAchievementsLinkagesRequest: GameCenterGroupGameCenterAchievementsLinkagesRequest) async throws {
        return try await gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithRequestBuilder(id: id, gameCenterGroupGameCenterAchievementsLinkagesRequest: gameCenterGroupGameCenterAchievementsLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(urlString: String) async throws {
        return try await gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterAchievementsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithRequestBuilder(id: String, gameCenterGroupGameCenterAchievementsLinkagesRequest: GameCenterGroupGameCenterAchievementsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterGroupGameCenterAchievementsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSetReleases
     */
    public enum FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboardset = "gameCenterLeaderboardSet"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterAppVersions
     */
    public enum FieldsGameCenterAppVersions_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case compatibilityversions = "compatibilityVersions"
        case enabled = "enabled"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGameCenterDetailsGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterGameCenterAppVersionsEnabled: (query) filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitGameCenterAppVersions: (query) maximum number of related gameCenterAppVersions returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitAchievementReleases: (query) maximum number of related achievementReleases returned (when they are included) (optional)
     - parameter limitLeaderboardReleases: (query) maximum number of related leaderboardReleases returned (when they are included) (optional)
     - parameter limitLeaderboardSetReleases: (query) maximum number of related leaderboardSetReleases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterDetailsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterDetailsGetToManyRelated(id: String, filterGameCenterAppVersionsEnabled: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, limit: Int? = nil, limitGameCenterAppVersions: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterAchievements: Int? = nil, limitAchievementReleases: Int? = nil, limitLeaderboardReleases: Int? = nil, limitLeaderboardSetReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil) async throws -> GameCenterDetailsResponse {
        return try await gameCenterGroupsGameCenterDetailsGetToManyRelatedWithRequestBuilder(id: id, filterGameCenterAppVersionsEnabled: filterGameCenterAppVersionsEnabled, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardSetReleases: fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterAppVersions: fieldsGameCenterAppVersions, fieldsGameCenterAchievements: fieldsGameCenterAchievements, fieldsApps: fieldsApps, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limit: limit, limitGameCenterAppVersions: limitGameCenterAppVersions, limitGameCenterLeaderboards: limitGameCenterLeaderboards, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitGameCenterAchievements: limitGameCenterAchievements, limitAchievementReleases: limitAchievementReleases, limitLeaderboardReleases: limitLeaderboardReleases, limitLeaderboardSetReleases: limitLeaderboardSetReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterDetailsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterDetailsGetToManyRelated(urlString: String) async throws -> GameCenterDetailsResponse {
        return try await gameCenterGroupsGameCenterDetailsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterDetails
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterGameCenterAppVersionsEnabled: (query) filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitGameCenterAppVersions: (query) maximum number of related gameCenterAppVersions returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitAchievementReleases: (query) maximum number of related achievementReleases returned (when they are included) (optional)
     - parameter limitLeaderboardReleases: (query) maximum number of related leaderboardReleases returned (when they are included) (optional)
     - parameter limitLeaderboardSetReleases: (query) maximum number of related leaderboardSetReleases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterDetailsResponse> 
     */
    open class func gameCenterGroupsGameCenterDetailsGetToManyRelatedWithRequestBuilder(id: String, filterGameCenterAppVersionsEnabled: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsApps: [FieldsApps_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil, limit: Int? = nil, limitGameCenterAppVersions: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterAchievements: Int? = nil, limitAchievementReleases: Int? = nil, limitLeaderboardReleases: Int? = nil, limitLeaderboardSetReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterDetailsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterDetailsResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/gameCenterDetails"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[gameCenterAppVersions.enabled]": (wrappedValue: filterGameCenterAppVersionsEnabled?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSetReleases]": (wrappedValue: fieldsGameCenterLeaderboardSetReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAppVersions]": (wrappedValue: fieldsGameCenterAppVersions?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[gameCenterAppVersions]": (wrappedValue: limitGameCenterAppVersions?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboards]": (wrappedValue: limitGameCenterLeaderboards?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[gameCenterAchievements]": (wrappedValue: limitGameCenterAchievements?.encodeToJSON(), isExplode: true),
            "limit[achievementReleases]": (wrappedValue: limitAchievementReleases?.encodeToJSON(), isExplode: true),
            "limit[leaderboardReleases]": (wrappedValue: limitLeaderboardReleases?.encodeToJSON(), isExplode: true),
            "limit[leaderboardSetReleases]": (wrappedValue: limitLeaderboardSetReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterDetailsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterDetails
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterDetailsResponse> 
     */
    open class func gameCenterGroupsGameCenterDetailsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterDetailsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterDetailsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSetLocalizations
     */
    public enum FieldsGameCenterLeaderboardSetLocalizations_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case gamecenterleaderboardset = "gameCenterLeaderboardSet"
        case gamecenterleaderboardsetimage = "gameCenterLeaderboardSetImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSetReleases
     */
    public enum FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboardset = "gameCenterLeaderboardSet"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterLeaderboardSetLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterLeaderboardSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(id: String, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterLeaderboardSetLocalizations: [FieldsGameCenterLeaderboardSetLocalizations_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil) async throws -> GameCenterLeaderboardSetsResponse {
        return try await gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithRequestBuilder(id: id, filterReferenceName: filterReferenceName, filterId: filterId, fieldsGameCenterLeaderboardSetLocalizations: fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboardSetReleases: fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, limit: limit, limitLocalizations: limitLocalizations, limitGameCenterLeaderboards: limitGameCenterLeaderboards, limitReleases: limitReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(urlString: String) async throws -> GameCenterLeaderboardSetsResponse {
        return try await gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterLeaderboardSetLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSetReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterLeaderboardSetsResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithRequestBuilder(id: String, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterLeaderboardSetLocalizations: [FieldsGameCenterLeaderboardSetLocalizations_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSetReleases: [FieldsGameCenterLeaderboardSetReleases_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, limitGameCenterLeaderboards: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterLeaderboardSetsResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[referenceName]": (wrappedValue: filterReferenceName?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSetLocalizations]": (wrappedValue: fieldsGameCenterLeaderboardSetLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSetReleases]": (wrappedValue: fieldsGameCenterLeaderboardSetReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboards]": (wrappedValue: limitGameCenterLeaderboards?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardSetsResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardSetsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(id: String, limit: Int? = nil) async throws -> GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse {
        return try await gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(urlString: String) async throws -> GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse {
        return try await gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(id: String, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest) async throws {
        return try await gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithRequestBuilder(id: id, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(urlString: String) async throws {
        return try await gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithRequestBuilder(id: String, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardLocalizations
     */
    public enum FieldsGameCenterLeaderboardLocalizations_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case formatteroverride = "formatterOverride"
        case formattersuffix = "formatterSuffix"
        case formattersuffixsingular = "formatterSuffixSingular"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case gamecenterleaderboardimage = "gameCenterLeaderboardImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterArchived: (query) filter by attribute &#39;archived&#39; (optional)
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterLeaderboardsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(id: String, filterArchived: [String]? = nil, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, limit: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil) async throws -> GameCenterLeaderboardsResponse {
        return try await gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithRequestBuilder(id: id, filterArchived: filterArchived, filterReferenceName: filterReferenceName, filterId: filterId, fieldsGameCenterLeaderboardLocalizations: fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limit: limit, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitLocalizations: limitLocalizations, limitReleases: limitReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(urlString: String) async throws -> GameCenterLeaderboardsResponse {
        return try await gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterArchived: (query) filter by attribute &#39;archived&#39; (optional)
     - parameter filterReferenceName: (query) filter by attribute &#39;referenceName&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterLeaderboardsResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithRequestBuilder(id: String, filterArchived: [String]? = nil, filterReferenceName: [String]? = nil, filterId: [String]? = nil, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil, limit: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterGroupsGameCenterLeaderboardsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterLeaderboardsResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/gameCenterLeaderboards"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[archived]": (wrappedValue: filterArchived?.encodeToJSON(), isExplode: false),
            "filter[referenceName]": (wrappedValue: filterReferenceName?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardLocalizations]": (wrappedValue: fieldsGameCenterLeaderboardLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardsResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: GameCenterGroupGameCenterLeaderboardsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(id: String, limit: Int? = nil) async throws -> GameCenterGroupGameCenterLeaderboardsLinkagesResponse {
        return try await gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupGameCenterLeaderboardsLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(urlString: String) async throws -> GameCenterGroupGameCenterLeaderboardsLinkagesResponse {
        return try await gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterLeaderboardsLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(id: String, gameCenterGroupGameCenterLeaderboardsLinkagesRequest: GameCenterGroupGameCenterLeaderboardsLinkagesRequest) async throws {
        return try await gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithRequestBuilder(id: id, gameCenterGroupGameCenterLeaderboardsLinkagesRequest: gameCenterGroupGameCenterLeaderboardsLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(urlString: String) async throws {
        return try await gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupGameCenterLeaderboardsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithRequestBuilder(id: String, gameCenterGroupGameCenterLeaderboardsLinkagesRequest: GameCenterGroupGameCenterLeaderboardsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterGroupGameCenterLeaderboardsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGetCollection: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGetCollection: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterGroupsGetCollection: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGetCollection: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterGroupsGetCollection: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterGroupsGetCollection: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**

     - parameter filterGameCenterDetails: (query) filter by id(s) of related &#39;gameCenterDetails&#39; (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitGameCenterDetails: (query) maximum number of related gameCenterDetails returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - returns: GameCenterGroupsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGetCollection(filterGameCenterDetails: [String]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGetCollection]? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterDetails: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil) async throws -> GameCenterGroupsResponse {
        return try await gameCenterGroupsGetCollectionWithRequestBuilder(filterGameCenterDetails: filterGameCenterDetails, fieldsGameCenterGroups: fieldsGameCenterGroups, limit: limit, include: include, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limitGameCenterAchievements: limitGameCenterAchievements, limitGameCenterDetails: limitGameCenterDetails, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitGameCenterLeaderboards: limitGameCenterLeaderboards).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGetCollection(urlString: String) async throws -> GameCenterGroupsResponse {
        return try await gameCenterGroupsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterGameCenterDetails: (query) filter by id(s) of related &#39;gameCenterDetails&#39; (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitGameCenterDetails: (query) maximum number of related gameCenterDetails returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - returns: RequestBuilder<GameCenterGroupsResponse> 
     */
    open class func gameCenterGroupsGetCollectionWithRequestBuilder(filterGameCenterDetails: [String]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGetCollection]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGetCollection]? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterDetails: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil) -> RequestBuilder<GameCenterGroupsResponse> {
        let localVariablePath = "/v1/gameCenterGroups"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[gameCenterDetails]": (wrappedValue: filterGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit[gameCenterAchievements]": (wrappedValue: limitGameCenterAchievements?.encodeToJSON(), isExplode: true),
            "limit[gameCenterDetails]": (wrappedValue: limitGameCenterDetails?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboards]": (wrappedValue: limitGameCenterLeaderboards?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupsResponse> 
     */
    open class func gameCenterGroupsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterGroupsGetInstance: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterGroupsGetInstance: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterGroupsGetInstance: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterGroupsGetInstance: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterGroupsGetInstance: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterGroupsGetInstance: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitGameCenterDetails: (query) maximum number of related gameCenterDetails returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGetInstance(id: String, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGetInstance]? = nil, include: [Include_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGetInstance]? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterDetails: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsGetInstanceWithRequestBuilder(id: id, fieldsGameCenterGroups: fieldsGameCenterGroups, include: include, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limitGameCenterAchievements: limitGameCenterAchievements, limitGameCenterDetails: limitGameCenterDetails, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitGameCenterLeaderboards: limitGameCenterLeaderboards).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsGetInstance(urlString: String) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitGameCenterAchievements: (query) maximum number of related gameCenterAchievements returned (when they are included) (optional)
     - parameter limitGameCenterDetails: (query) maximum number of related gameCenterDetails returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitGameCenterLeaderboards: (query) maximum number of related gameCenterLeaderboards returned (when they are included) (optional)
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsGetInstanceWithRequestBuilder(id: String, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterGroupsGetInstance]? = nil, include: [Include_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterGroupsGetInstance]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterGroupsGetInstance]? = nil, limitGameCenterAchievements: Int? = nil, limitGameCenterDetails: Int? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitGameCenterLeaderboards: Int? = nil) -> RequestBuilder<GameCenterGroupResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit[gameCenterAchievements]": (wrappedValue: limitGameCenterAchievements?.encodeToJSON(), isExplode: true),
            "limit[gameCenterDetails]": (wrappedValue: limitGameCenterDetails?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[gameCenterLeaderboards]": (wrappedValue: limitGameCenterLeaderboards?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupUpdateRequest: (body) GameCenterGroup representation 
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsUpdateInstance(id: String, gameCenterGroupUpdateRequest: GameCenterGroupUpdateRequest) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsUpdateInstanceWithRequestBuilder(id: id, gameCenterGroupUpdateRequest: gameCenterGroupUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterGroupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterGroupsUpdateInstance(urlString: String) async throws -> GameCenterGroupResponse {
        return try await gameCenterGroupsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterGroupUpdateRequest: (body) GameCenterGroup representation 
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsUpdateInstanceWithRequestBuilder(id: String, gameCenterGroupUpdateRequest: GameCenterGroupUpdateRequest) -> RequestBuilder<GameCenterGroupResponse> {
        var localVariablePath = "/v1/gameCenterGroups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterGroupUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterGroups/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterGroupResponse> 
     */
    open class func gameCenterGroupsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterGroupResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterGroupResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
