//
// CiProductsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CiProductsAPI {

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsAdditionalRepositoriesGetToManyRelated: String, CaseIterable {
        case lastaccesseddate = "lastAccessedDate"
        case httpcloneurl = "httpCloneUrl"
        case sshcloneurl = "sshCloneUrl"
        case ownername = "ownerName"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case pullrequests = "pullRequests"
    }

    /**
     * enum for parameter fieldsScmProviders
     */
    public enum FieldsScmProviders_ciProductsAdditionalRepositoriesGetToManyRelated: String, CaseIterable {
        case scmprovidertype = "scmProviderType"
        case url = "url"
        case repositories = "repositories"
    }

    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsAdditionalRepositoriesGetToManyRelated: String, CaseIterable {
        case name = "name"
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case repository = "repository"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsAdditionalRepositoriesGetToManyRelated: String, CaseIterable {
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: ScmRepositoriesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsAdditionalRepositoriesGetToManyRelated(id: String, filterId: [String]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, fieldsScmProviders: [FieldsScmProviders_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil) async throws -> ScmRepositoriesResponse {
        return try await ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(id: id, filterId: filterId, fieldsScmRepositories: fieldsScmRepositories, fieldsScmProviders: fieldsScmProviders, fieldsScmGitReferences: fieldsScmGitReferences, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ScmRepositoriesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsAdditionalRepositoriesGetToManyRelated(urlString: String) async throws -> ScmRepositoriesResponse {
        return try await ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}/additionalRepositories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(id: String, filterId: [String]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, fieldsScmProviders: [FieldsScmProviders_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsAdditionalRepositoriesGetToManyRelated]? = nil) -> RequestBuilder<ScmRepositoriesResponse> {
        var localVariablePath = "/v1/ciProducts/{id}/additionalRepositories"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "fields[scmProviders]": (wrappedValue: fieldsScmProviders?.encodeToJSON(), isExplode: false),
            "fields[scmGitReferences]": (wrappedValue: fieldsScmGitReferences?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}/additionalRepositories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<ScmRepositoriesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_ciProductsAppGetToOneRelated: String, CaseIterable {
        case appdescription = "appDescription"
        case createddate = "createdDate"
        case usesencryption = "usesEncryption"
        case exempt = "exempt"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case availableonfrenchstore = "availableOnFrenchStore"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case documenturl = "documentUrl"
        case documentname = "documentName"
        case documenttype = "documentType"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case codevalue = "codeValue"
        case app = "app"
        case builds = "builds"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case producttype = "productType"
        case app = "app"
        case bundleid = "bundleId"
        case workflows = "workflows"
        case primaryrepositories = "primaryRepositories"
        case additionalrepositories = "additionalRepositories"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_ciProductsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case isinternalgroup = "isInternalGroup"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
        case publiclinklimit = "publicLinkLimit"
        case publiclink = "publicLink"
        case feedbackenabled = "feedbackEnabled"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case app = "app"
        case builds = "builds"
        case betatesters = "betaTesters"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_ciProductsAppGetToOneRelated: String, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_ciProductsAppGetToOneRelated: String, CaseIterable {
        case version = "version"
        case platform = "platform"
        case builds = "builds"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_ciProductsAppGetToOneRelated: String, CaseIterable {
        case feedbackemail = "feedbackEmail"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
        case description = "description"
        case locale = "locale"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciProductsAppGetToOneRelated: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_ciProductsAppGetToOneRelated: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_ciProductsAppGetToOneRelated: String, CaseIterable {
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case contactemail = "contactEmail"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
        case app = "app"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_ciProductsAppGetToOneRelated: String, CaseIterable {
        case appstorestate = "appStoreState"
        case state = "state"
        case appstoreagerating = "appStoreAgeRating"
        case australiaagerating = "australiaAgeRating"
        case brazilagerating = "brazilAgeRating"
        case brazilageratingv2 = "brazilAgeRatingV2"
        case franceagerating = "franceAgeRating"
        case koreaagerating = "koreaAgeRating"
        case kidsageband = "kidsAgeBand"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appinfolocalizations = "appInfoLocalizations"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_ciProductsAppGetToOneRelated: String, CaseIterable {
        case bundleid = "bundleId"
        case app = "app"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_ciProductsAppGetToOneRelated: String, CaseIterable {
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_ciProductsAppGetToOneRelated: String, CaseIterable {
        case referencename = "referenceName"
        case productid = "productId"
        case inapppurchasetype = "inAppPurchaseType"
        case state = "state"
        case apps = "apps"
        case name = "name"
        case reviewnote = "reviewNote"
        case familysharable = "familySharable"
        case contenthosting = "contentHosting"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case pricepoints = "pricePoints"
        case content = "content"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case promotedpurchase = "promotedPurchase"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case images = "images"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_ciProductsAppGetToOneRelated: String, CaseIterable {
        case referencename = "referenceName"
        case subscriptions = "subscriptions"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_ciProductsAppGetToOneRelated: String, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case iconasset = "iconAsset"
        case compatibleversions = "compatibleVersions"
        case app = "app"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_ciProductsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case url = "url"
        case visible = "visible"
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_ciProductsAppGetToOneRelated: String, CaseIterable {
        case visibleforallusers = "visibleForAllUsers"
        case enabled = "enabled"
        case state = "state"
        case inapppurchasev2 = "inAppPurchaseV2"
        case subscription = "subscription"
        case promotionimages = "promotionImages"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_ciProductsAppGetToOneRelated: String, CaseIterable {
        case referencename = "referenceName"
        case badge = "badge"
        case eventstate = "eventState"
        case deeplink = "deepLink"
        case purchaserequirement = "purchaseRequirement"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purpose = "purpose"
        case territoryschedules = "territorySchedules"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case localizations = "localizations"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_ciProductsAppGetToOneRelated: String, CaseIterable {
        case platform = "platform"
        case submitteddate = "submittedDate"
        case state = "state"
        case app = "app"
        case items = "items"
        case appstoreversionforreview = "appStoreVersionForReview"
        case submittedbyactor = "submittedByActor"
        case lastupdatedbyactor = "lastUpdatedByActor"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_ciProductsAppGetToOneRelated: String, CaseIterable {
        case optin = "optIn"
        case sandboxoptin = "sandboxOptIn"
        case duration = "duration"
        case renewaltype = "renewalType"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_ciProductsAppGetToOneRelated: String, CaseIterable {
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case app = "app"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterachievements = "gameCenterAchievements"
        case defaultleaderboard = "defaultLeaderboard"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case achievementreleases = "achievementReleases"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_ciProductsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case platform = "platform"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsAppGetToOneRelated: String, CaseIterable {
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsAppGetToOneRelated(id: String, fieldsApps: [FieldsApps_ciProductsAppGetToOneRelated]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_ciProductsAppGetToOneRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsAppGetToOneRelated]? = nil, fieldsBetaGroups: [FieldsBetaGroups_ciProductsAppGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_ciProductsAppGetToOneRelated]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_ciProductsAppGetToOneRelated]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_ciProductsAppGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciProductsAppGetToOneRelated]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_ciProductsAppGetToOneRelated]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_ciProductsAppGetToOneRelated]? = nil, fieldsAppInfos: [FieldsAppInfos_ciProductsAppGetToOneRelated]? = nil, fieldsAppClips: [FieldsAppClips_ciProductsAppGetToOneRelated]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_ciProductsAppGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_ciProductsAppGetToOneRelated]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_ciProductsAppGetToOneRelated]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_ciProductsAppGetToOneRelated]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_ciProductsAppGetToOneRelated]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_ciProductsAppGetToOneRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_ciProductsAppGetToOneRelated]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_ciProductsAppGetToOneRelated]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_ciProductsAppGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_ciProductsAppGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_ciProductsAppGetToOneRelated]? = nil, include: [Include_ciProductsAppGetToOneRelated]? = nil, limitAppEncryptionDeclarations: Int? = nil, limitBetaGroups: Int? = nil, limitAppStoreVersions: Int? = nil, limitPreReleaseVersions: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBuilds: Int? = nil, limitAppInfos: Int? = nil, limitAppClips: Int? = nil, limitInAppPurchases: Int? = nil, limitSubscriptionGroups: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitAppCustomProductPages: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPromotedPurchases: Int? = nil, limitAppEvents: Int? = nil, limitReviewSubmissions: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil) async throws -> AppResponse {
        return try await ciProductsAppGetToOneRelatedWithRequestBuilder(id: id, fieldsApps: fieldsApps, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsCiProducts: fieldsCiProducts, fieldsBetaGroups: fieldsBetaGroups, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsBuilds: fieldsBuilds, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsAppInfos: fieldsAppInfos, fieldsAppClips: fieldsAppClips, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsInAppPurchases: fieldsInAppPurchases, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsAppEvents: fieldsAppEvents, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, include: include, limitAppEncryptionDeclarations: limitAppEncryptionDeclarations, limitBetaGroups: limitBetaGroups, limitAppStoreVersions: limitAppStoreVersions, limitPreReleaseVersions: limitPreReleaseVersions, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBuilds: limitBuilds, limitAppInfos: limitAppInfos, limitAppClips: limitAppClips, limitInAppPurchases: limitInAppPurchases, limitSubscriptionGroups: limitSubscriptionGroups, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitAppCustomProductPages: limitAppCustomProductPages, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPromotedPurchases: limitPromotedPurchases, limitAppEvents: limitAppEvents, limitReviewSubmissions: limitReviewSubmissions, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsAppGetToOneRelated(urlString: String) async throws -> AppResponse {
        return try await ciProductsAppGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppEncryptionDeclarations: (query) maximum number of related appEncryptionDeclarations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - returns: RequestBuilder<AppResponse> 
     */
    open class func ciProductsAppGetToOneRelatedWithRequestBuilder(id: String, fieldsApps: [FieldsApps_ciProductsAppGetToOneRelated]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_ciProductsAppGetToOneRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsAppGetToOneRelated]? = nil, fieldsBetaGroups: [FieldsBetaGroups_ciProductsAppGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_ciProductsAppGetToOneRelated]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_ciProductsAppGetToOneRelated]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations_ciProductsAppGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciProductsAppGetToOneRelated]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements_ciProductsAppGetToOneRelated]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails_ciProductsAppGetToOneRelated]? = nil, fieldsAppInfos: [FieldsAppInfos_ciProductsAppGetToOneRelated]? = nil, fieldsAppClips: [FieldsAppClips_ciProductsAppGetToOneRelated]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements_ciProductsAppGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_ciProductsAppGetToOneRelated]? = nil, fieldsSubscriptionGroups: [FieldsSubscriptionGroups_ciProductsAppGetToOneRelated]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions_ciProductsAppGetToOneRelated]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages_ciProductsAppGetToOneRelated]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_ciProductsAppGetToOneRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_ciProductsAppGetToOneRelated]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_ciProductsAppGetToOneRelated]? = nil, fieldsSubscriptionGracePeriods: [FieldsSubscriptionGracePeriods_ciProductsAppGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_ciProductsAppGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_ciProductsAppGetToOneRelated]? = nil, include: [Include_ciProductsAppGetToOneRelated]? = nil, limitAppEncryptionDeclarations: Int? = nil, limitBetaGroups: Int? = nil, limitAppStoreVersions: Int? = nil, limitPreReleaseVersions: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBuilds: Int? = nil, limitAppInfos: Int? = nil, limitAppClips: Int? = nil, limitInAppPurchases: Int? = nil, limitSubscriptionGroups: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitAppCustomProductPages: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPromotedPurchases: Int? = nil, limitAppEvents: Int? = nil, limitReviewSubmissions: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil) -> RequestBuilder<AppResponse> {
        var localVariablePath = "/v1/ciProducts/{id}/app"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[betaAppLocalizations]": (wrappedValue: fieldsBetaAppLocalizations?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaLicenseAgreements]": (wrappedValue: fieldsBetaLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewDetails]": (wrappedValue: fieldsBetaAppReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appInfos]": (wrappedValue: fieldsAppInfos?.encodeToJSON(), isExplode: false),
            "fields[appClips]": (wrappedValue: fieldsAppClips?.encodeToJSON(), isExplode: false),
            "fields[endUserLicenseAgreements]": (wrappedValue: fieldsEndUserLicenseAgreements?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGroups]": (wrappedValue: fieldsSubscriptionGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterEnabledVersions]": (wrappedValue: fieldsGameCenterEnabledVersions?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPages]": (wrappedValue: fieldsAppCustomProductPages?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[appEvents]": (wrappedValue: fieldsAppEvents?.encodeToJSON(), isExplode: false),
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionGracePeriods]": (wrappedValue: fieldsSubscriptionGracePeriods?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[appEncryptionDeclarations]": (wrappedValue: limitAppEncryptionDeclarations?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersions]": (wrappedValue: limitAppStoreVersions?.encodeToJSON(), isExplode: true),
            "limit[preReleaseVersions]": (wrappedValue: limitPreReleaseVersions?.encodeToJSON(), isExplode: true),
            "limit[betaAppLocalizations]": (wrappedValue: limitBetaAppLocalizations?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
            "limit[appInfos]": (wrappedValue: limitAppInfos?.encodeToJSON(), isExplode: true),
            "limit[appClips]": (wrappedValue: limitAppClips?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchases]": (wrappedValue: limitInAppPurchases?.encodeToJSON(), isExplode: true),
            "limit[subscriptionGroups]": (wrappedValue: limitSubscriptionGroups?.encodeToJSON(), isExplode: true),
            "limit[gameCenterEnabledVersions]": (wrappedValue: limitGameCenterEnabledVersions?.encodeToJSON(), isExplode: true),
            "limit[appCustomProductPages]": (wrappedValue: limitAppCustomProductPages?.encodeToJSON(), isExplode: true),
            "limit[inAppPurchasesV2]": (wrappedValue: limitInAppPurchasesV2?.encodeToJSON(), isExplode: true),
            "limit[promotedPurchases]": (wrappedValue: limitPromotedPurchases?.encodeToJSON(), isExplode: true),
            "limit[appEvents]": (wrappedValue: limitAppEvents?.encodeToJSON(), isExplode: true),
            "limit[reviewSubmissions]": (wrappedValue: limitReviewSubmissions?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppResponse> 
     */
    open class func ciProductsAppGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case number = "number"
        case number2 = "-number"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case number = "number"
        case createddate = "createdDate"
        case starteddate = "startedDate"
        case finisheddate = "finishedDate"
        case sourcecommit = "sourceCommit"
        case destinationcommit = "destinationCommit"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case executionprogress = "executionProgress"
        case completionstatus = "completionStatus"
        case startreason = "startReason"
        case cancelreason = "cancelReason"
        case builds = "builds"
        case workflow = "workflow"
        case product = "product"
        case sourcebranchortag = "sourceBranchOrTag"
        case destinationbranch = "destinationBranch"
        case actions = "actions"
        case pullrequest = "pullRequest"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case description = "description"
        case branchstartcondition = "branchStartCondition"
        case tagstartcondition = "tagStartCondition"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case scheduledstartcondition = "scheduledStartCondition"
        case manualbranchstartcondition = "manualBranchStartCondition"
        case manualtagstartcondition = "manualTagStartCondition"
        case manualpullrequeststartcondition = "manualPullRequestStartCondition"
        case actions = "actions"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case lastmodifieddate = "lastModifiedDate"
        case product = "product"
        case repository = "repository"
        case xcodeversion = "xcodeVersion"
        case macosversion = "macOsVersion"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case producttype = "productType"
        case app = "app"
        case bundleid = "bundleId"
        case workflows = "workflows"
        case primaryrepositories = "primaryRepositories"
        case additionalrepositories = "additionalRepositories"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case title = "title"
        case number = "number"
        case weburl = "webUrl"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcebranchname = "sourceBranchName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationbranchname = "destinationBranchName"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case repository = "repository"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsBuildRunsGetToManyRelated: String, CaseIterable {
        case builds = "builds"
        case workflow = "workflow"
        case product = "product"
        case sourcebranchortag = "sourceBranchOrTag"
        case destinationbranch = "destinationBranch"
        case pullrequest = "pullRequest"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: CiBuildRunsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsBuildRunsGetToManyRelated(id: String, filterBuilds: [String]? = nil, sort: [Sort_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiWorkflows: [FieldsCiWorkflows_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsScmPullRequests: [FieldsScmPullRequests_ciProductsBuildRunsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsBuildRunsGetToManyRelated]? = nil, limitBuilds: Int? = nil) async throws -> CiBuildRunsResponse {
        return try await ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(id: id, filterBuilds: filterBuilds, sort: sort, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsBuilds: fieldsBuilds, fieldsCiWorkflows: fieldsCiWorkflows, fieldsCiProducts: fieldsCiProducts, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmPullRequests: fieldsScmPullRequests, limit: limit, include: include, limitBuilds: limitBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiBuildRunsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsBuildRunsGetToManyRelated(urlString: String) async throws -> CiBuildRunsResponse {
        return try await ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}/buildRuns
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: RequestBuilder<CiBuildRunsResponse> 
     */
    open class func ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(id: String, filterBuilds: [String]? = nil, sort: [Sort_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiBuildRuns: [FieldsCiBuildRuns_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsBuilds: [FieldsBuilds_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiWorkflows: [FieldsCiWorkflows_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsBuildRunsGetToManyRelated]? = nil, fieldsScmPullRequests: [FieldsScmPullRequests_ciProductsBuildRunsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsBuildRunsGetToManyRelated]? = nil, limitBuilds: Int? = nil) -> RequestBuilder<CiBuildRunsResponse> {
        var localVariablePath = "/v1/ciProducts/{id}/buildRuns"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[builds]": (wrappedValue: filterBuilds?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[ciBuildRuns]": (wrappedValue: fieldsCiBuildRuns?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[ciWorkflows]": (wrappedValue: fieldsCiWorkflows?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[scmGitReferences]": (wrappedValue: fieldsScmGitReferences?.encodeToJSON(), isExplode: false),
            "fields[scmPullRequests]": (wrappedValue: fieldsScmPullRequests?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}/buildRuns
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiBuildRunsResponse> 
     */
    open class func ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CiBuildRunsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiBuildRunsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsDeleteInstance(id: String) async throws {
        return try await ciProductsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsDeleteInstance(urlString: String) async throws {
        return try await ciProductsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/ciProducts/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func ciProductsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/ciProducts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/ciProducts/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func ciProductsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterProductType
     */
    public enum FilterProductType_ciProductsGetCollection: String, CaseIterable {
        case app = "APP"
        case framework = "FRAMEWORK"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsGetCollection: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case producttype = "productType"
        case app = "app"
        case bundleid = "bundleId"
        case workflows = "workflows"
        case primaryrepositories = "primaryRepositories"
        case additionalrepositories = "additionalRepositories"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsGetCollection: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsGetCollection: String, CaseIterable {
        case lastaccesseddate = "lastAccessedDate"
        case httpcloneurl = "httpCloneUrl"
        case sshcloneurl = "sshCloneUrl"
        case ownername = "ownerName"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case pullrequests = "pullRequests"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsGetCollection: String, CaseIterable {
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**

     - parameter filterProductType: (query) filter by attribute &#39;productType&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - returns: CiProductsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsGetCollection(filterProductType: [FilterProductType_ciProductsGetCollection]? = nil, filterApp: [String]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsGetCollection]? = nil, fieldsApps: [FieldsApps_ciProductsGetCollection]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsGetCollection]? = nil, limit: Int? = nil, include: [Include_ciProductsGetCollection]? = nil, limitPrimaryRepositories: Int? = nil) async throws -> CiProductsResponse {
        return try await ciProductsGetCollectionWithRequestBuilder(filterProductType: filterProductType, filterApp: filterApp, fieldsCiProducts: fieldsCiProducts, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include, limitPrimaryRepositories: limitPrimaryRepositories).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiProductsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsGetCollection(urlString: String) async throws -> CiProductsResponse {
        return try await ciProductsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterProductType: (query) filter by attribute &#39;productType&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - returns: RequestBuilder<CiProductsResponse> 
     */
    open class func ciProductsGetCollectionWithRequestBuilder(filterProductType: [FilterProductType_ciProductsGetCollection]? = nil, filterApp: [String]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsGetCollection]? = nil, fieldsApps: [FieldsApps_ciProductsGetCollection]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsGetCollection]? = nil, limit: Int? = nil, include: [Include_ciProductsGetCollection]? = nil, limitPrimaryRepositories: Int? = nil) -> RequestBuilder<CiProductsResponse> {
        let localVariablePath = "/v1/ciProducts"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[productType]": (wrappedValue: filterProductType?.encodeToJSON(), isExplode: false),
            "filter[app]": (wrappedValue: filterApp?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[primaryRepositories]": (wrappedValue: limitPrimaryRepositories?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiProductsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiProductsResponse> 
     */
    open class func ciProductsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<CiProductsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiProductsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsGetInstance: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case producttype = "productType"
        case app = "app"
        case bundleid = "bundleId"
        case workflows = "workflows"
        case primaryrepositories = "primaryRepositories"
        case additionalrepositories = "additionalRepositories"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsGetInstance: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsGetInstance: String, CaseIterable {
        case lastaccesseddate = "lastAccessedDate"
        case httpcloneurl = "httpCloneUrl"
        case sshcloneurl = "sshCloneUrl"
        case ownername = "ownerName"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case pullrequests = "pullRequests"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsGetInstance: String, CaseIterable {
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - returns: CiProductResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsGetInstance(id: String, fieldsCiProducts: [FieldsCiProducts_ciProductsGetInstance]? = nil, fieldsApps: [FieldsApps_ciProductsGetInstance]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsGetInstance]? = nil, include: [Include_ciProductsGetInstance]? = nil, limitPrimaryRepositories: Int? = nil) async throws -> CiProductResponse {
        return try await ciProductsGetInstanceWithRequestBuilder(id: id, fieldsCiProducts: fieldsCiProducts, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, include: include, limitPrimaryRepositories: limitPrimaryRepositories).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiProductResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsGetInstance(urlString: String) async throws -> CiProductResponse {
        return try await ciProductsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func ciProductsGetInstanceWithRequestBuilder(id: String, fieldsCiProducts: [FieldsCiProducts_ciProductsGetInstance]? = nil, fieldsApps: [FieldsApps_ciProductsGetInstance]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsGetInstance]? = nil, include: [Include_ciProductsGetInstance]? = nil, limitPrimaryRepositories: Int? = nil) -> RequestBuilder<CiProductResponse> {
        var localVariablePath = "/v1/ciProducts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[primaryRepositories]": (wrappedValue: limitPrimaryRepositories?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiProductResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func ciProductsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<CiProductResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiProductResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsPrimaryRepositoriesGetToManyRelated: String, CaseIterable {
        case lastaccesseddate = "lastAccessedDate"
        case httpcloneurl = "httpCloneUrl"
        case sshcloneurl = "sshCloneUrl"
        case ownername = "ownerName"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case pullrequests = "pullRequests"
    }

    /**
     * enum for parameter fieldsScmProviders
     */
    public enum FieldsScmProviders_ciProductsPrimaryRepositoriesGetToManyRelated: String, CaseIterable {
        case scmprovidertype = "scmProviderType"
        case url = "url"
        case repositories = "repositories"
    }

    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsPrimaryRepositoriesGetToManyRelated: String, CaseIterable {
        case name = "name"
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case repository = "repository"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsPrimaryRepositoriesGetToManyRelated: String, CaseIterable {
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: ScmRepositoriesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsPrimaryRepositoriesGetToManyRelated(id: String, filterId: [String]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, fieldsScmProviders: [FieldsScmProviders_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil) async throws -> ScmRepositoriesResponse {
        return try await ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(id: id, filterId: filterId, fieldsScmRepositories: fieldsScmRepositories, fieldsScmProviders: fieldsScmProviders, fieldsScmGitReferences: fieldsScmGitReferences, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ScmRepositoriesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsPrimaryRepositoriesGetToManyRelated(urlString: String) async throws -> ScmRepositoriesResponse {
        return try await ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}/primaryRepositories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(id: String, filterId: [String]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, fieldsScmProviders: [FieldsScmProviders_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, fieldsScmGitReferences: [FieldsScmGitReferences_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsPrimaryRepositoriesGetToManyRelated]? = nil) -> RequestBuilder<ScmRepositoriesResponse> {
        var localVariablePath = "/v1/ciProducts/{id}/primaryRepositories"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "fields[scmProviders]": (wrappedValue: fieldsScmProviders?.encodeToJSON(), isExplode: false),
            "fields[scmGitReferences]": (wrappedValue: fieldsScmGitReferences?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}/primaryRepositories
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<ScmRepositoriesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case description = "description"
        case branchstartcondition = "branchStartCondition"
        case tagstartcondition = "tagStartCondition"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case scheduledstartcondition = "scheduledStartCondition"
        case manualbranchstartcondition = "manualBranchStartCondition"
        case manualtagstartcondition = "manualTagStartCondition"
        case manualpullrequeststartcondition = "manualPullRequestStartCondition"
        case actions = "actions"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case lastmodifieddate = "lastModifiedDate"
        case product = "product"
        case repository = "repository"
        case xcodeversion = "xcodeVersion"
        case macosversion = "macOsVersion"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case createddate = "createdDate"
        case producttype = "productType"
        case app = "app"
        case bundleid = "bundleId"
        case workflows = "workflows"
        case primaryrepositories = "primaryRepositories"
        case additionalrepositories = "additionalRepositories"
        case buildruns = "buildRuns"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case lastaccesseddate = "lastAccessedDate"
        case httpcloneurl = "httpCloneUrl"
        case sshcloneurl = "sshCloneUrl"
        case ownername = "ownerName"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case pullrequests = "pullRequests"
    }

    /**
     * enum for parameter fieldsCiXcodeVersions
     */
    public enum FieldsCiXcodeVersions_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case version = "version"
        case name = "name"
        case testdestinations = "testDestinations"
        case macosversions = "macOsVersions"
    }

    /**
     * enum for parameter fieldsCiMacOsVersions
     */
    public enum FieldsCiMacOsVersions_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case version = "version"
        case name = "name"
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsWorkflowsGetToManyRelated: String, CaseIterable {
        case product = "product"
        case repository = "repository"
        case xcodeversion = "xcodeVersion"
        case macosversion = "macOsVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CiWorkflowsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsWorkflowsGetToManyRelated(id: String, fieldsCiWorkflows: [FieldsCiWorkflows_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciProductsWorkflowsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsWorkflowsGetToManyRelated]? = nil) async throws -> CiWorkflowsResponse {
        return try await ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(id: id, fieldsCiWorkflows: fieldsCiWorkflows, fieldsCiProducts: fieldsCiProducts, fieldsScmRepositories: fieldsScmRepositories, fieldsCiXcodeVersions: fieldsCiXcodeVersions, fieldsCiMacOsVersions: fieldsCiMacOsVersions, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiWorkflowsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciProductsWorkflowsGetToManyRelated(urlString: String) async throws -> CiWorkflowsResponse {
        return try await ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciProducts/{id}/workflows
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CiWorkflowsResponse> 
     */
    open class func ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(id: String, fieldsCiWorkflows: [FieldsCiWorkflows_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiProducts: [FieldsCiProducts_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsScmRepositories: [FieldsScmRepositories_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciProductsWorkflowsGetToManyRelated]? = nil, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciProductsWorkflowsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_ciProductsWorkflowsGetToManyRelated]? = nil) -> RequestBuilder<CiWorkflowsResponse> {
        var localVariablePath = "/v1/ciProducts/{id}/workflows"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciWorkflows]": (wrappedValue: fieldsCiWorkflows?.encodeToJSON(), isExplode: false),
            "fields[ciProducts]": (wrappedValue: fieldsCiProducts?.encodeToJSON(), isExplode: false),
            "fields[scmRepositories]": (wrappedValue: fieldsScmRepositories?.encodeToJSON(), isExplode: false),
            "fields[ciXcodeVersions]": (wrappedValue: fieldsCiXcodeVersions?.encodeToJSON(), isExplode: false),
            "fields[ciMacOsVersions]": (wrappedValue: fieldsCiMacOsVersions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiWorkflowsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciProducts/{id}/workflows
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiWorkflowsResponse> 
     */
    open class func ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CiWorkflowsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiWorkflowsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
