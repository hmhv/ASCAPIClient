//
// ProfilesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ProfilesAPI {

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesBundleIdGetToOneRelated: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case identifier = "identifier"
        case seedid = "seedId"
        case profiles = "profiles"
        case bundleidcapabilities = "bundleIdCapabilities"
        case app = "app"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BundleIdWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesBundleIdGetToOneRelated(id: String, fieldsBundleIds: [FieldsBundleIds_profilesBundleIdGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> BundleIdWithoutIncludesResponse {
        return try await profilesBundleIdGetToOneRelatedWithRequestBuilder(id: id, fieldsBundleIds: fieldsBundleIds, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BundleIdWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesBundleIdGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> BundleIdWithoutIncludesResponse {
        return try await profilesBundleIdGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/profiles/{id}/bundleId
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BundleIdWithoutIncludesResponse> 
     */
    open class func profilesBundleIdGetToOneRelatedWithRequestBuilder(id: String, fieldsBundleIds: [FieldsBundleIds_profilesBundleIdGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<BundleIdWithoutIncludesResponse> {
        var localVariablePath = "/v1/profiles/{id}/bundleId"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/profiles/{id}/bundleId
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BundleIdWithoutIncludesResponse> 
     */
    open class func profilesBundleIdGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<BundleIdWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesCertificatesGetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case certificatetype = "certificateType"
        case displayname = "displayName"
        case serialnumber = "serialNumber"
        case platform = "platform"
        case expirationdate = "expirationDate"
        case certificatecontent = "certificateContent"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificatesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesCertificatesGetToManyRelated(id: String, fieldsCertificates: [FieldsCertificates_profilesCertificatesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> CertificatesWithoutIncludesResponse {
        return try await profilesCertificatesGetToManyRelatedWithRequestBuilder(id: id, fieldsCertificates: fieldsCertificates, limit: limit, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CertificatesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesCertificatesGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> CertificatesWithoutIncludesResponse {
        return try await profilesCertificatesGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/profiles/{id}/certificates
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificatesWithoutIncludesResponse> 
     */
    open class func profilesCertificatesGetToManyRelatedWithRequestBuilder(id: String, fieldsCertificates: [FieldsCertificates_profilesCertificatesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<CertificatesWithoutIncludesResponse> {
        var localVariablePath = "/v1/profiles/{id}/certificates"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[certificates]": (wrappedValue: fieldsCertificates?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificatesWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/profiles/{id}/certificates
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CertificatesWithoutIncludesResponse> 
     */
    open class func profilesCertificatesGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<CertificatesWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CertificatesWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter profileCreateRequest: (body) Profile representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfileResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesCreateInstance(profileCreateRequest: ProfileCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfileResponse {
        return try await profilesCreateInstanceWithRequestBuilder(profileCreateRequest: profileCreateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfileResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesCreateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfileResponse {
        return try await profilesCreateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v1/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter profileCreateRequest: (body) Profile representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesCreateInstanceWithRequestBuilder(profileCreateRequest: ProfileCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfileResponse> {
        let localVariablePath = "/v1/profiles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: profileCreateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - POST /v1/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesCreateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfileResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesDeleteInstance(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await profilesDeleteInstanceWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesDeleteInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await profilesDeleteInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /v1/profiles/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func profilesDeleteInstanceWithRequestBuilder(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - DELETE /v1/profiles/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func profilesDeleteInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesDevicesGetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case udid = "udid"
        case deviceclass = "deviceClass"
        case status = "status"
        case model = "model"
        case addeddate = "addedDate"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DevicesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesDevicesGetToManyRelated(id: String, fieldsDevices: [FieldsDevices_profilesDevicesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> DevicesWithoutIncludesResponse {
        return try await profilesDevicesGetToManyRelatedWithRequestBuilder(id: id, fieldsDevices: fieldsDevices, limit: limit, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DevicesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesDevicesGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> DevicesWithoutIncludesResponse {
        return try await profilesDevicesGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/profiles/{id}/devices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DevicesWithoutIncludesResponse> 
     */
    open class func profilesDevicesGetToManyRelatedWithRequestBuilder(id: String, fieldsDevices: [FieldsDevices_profilesDevicesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<DevicesWithoutIncludesResponse> {
        var localVariablePath = "/v1/profiles/{id}/devices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[devices]": (wrappedValue: fieldsDevices?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DevicesWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/profiles/{id}/devices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DevicesWithoutIncludesResponse> 
     */
    open class func profilesDevicesGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<DevicesWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DevicesWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter filterProfileType
     */
    public enum FilterProfileType_profilesGetCollection: String, Sendable, CaseIterable {
        case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
        case iosAppStore = "IOS_APP_STORE"
        case iosAppAdhoc = "IOS_APP_ADHOC"
        case iosAppInhouse = "IOS_APP_INHOUSE"
        case macAppDevelopment = "MAC_APP_DEVELOPMENT"
        case macAppStore = "MAC_APP_STORE"
        case macAppDirect = "MAC_APP_DIRECT"
        case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
        case tvosAppStore = "TVOS_APP_STORE"
        case tvosAppAdhoc = "TVOS_APP_ADHOC"
        case tvosAppInhouse = "TVOS_APP_INHOUSE"
        case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
        case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
        case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
    }

    /**
     * enum for parameter filterProfileState
     */
    public enum FilterProfileState_profilesGetCollection: String, Sendable, CaseIterable {
        case active = "ACTIVE"
        case invalid = "INVALID"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_profilesGetCollection: String, Sendable, CaseIterable {
        case name = "name"
        case name2 = "-name"
        case profiletype = "profileType"
        case profiletype2 = "-profileType"
        case profilestate = "profileState"
        case profilestate2 = "-profileState"
        case id = "id"
        case id2 = "-id"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_profilesGetCollection: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case profiletype = "profileType"
        case profilestate = "profileState"
        case profilecontent = "profileContent"
        case uuid = "uuid"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case bundleid = "bundleId"
        case devices = "devices"
        case certificates = "certificates"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesGetCollection: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case identifier = "identifier"
        case seedid = "seedId"
        case profiles = "profiles"
        case bundleidcapabilities = "bundleIdCapabilities"
        case app = "app"
    }

    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesGetCollection: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case udid = "udid"
        case deviceclass = "deviceClass"
        case status = "status"
        case model = "model"
        case addeddate = "addedDate"
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesGetCollection: String, Sendable, CaseIterable {
        case name = "name"
        case certificatetype = "certificateType"
        case displayname = "displayName"
        case serialnumber = "serialNumber"
        case platform = "platform"
        case expirationdate = "expirationDate"
        case certificatecontent = "certificateContent"
    }

    /**
     * enum for parameter include
     */
    public enum Include_profilesGetCollection: String, Sendable, CaseIterable {
        case bundleid = "bundleId"
        case devices = "devices"
        case certificates = "certificates"
    }

    /**

     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterProfileType: (query) filter by attribute &#39;profileType&#39; (optional)
     - parameter filterProfileState: (query) filter by attribute &#39;profileState&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfilesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesGetCollection(filterName: [String]? = nil, filterProfileType: [FilterProfileType_profilesGetCollection]? = nil, filterProfileState: [FilterProfileState_profilesGetCollection]? = nil, filterId: [String]? = nil, sort: [Sort_profilesGetCollection]? = nil, fieldsProfiles: [FieldsProfiles_profilesGetCollection]? = nil, fieldsBundleIds: [FieldsBundleIds_profilesGetCollection]? = nil, fieldsDevices: [FieldsDevices_profilesGetCollection]? = nil, fieldsCertificates: [FieldsCertificates_profilesGetCollection]? = nil, limit: Int? = nil, include: [Include_profilesGetCollection]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfilesResponse {
        return try await profilesGetCollectionWithRequestBuilder(filterName: filterName, filterProfileType: filterProfileType, filterProfileState: filterProfileState, filterId: filterId, sort: sort, fieldsProfiles: fieldsProfiles, fieldsBundleIds: fieldsBundleIds, fieldsDevices: fieldsDevices, fieldsCertificates: fieldsCertificates, limit: limit, include: include, limitCertificates: limitCertificates, limitDevices: limitDevices, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfilesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesGetCollection(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfilesResponse {
        return try await profilesGetCollectionWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterProfileType: (query) filter by attribute &#39;profileType&#39; (optional)
     - parameter filterProfileState: (query) filter by attribute &#39;profileState&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfilesResponse> 
     */
    open class func profilesGetCollectionWithRequestBuilder(filterName: [String]? = nil, filterProfileType: [FilterProfileType_profilesGetCollection]? = nil, filterProfileState: [FilterProfileState_profilesGetCollection]? = nil, filterId: [String]? = nil, sort: [Sort_profilesGetCollection]? = nil, fieldsProfiles: [FieldsProfiles_profilesGetCollection]? = nil, fieldsBundleIds: [FieldsBundleIds_profilesGetCollection]? = nil, fieldsDevices: [FieldsDevices_profilesGetCollection]? = nil, fieldsCertificates: [FieldsCertificates_profilesGetCollection]? = nil, limit: Int? = nil, include: [Include_profilesGetCollection]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfilesResponse> {
        let localVariablePath = "/v1/profiles"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[name]": (wrappedValue: filterName?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[profileType]": (wrappedValue: filterProfileType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[profileState]": (wrappedValue: filterProfileState?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[profiles]": (wrappedValue: fieldsProfiles?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[devices]": (wrappedValue: fieldsDevices?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[certificates]": (wrappedValue: fieldsCertificates?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[certificates]": (wrappedValue: limitCertificates?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[devices]": (wrappedValue: limitDevices?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfilesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfilesResponse> 
     */
    open class func profilesGetCollectionWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfilesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfilesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_profilesGetInstance: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case profiletype = "profileType"
        case profilestate = "profileState"
        case profilecontent = "profileContent"
        case uuid = "uuid"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case bundleid = "bundleId"
        case devices = "devices"
        case certificates = "certificates"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesGetInstance: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case identifier = "identifier"
        case seedid = "seedId"
        case profiles = "profiles"
        case bundleidcapabilities = "bundleIdCapabilities"
        case app = "app"
    }

    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesGetInstance: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case udid = "udid"
        case deviceclass = "deviceClass"
        case status = "status"
        case model = "model"
        case addeddate = "addedDate"
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesGetInstance: String, Sendable, CaseIterable {
        case name = "name"
        case certificatetype = "certificateType"
        case displayname = "displayName"
        case serialnumber = "serialNumber"
        case platform = "platform"
        case expirationdate = "expirationDate"
        case certificatecontent = "certificateContent"
    }

    /**
     * enum for parameter include
     */
    public enum Include_profilesGetInstance: String, Sendable, CaseIterable {
        case bundleid = "bundleId"
        case devices = "devices"
        case certificates = "certificates"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfileResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesGetInstance(id: String, fieldsProfiles: [FieldsProfiles_profilesGetInstance]? = nil, fieldsBundleIds: [FieldsBundleIds_profilesGetInstance]? = nil, fieldsDevices: [FieldsDevices_profilesGetInstance]? = nil, fieldsCertificates: [FieldsCertificates_profilesGetInstance]? = nil, include: [Include_profilesGetInstance]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfileResponse {
        return try await profilesGetInstanceWithRequestBuilder(id: id, fieldsProfiles: fieldsProfiles, fieldsBundleIds: fieldsBundleIds, fieldsDevices: fieldsDevices, fieldsCertificates: fieldsCertificates, include: include, limitCertificates: limitCertificates, limitDevices: limitDevices, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProfileResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func profilesGetInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ProfileResponse {
        return try await profilesGetInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/profiles/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesGetInstanceWithRequestBuilder(id: String, fieldsProfiles: [FieldsProfiles_profilesGetInstance]? = nil, fieldsBundleIds: [FieldsBundleIds_profilesGetInstance]? = nil, fieldsDevices: [FieldsDevices_profilesGetInstance]? = nil, fieldsCertificates: [FieldsCertificates_profilesGetInstance]? = nil, include: [Include_profilesGetInstance]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfileResponse> {
        var localVariablePath = "/v1/profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[profiles]": (wrappedValue: fieldsProfiles?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[devices]": (wrappedValue: fieldsDevices?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[certificates]": (wrappedValue: fieldsCertificates?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[certificates]": (wrappedValue: limitCertificates?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[devices]": (wrappedValue: limitDevices?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/profiles/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesGetInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ProfileResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
