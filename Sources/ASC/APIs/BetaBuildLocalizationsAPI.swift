//
// BetaBuildLocalizationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BetaBuildLocalizationsAPI {

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaBuildLocalizationsBuildGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsBuildGetToOneRelated(id: String, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsBuildGetToOneRelated]? = nil) async throws -> BuildWithoutIncludesResponse {
        return try await betaBuildLocalizationsBuildGetToOneRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsBuildGetToOneRelated(urlString: String) async throws -> BuildWithoutIncludesResponse {
        return try await betaBuildLocalizationsBuildGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/betaBuildLocalizations/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func betaBuildLocalizationsBuildGetToOneRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsBuildGetToOneRelated]? = nil) -> RequestBuilder<BuildWithoutIncludesResponse> {
        var localVariablePath = "/v1/betaBuildLocalizations/{id}/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/betaBuildLocalizations/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func betaBuildLocalizationsBuildGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildWithoutIncludesResponse> {
        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter betaBuildLocalizationCreateRequest: (body) BetaBuildLocalization representation 
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsCreateInstance(betaBuildLocalizationCreateRequest: BetaBuildLocalizationCreateRequest) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsCreateInstanceWithRequestBuilder(betaBuildLocalizationCreateRequest: betaBuildLocalizationCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsCreateInstance(urlString: String) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter betaBuildLocalizationCreateRequest: (body) BetaBuildLocalization representation 
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsCreateInstanceWithRequestBuilder(betaBuildLocalizationCreateRequest: BetaBuildLocalizationCreateRequest) -> RequestBuilder<BetaBuildLocalizationResponse> {
        let localVariablePath = "/v1/betaBuildLocalizations"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaBuildLocalizationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildLocalizationResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsDeleteInstance(id: String) async throws {
        return try await betaBuildLocalizationsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsDeleteInstance(urlString: String) async throws {
        return try await betaBuildLocalizationsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func betaBuildLocalizationsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaBuildLocalizations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func betaBuildLocalizationsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_betaBuildLocalizationsGetCollection: String, CaseIterable {
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaBuildLocalizationsGetCollection: String, CaseIterable {
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaBuildLocalizationsGetCollection: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter filterBuild: (query) filter by id(s) of related &#39;build&#39; (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: BetaBuildLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsGetCollection(filterLocale: [String]? = nil, filterBuild: [String]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_betaBuildLocalizationsGetCollection]? = nil, limit: Int? = nil, include: [Include_betaBuildLocalizationsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsGetCollection]? = nil) async throws -> BetaBuildLocalizationsResponse {
        return try await betaBuildLocalizationsGetCollectionWithRequestBuilder(filterLocale: filterLocale, filterBuild: filterBuild, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, limit: limit, include: include, fieldsBuilds: fieldsBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsGetCollection(urlString: String) async throws -> BetaBuildLocalizationsResponse {
        return try await betaBuildLocalizationsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter filterBuild: (query) filter by id(s) of related &#39;build&#39; (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: RequestBuilder<BetaBuildLocalizationsResponse> 
     */
    open class func betaBuildLocalizationsGetCollectionWithRequestBuilder(filterLocale: [String]? = nil, filterBuild: [String]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_betaBuildLocalizationsGetCollection]? = nil, limit: Int? = nil, include: [Include_betaBuildLocalizationsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsGetCollection]? = nil) -> RequestBuilder<BetaBuildLocalizationsResponse> {
        let localVariablePath = "/v1/betaBuildLocalizations"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[locale]": (wrappedValue: filterLocale?.encodeToJSON(), isExplode: false),
            "filter[build]": (wrappedValue: filterBuild?.encodeToJSON(), isExplode: false),
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildLocalizationsResponse> 
     */
    open class func betaBuildLocalizationsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildLocalizationsResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_betaBuildLocalizationsGetInstance: String, CaseIterable {
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaBuildLocalizationsGetInstance: String, CaseIterable {
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaBuildLocalizationsGetInstance: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsGetInstance(id: String, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_betaBuildLocalizationsGetInstance]? = nil, include: [Include_betaBuildLocalizationsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsGetInstance]? = nil) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsGetInstanceWithRequestBuilder(id: id, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, include: include, fieldsBuilds: fieldsBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsGetInstance(urlString: String) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsGetInstanceWithRequestBuilder(id: String, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_betaBuildLocalizationsGetInstance]? = nil, include: [Include_betaBuildLocalizationsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_betaBuildLocalizationsGetInstance]? = nil) -> RequestBuilder<BetaBuildLocalizationResponse> {
        var localVariablePath = "/v1/betaBuildLocalizations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildLocalizationResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaBuildLocalizationUpdateRequest: (body) BetaBuildLocalization representation 
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsUpdateInstance(id: String, betaBuildLocalizationUpdateRequest: BetaBuildLocalizationUpdateRequest) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsUpdateInstanceWithRequestBuilder(id: id, betaBuildLocalizationUpdateRequest: betaBuildLocalizationUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaBuildLocalizationsUpdateInstance(urlString: String) async throws -> BetaBuildLocalizationResponse {
        return try await betaBuildLocalizationsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaBuildLocalizationUpdateRequest: (body) BetaBuildLocalization representation 
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsUpdateInstanceWithRequestBuilder(id: String, betaBuildLocalizationUpdateRequest: BetaBuildLocalizationUpdateRequest) -> RequestBuilder<BetaBuildLocalizationResponse> {
        var localVariablePath = "/v1/betaBuildLocalizations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaBuildLocalizationUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/betaBuildLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildLocalizationResponse> 
     */
    open class func betaBuildLocalizationsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildLocalizationResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }
}
