//
// CiTestResultsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CiTestResultsAPI {

    /**
     * enum for parameter fieldsCiTestResults
     */
    public enum FieldsCiTestResults_ciTestResultsGetInstance: String, CaseIterable {
        case classname = "className"
        case destinationtestresults = "destinationTestResults"
        case filesource = "fileSource"
        case message = "message"
        case name = "name"
        case status = "status"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - returns: CiTestResultResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciTestResultsGetInstance(id: String, fieldsCiTestResults: [FieldsCiTestResults_ciTestResultsGetInstance]? = nil) async throws -> CiTestResultResponse {
        return try await ciTestResultsGetInstanceWithRequestBuilder(id: id, fieldsCiTestResults: fieldsCiTestResults).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiTestResultResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciTestResultsGetInstance(urlString: String) async throws -> CiTestResultResponse {
        return try await ciTestResultsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/ciTestResults/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - returns: RequestBuilder<CiTestResultResponse> 
     */
    open class func ciTestResultsGetInstanceWithRequestBuilder(id: String, fieldsCiTestResults: [FieldsCiTestResults_ciTestResultsGetInstance]? = nil) -> RequestBuilder<CiTestResultResponse> {
        var localVariablePath = "/v1/ciTestResults/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciTestResults]": (wrappedValue: fieldsCiTestResults?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiTestResultResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/ciTestResults/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiTestResultResponse> 
     */
    open class func ciTestResultsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<CiTestResultResponse> {
        let localVariableRequestBuilder: RequestBuilder<CiTestResultResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }
}
