//
// TerritoryAvailabilitiesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TerritoryAvailabilitiesAPI {

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter territoryAvailabilityUpdateRequest: (body) TerritoryAvailability representation 
     - returns: TerritoryAvailabilityResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func territoryAvailabilitiesUpdateInstance(id: String, territoryAvailabilityUpdateRequest: TerritoryAvailabilityUpdateRequest) async throws -> TerritoryAvailabilityResponse {
        return try await territoryAvailabilitiesUpdateInstanceWithRequestBuilder(id: id, territoryAvailabilityUpdateRequest: territoryAvailabilityUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: TerritoryAvailabilityResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func territoryAvailabilitiesUpdateInstance(urlString: String) async throws -> TerritoryAvailabilityResponse {
        return try await territoryAvailabilitiesUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/territoryAvailabilities/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter territoryAvailabilityUpdateRequest: (body) TerritoryAvailability representation 
     - returns: RequestBuilder<TerritoryAvailabilityResponse> 
     */
    open class func territoryAvailabilitiesUpdateInstanceWithRequestBuilder(id: String, territoryAvailabilityUpdateRequest: TerritoryAvailabilityUpdateRequest) -> RequestBuilder<TerritoryAvailabilityResponse> {
        var localVariablePath = "/v1/territoryAvailabilities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: territoryAvailabilityUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TerritoryAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/territoryAvailabilities/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<TerritoryAvailabilityResponse> 
     */
    open class func territoryAvailabilitiesUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<TerritoryAvailabilityResponse> {
        let localVariableRequestBuilder: RequestBuilder<TerritoryAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
