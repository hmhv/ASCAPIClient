//
// GameCenterMatchmakingQueuesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GameCenterMatchmakingQueuesAPI {

    /**

     - parameter gameCenterMatchmakingQueueCreateRequest: (body) GameCenterMatchmakingQueue representation 
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesCreateInstance(gameCenterMatchmakingQueueCreateRequest: GameCenterMatchmakingQueueCreateRequest) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesCreateInstanceWithRequestBuilder(gameCenterMatchmakingQueueCreateRequest: gameCenterMatchmakingQueueCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesCreateInstance(urlString: String) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/gameCenterMatchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter gameCenterMatchmakingQueueCreateRequest: (body) GameCenterMatchmakingQueue representation 
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesCreateInstanceWithRequestBuilder(gameCenterMatchmakingQueueCreateRequest: GameCenterMatchmakingQueueCreateRequest) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        let localVariablePath = "/v1/gameCenterMatchmakingQueues"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterMatchmakingQueueCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/gameCenterMatchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesDeleteInstance(id: String) async throws {
        return try await gameCenterMatchmakingQueuesDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesDeleteInstance(urlString: String) async throws {
        return try await gameCenterMatchmakingQueuesDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterMatchmakingQueuesDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterMatchmakingQueuesDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case averagenumberofrequests = "averageNumberOfRequests"
        case averagenumberofrequests2 = "-averageNumberOfRequests"
        case count = "count"
        case count2 = "-count"
        case p50numberofrequests = "p50NumberOfRequests"
        case p50numberofrequests2 = "-p50NumberOfRequests"
        case p95numberofrequests = "p95NumberOfRequests"
        case p95numberofrequests2 = "-p95NumberOfRequests"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, filterGameCenterDetail: filterGameCenterDetail, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingQueues
     */
    public enum FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetCollection: String, CaseIterable {
        case classicmatchmakingbundleids = "classicMatchmakingBundleIds"
        case experimentruleset = "experimentRuleSet"
        case referencename = "referenceName"
        case ruleset = "ruleSet"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterMatchmakingQueuesGetCollection: String, CaseIterable {
        case experimentruleset = "experimentRuleSet"
        case ruleset = "ruleSet"
    }

    /**

     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterMatchmakingQueuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesGetCollection(fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingQueuesGetCollection]? = nil) async throws -> GameCenterMatchmakingQueuesResponse {
        return try await gameCenterMatchmakingQueuesGetCollectionWithRequestBuilder(fieldsGameCenterMatchmakingQueues: fieldsGameCenterMatchmakingQueues, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesGetCollection(urlString: String) async throws -> GameCenterMatchmakingQueuesResponse {
        return try await gameCenterMatchmakingQueuesGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueuesResponse> 
     */
    open class func gameCenterMatchmakingQueuesGetCollectionWithRequestBuilder(fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingQueuesGetCollection]? = nil) -> RequestBuilder<GameCenterMatchmakingQueuesResponse> {
        let localVariablePath = "/v1/gameCenterMatchmakingQueues"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingQueues]": (wrappedValue: fieldsGameCenterMatchmakingQueues?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueuesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueuesResponse> 
     */
    open class func gameCenterMatchmakingQueuesGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueuesResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueuesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingQueues
     */
    public enum FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetInstance: String, CaseIterable {
        case classicmatchmakingbundleids = "classicMatchmakingBundleIds"
        case experimentruleset = "experimentRuleSet"
        case referencename = "referenceName"
        case ruleset = "ruleSet"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterMatchmakingQueuesGetInstance: String, CaseIterable {
        case experimentruleset = "experimentRuleSet"
        case ruleset = "ruleSet"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesGetInstance(id: String, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetInstance]? = nil, include: [Include_gameCenterMatchmakingQueuesGetInstance]? = nil) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesGetInstanceWithRequestBuilder(id: id, fieldsGameCenterMatchmakingQueues: fieldsGameCenterMatchmakingQueues, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesGetInstance(urlString: String) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesGetInstanceWithRequestBuilder(id: String, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingQueuesGetInstance]? = nil, include: [Include_gameCenterMatchmakingQueuesGetInstance]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingQueues]": (wrappedValue: fieldsGameCenterMatchmakingQueues?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case averagenumberofrequests = "averageNumberOfRequests"
        case averagenumberofrequests2 = "-averageNumberOfRequests"
        case count = "count"
        case count2 = "-count"
        case p50numberofrequests = "p50NumberOfRequests"
        case p50numberofrequests2 = "-p50NumberOfRequests"
        case p95numberofrequests = "p95NumberOfRequests"
        case p95numberofrequests2 = "-p95NumberOfRequests"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, filterGameCenterDetail: filterGameCenterDetail, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics: String, CaseIterable {
        case averageplayercount = "averagePlayerCount"
        case averageplayercount2 = "-averagePlayerCount"
        case count = "count"
        case count2 = "-count"
        case p50playercount = "p50PlayerCount"
        case p50playercount2 = "-p50PlayerCount"
        case p95playercount = "p95PlayerCount"
        case p95playercount2 = "-p95PlayerCount"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingSessionsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics]? = nil) async throws -> GameCenterMatchmakingSessionsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingSessionsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingSessionsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterMatchmakingQueueUpdateRequest: (body) GameCenterMatchmakingQueue representation 
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesUpdateInstance(id: String, gameCenterMatchmakingQueueUpdateRequest: GameCenterMatchmakingQueueUpdateRequest) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesUpdateInstanceWithRequestBuilder(id: id, gameCenterMatchmakingQueueUpdateRequest: gameCenterMatchmakingQueueUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesUpdateInstance(urlString: String) async throws -> GameCenterMatchmakingQueueResponse {
        return try await gameCenterMatchmakingQueuesUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterMatchmakingQueueUpdateRequest: (body) GameCenterMatchmakingQueue representation 
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesUpdateInstanceWithRequestBuilder(id: String, gameCenterMatchmakingQueueUpdateRequest: GameCenterMatchmakingQueueUpdateRequest) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterMatchmakingQueueUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterMatchmakingQueues/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueResponse> 
     */
    open class func gameCenterMatchmakingQueuesUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
