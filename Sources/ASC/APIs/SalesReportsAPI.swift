//
// SalesReportsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SalesReportsAPI {

    /**
     * enum for parameter filterReportType
     */
    public enum FilterReportType_salesReportsGetCollection: String, Sendable, CaseIterable {
        case sales = "SALES"
        case preOrder = "PRE_ORDER"
        case newsstand = "NEWSSTAND"
        case subscription = "SUBSCRIPTION"
        case subscriptionEvent = "SUBSCRIPTION_EVENT"
        case subscriber = "SUBSCRIBER"
        case subscriptionOfferCodeRedemption = "SUBSCRIPTION_OFFER_CODE_REDEMPTION"
        case installs = "INSTALLS"
        case firstAnnual = "FIRST_ANNUAL"
        case winBackEligibility = "WIN_BACK_ELIGIBILITY"
    }

    /**
     * enum for parameter filterReportSubType
     */
    public enum FilterReportSubType_salesReportsGetCollection: String, Sendable, CaseIterable {
        case summary = "SUMMARY"
        case detailed = "DETAILED"
        case summaryInstallType = "SUMMARY_INSTALL_TYPE"
        case summaryTerritory = "SUMMARY_TERRITORY"
        case summaryChannel = "SUMMARY_CHANNEL"
    }

    /**
     * enum for parameter filterFrequency
     */
    public enum FilterFrequency_salesReportsGetCollection: String, Sendable, CaseIterable {
        case daily = "DAILY"
        case weekly = "WEEKLY"
        case monthly = "MONTHLY"
        case yearly = "YEARLY"
    }

    /**

     - parameter filterVendorNumber: (query) filter by attribute &#39;vendorNumber&#39; 
     - parameter filterReportType: (query) filter by attribute &#39;reportType&#39; 
     - parameter filterReportSubType: (query) filter by attribute &#39;reportSubType&#39; 
     - parameter filterFrequency: (query) filter by attribute &#39;frequency&#39; 
     - parameter filterReportDate: (query) filter by attribute &#39;reportDate&#39; (optional)
     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func salesReportsGetCollection(filterVendorNumber: [String], filterReportType: [FilterReportType_salesReportsGetCollection], filterReportSubType: [FilterReportSubType_salesReportsGetCollection], filterFrequency: [FilterFrequency_salesReportsGetCollection], filterReportDate: [String]? = nil, filterVersion: [String]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> URL {
        return try await salesReportsGetCollectionWithRequestBuilder(filterVendorNumber: filterVendorNumber, filterReportType: filterReportType, filterReportSubType: filterReportSubType, filterFrequency: filterFrequency, filterReportDate: filterReportDate, filterVersion: filterVersion, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func salesReportsGetCollection(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> URL {
        return try await salesReportsGetCollectionWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/salesReports
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterVendorNumber: (query) filter by attribute &#39;vendorNumber&#39; 
     - parameter filterReportType: (query) filter by attribute &#39;reportType&#39; 
     - parameter filterReportSubType: (query) filter by attribute &#39;reportSubType&#39; 
     - parameter filterFrequency: (query) filter by attribute &#39;frequency&#39; 
     - parameter filterReportDate: (query) filter by attribute &#39;reportDate&#39; (optional)
     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<URL> 
     */
    open class func salesReportsGetCollectionWithRequestBuilder(filterVendorNumber: [String], filterReportType: [FilterReportType_salesReportsGetCollection], filterReportSubType: [FilterReportSubType_salesReportsGetCollection], filterFrequency: [FilterFrequency_salesReportsGetCollection], filterReportDate: [String]? = nil, filterVersion: [String]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<URL> {
        let localVariablePath = "/v1/salesReports"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[vendorNumber]": (wrappedValue: filterVendorNumber.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[reportType]": (wrappedValue: filterReportType.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[reportSubType]": (wrappedValue: filterReportSubType.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[frequency]": (wrappedValue: filterFrequency.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[reportDate]": (wrappedValue: filterReportDate?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[version]": (wrappedValue: filterVersion?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/salesReports
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<URL> 
     */
    open class func salesReportsGetCollectionWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<URL> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
