//
// AppStoreVersionExperimentTreatmentLocalizationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppStoreVersionExperimentTreatmentLocalizationsAPI {

    /**
     * enum for parameter filterPreviewType
     */
    public enum FilterPreviewType_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case iphone67 = "IPHONE_67"
        case iphone61 = "IPHONE_61"
        case iphone65 = "IPHONE_65"
        case iphone58 = "IPHONE_58"
        case iphone55 = "IPHONE_55"
        case iphone47 = "IPHONE_47"
        case iphone40 = "IPHONE_40"
        case iphone35 = "IPHONE_35"
        case ipadPro3gen129 = "IPAD_PRO_3GEN_129"
        case ipadPro3gen11 = "IPAD_PRO_3GEN_11"
        case ipadPro129 = "IPAD_PRO_129"
        case ipad105 = "IPAD_105"
        case ipad97 = "IPAD_97"
        case desktop = "DESKTOP"
        case appleTv = "APPLE_TV"
        case appleVisionPro = "APPLE_VISION_PRO"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageLocalizations
     */
    public enum FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case locale = "locale"
        case promotionaltext = "promotionalText"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatmentLocalizations
     */
    public enum FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversionexperimenttreatment = "appStoreVersionExperimentTreatment"
        case locale = "locale"
    }

    /**
     * enum for parameter fieldsAppPreviews
     */
    public enum FieldsAppPreviews_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case apppreviewset = "appPreviewSet"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case mimetype = "mimeType"
        case previewframetimecode = "previewFrameTimeCode"
        case previewimage = "previewImage"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
        case videourl = "videoUrl"
    }

    /**
     * enum for parameter fieldsAppPreviewSets
     */
    public enum FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case apppreviews = "appPreviews"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case previewtype = "previewType"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case apppreviews = "appPreviews"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPreviewType: (query) filter by attribute &#39;previewType&#39; (optional)
     - parameter filterAppCustomProductPageLocalization: (query) filter by id(s) of related &#39;appCustomProductPageLocalization&#39; (optional)
     - parameter filterAppStoreVersionLocalization: (query) filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)
     - parameter fieldsAppCustomProductPageLocalizations: (query) the fields to include for returned resources of type appCustomProductPageLocalizations (optional)
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter fieldsAppPreviews: (query) the fields to include for returned resources of type appPreviews (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppPreviews: (query) maximum number of related appPreviews returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppPreviewSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated(id: String, filterPreviewType: [FilterPreviewType_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, filterAppCustomProductPageLocalization: [String]? = nil, filterAppStoreVersionLocalization: [String]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppPreviews: [FieldsAppPreviews_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, limit: Int? = nil, limitAppPreviews: Int? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil) async throws -> AppPreviewSetsResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedWithRequestBuilder(id: id, filterPreviewType: filterPreviewType, filterAppCustomProductPageLocalization: filterAppCustomProductPageLocalization, filterAppStoreVersionLocalization: filterAppStoreVersionLocalization, fieldsAppCustomProductPageLocalizations: fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations: fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppPreviews: fieldsAppPreviews, fieldsAppPreviewSets: fieldsAppPreviewSets, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limit: limit, limitAppPreviews: limitAppPreviews, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppPreviewSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated(urlString: String) async throws -> AppPreviewSetsResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPreviewType: (query) filter by attribute &#39;previewType&#39; (optional)
     - parameter filterAppCustomProductPageLocalization: (query) filter by id(s) of related &#39;appCustomProductPageLocalization&#39; (optional)
     - parameter filterAppStoreVersionLocalization: (query) filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)
     - parameter fieldsAppCustomProductPageLocalizations: (query) the fields to include for returned resources of type appCustomProductPageLocalizations (optional)
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter fieldsAppPreviews: (query) the fields to include for returned resources of type appPreviews (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppPreviews: (query) maximum number of related appPreviews returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppPreviewSetsResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedWithRequestBuilder(id: String, filterPreviewType: [FilterPreviewType_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, filterAppCustomProductPageLocalization: [String]? = nil, filterAppStoreVersionLocalization: [String]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppPreviews: [FieldsAppPreviews_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil, limit: Int? = nil, limitAppPreviews: Int? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated]? = nil) -> RequestBuilder<AppPreviewSetsResponse> {
        var localVariablePath = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[previewType]": (wrappedValue: filterPreviewType?.encodeToJSON(), isExplode: false),
            "filter[appCustomProductPageLocalization]": (wrappedValue: filterAppCustomProductPageLocalization?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersionLocalization]": (wrappedValue: filterAppStoreVersionLocalization?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPageLocalizations]": (wrappedValue: fieldsAppCustomProductPageLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperimentTreatmentLocalizations]": (wrappedValue: fieldsAppStoreVersionExperimentTreatmentLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appPreviews]": (wrappedValue: fieldsAppPreviews?.encodeToJSON(), isExplode: false),
            "fields[appPreviewSets]": (wrappedValue: fieldsAppPreviewSets?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appPreviews]": (wrappedValue: limitAppPreviews?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppPreviewSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppPreviewSetsResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppPreviewSetsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppPreviewSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterScreenshotDisplayType
     */
    public enum FilterScreenshotDisplayType_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case appIphone67 = "APP_IPHONE_67"
        case appIphone61 = "APP_IPHONE_61"
        case appIphone65 = "APP_IPHONE_65"
        case appIphone58 = "APP_IPHONE_58"
        case appIphone55 = "APP_IPHONE_55"
        case appIphone47 = "APP_IPHONE_47"
        case appIphone40 = "APP_IPHONE_40"
        case appIphone35 = "APP_IPHONE_35"
        case appIpadPro3gen129 = "APP_IPAD_PRO_3GEN_129"
        case appIpadPro3gen11 = "APP_IPAD_PRO_3GEN_11"
        case appIpadPro129 = "APP_IPAD_PRO_129"
        case appIpad105 = "APP_IPAD_105"
        case appIpad97 = "APP_IPAD_97"
        case appDesktop = "APP_DESKTOP"
        case appWatchUltra = "APP_WATCH_ULTRA"
        case appWatchSeries7 = "APP_WATCH_SERIES_7"
        case appWatchSeries4 = "APP_WATCH_SERIES_4"
        case appWatchSeries3 = "APP_WATCH_SERIES_3"
        case appAppleTv = "APP_APPLE_TV"
        case appAppleVisionPro = "APP_APPLE_VISION_PRO"
        case imessageAppIphone67 = "IMESSAGE_APP_IPHONE_67"
        case imessageAppIphone61 = "IMESSAGE_APP_IPHONE_61"
        case imessageAppIphone65 = "IMESSAGE_APP_IPHONE_65"
        case imessageAppIphone58 = "IMESSAGE_APP_IPHONE_58"
        case imessageAppIphone55 = "IMESSAGE_APP_IPHONE_55"
        case imessageAppIphone47 = "IMESSAGE_APP_IPHONE_47"
        case imessageAppIphone40 = "IMESSAGE_APP_IPHONE_40"
        case imessageAppIpadPro3gen129 = "IMESSAGE_APP_IPAD_PRO_3GEN_129"
        case imessageAppIpadPro3gen11 = "IMESSAGE_APP_IPAD_PRO_3GEN_11"
        case imessageAppIpadPro129 = "IMESSAGE_APP_IPAD_PRO_129"
        case imessageAppIpad105 = "IMESSAGE_APP_IPAD_105"
        case imessageAppIpad97 = "IMESSAGE_APP_IPAD_97"
    }

    /**
     * enum for parameter fieldsAppScreenshotSets
     */
    public enum FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case appscreenshots = "appScreenshots"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case screenshotdisplaytype = "screenshotDisplayType"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageLocalizations
     */
    public enum FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case locale = "locale"
        case promotionaltext = "promotionalText"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatmentLocalizations
     */
    public enum FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversionexperimenttreatment = "appStoreVersionExperimentTreatment"
        case locale = "locale"
    }

    /**
     * enum for parameter fieldsAppScreenshots
     */
    public enum FieldsAppScreenshots_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case appscreenshotset = "appScreenshotSet"
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case appscreenshots = "appScreenshots"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterScreenshotDisplayType: (query) filter by attribute &#39;screenshotDisplayType&#39; (optional)
     - parameter filterAppCustomProductPageLocalization: (query) filter by id(s) of related &#39;appCustomProductPageLocalization&#39; (optional)
     - parameter filterAppStoreVersionLocalization: (query) filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppCustomProductPageLocalizations: (query) the fields to include for returned resources of type appCustomProductPageLocalizations (optional)
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter fieldsAppScreenshots: (query) the fields to include for returned resources of type appScreenshots (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppScreenshots: (query) maximum number of related appScreenshots returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppScreenshotSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated(id: String, filterScreenshotDisplayType: [FilterScreenshotDisplayType_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, filterAppCustomProductPageLocalization: [String]? = nil, filterAppStoreVersionLocalization: [String]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppScreenshots: [FieldsAppScreenshots_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, limit: Int? = nil, limitAppScreenshots: Int? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil) async throws -> AppScreenshotSetsResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedWithRequestBuilder(id: id, filterScreenshotDisplayType: filterScreenshotDisplayType, filterAppCustomProductPageLocalization: filterAppCustomProductPageLocalization, filterAppStoreVersionLocalization: filterAppStoreVersionLocalization, fieldsAppScreenshotSets: fieldsAppScreenshotSets, fieldsAppCustomProductPageLocalizations: fieldsAppCustomProductPageLocalizations, fieldsAppStoreVersionExperimentTreatmentLocalizations: fieldsAppStoreVersionExperimentTreatmentLocalizations, fieldsAppScreenshots: fieldsAppScreenshots, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limit: limit, limitAppScreenshots: limitAppScreenshots, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppScreenshotSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated(urlString: String) async throws -> AppScreenshotSetsResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterScreenshotDisplayType: (query) filter by attribute &#39;screenshotDisplayType&#39; (optional)
     - parameter filterAppCustomProductPageLocalization: (query) filter by id(s) of related &#39;appCustomProductPageLocalization&#39; (optional)
     - parameter filterAppStoreVersionLocalization: (query) filter by id(s) of related &#39;appStoreVersionLocalization&#39; (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppCustomProductPageLocalizations: (query) the fields to include for returned resources of type appCustomProductPageLocalizations (optional)
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter fieldsAppScreenshots: (query) the fields to include for returned resources of type appScreenshots (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppScreenshots: (query) maximum number of related appScreenshots returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppScreenshotSetsResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedWithRequestBuilder(id: String, filterScreenshotDisplayType: [FilterScreenshotDisplayType_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, filterAppCustomProductPageLocalization: [String]? = nil, filterAppStoreVersionLocalization: [String]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppCustomProductPageLocalizations: [FieldsAppCustomProductPageLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppScreenshots: [FieldsAppScreenshots_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil, limit: Int? = nil, limitAppScreenshots: Int? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated]? = nil) -> RequestBuilder<AppScreenshotSetsResponse> {
        var localVariablePath = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[screenshotDisplayType]": (wrappedValue: filterScreenshotDisplayType?.encodeToJSON(), isExplode: false),
            "filter[appCustomProductPageLocalization]": (wrappedValue: filterAppCustomProductPageLocalization?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersionLocalization]": (wrappedValue: filterAppStoreVersionLocalization?.encodeToJSON(), isExplode: false),
            "fields[appScreenshotSets]": (wrappedValue: fieldsAppScreenshotSets?.encodeToJSON(), isExplode: false),
            "fields[appCustomProductPageLocalizations]": (wrappedValue: fieldsAppCustomProductPageLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperimentTreatmentLocalizations]": (wrappedValue: fieldsAppStoreVersionExperimentTreatmentLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appScreenshots]": (wrappedValue: fieldsAppScreenshots?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "limit[appScreenshots]": (wrappedValue: limitAppScreenshots?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppScreenshotSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppScreenshotSetsResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppScreenshotSetsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppScreenshotSetsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter appStoreVersionExperimentTreatmentLocalizationCreateRequest: (body) AppStoreVersionExperimentTreatmentLocalization representation 
     - returns: AppStoreVersionExperimentTreatmentLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsCreateInstance(appStoreVersionExperimentTreatmentLocalizationCreateRequest: AppStoreVersionExperimentTreatmentLocalizationCreateRequest) async throws -> AppStoreVersionExperimentTreatmentLocalizationResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsCreateInstanceWithRequestBuilder(appStoreVersionExperimentTreatmentLocalizationCreateRequest: appStoreVersionExperimentTreatmentLocalizationCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionExperimentTreatmentLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsCreateInstance(urlString: String) async throws -> AppStoreVersionExperimentTreatmentLocalizationResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/appStoreVersionExperimentTreatmentLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter appStoreVersionExperimentTreatmentLocalizationCreateRequest: (body) AppStoreVersionExperimentTreatmentLocalization representation 
     - returns: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsCreateInstanceWithRequestBuilder(appStoreVersionExperimentTreatmentLocalizationCreateRequest: AppStoreVersionExperimentTreatmentLocalizationCreateRequest) -> RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        let localVariablePath = "/v1/appStoreVersionExperimentTreatmentLocalizations"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionExperimentTreatmentLocalizationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/appStoreVersionExperimentTreatmentLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsDeleteInstance(id: String) async throws {
        return try await appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsDeleteInstance(urlString: String) async throws {
        return try await appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatmentLocalizations
     */
    public enum FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsGetInstance: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversionexperimenttreatment = "appStoreVersionExperimentTreatment"
        case locale = "locale"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionExperimentTreatmentLocalizationsGetInstance: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversionexperimenttreatment = "appStoreVersionExperimentTreatment"
    }

    /**
     * enum for parameter fieldsAppScreenshotSets
     */
    public enum FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case appscreenshots = "appScreenshots"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case screenshotdisplaytype = "screenshotDisplayType"
    }

    /**
     * enum for parameter fieldsAppPreviewSets
     */
    public enum FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance: String, CaseIterable {
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case apppreviews = "appPreviews"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case previewtype = "previewType"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter limitAppPreviewSets: (query) maximum number of related appPreviewSets returned (when they are included) (optional)
     - parameter limitAppScreenshotSets: (query) maximum number of related appScreenshotSets returned (when they are included) (optional)
     - returns: AppStoreVersionExperimentTreatmentLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsGetInstance(id: String, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, limitAppPreviewSets: Int? = nil, limitAppScreenshotSets: Int? = nil) async throws -> AppStoreVersionExperimentTreatmentLocalizationResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsGetInstanceWithRequestBuilder(id: id, fieldsAppStoreVersionExperimentTreatmentLocalizations: fieldsAppStoreVersionExperimentTreatmentLocalizations, include: include, fieldsAppScreenshotSets: fieldsAppScreenshotSets, fieldsAppPreviewSets: fieldsAppPreviewSets, limitAppPreviewSets: limitAppPreviewSets, limitAppScreenshotSets: limitAppScreenshotSets).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionExperimentTreatmentLocalizationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionExperimentTreatmentLocalizationsGetInstance(urlString: String) async throws -> AppStoreVersionExperimentTreatmentLocalizationResponse {
        return try await appStoreVersionExperimentTreatmentLocalizationsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperimentTreatmentLocalizations: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter limitAppPreviewSets: (query) maximum number of related appPreviewSets returned (when they are included) (optional)
     - parameter limitAppScreenshotSets: (query) maximum number of related appScreenshotSets returned (when they are included) (optional)
     - returns: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsGetInstanceWithRequestBuilder(id: String, fieldsAppStoreVersionExperimentTreatmentLocalizations: [FieldsAppStoreVersionExperimentTreatmentLocalizations_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, include: [Include_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionExperimentTreatmentLocalizationsGetInstance]? = nil, limitAppPreviewSets: Int? = nil, limitAppScreenshotSets: Int? = nil) -> RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        var localVariablePath = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionExperimentTreatmentLocalizations]": (wrappedValue: fieldsAppStoreVersionExperimentTreatmentLocalizations?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[appScreenshotSets]": (wrappedValue: fieldsAppScreenshotSets?.encodeToJSON(), isExplode: false),
            "fields[appPreviewSets]": (wrappedValue: fieldsAppPreviewSets?.encodeToJSON(), isExplode: false),
            "limit[appPreviewSets]": (wrappedValue: limitAppPreviewSets?.encodeToJSON(), isExplode: true),
            "limit[appScreenshotSets]": (wrappedValue: limitAppScreenshotSets?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> 
     */
    open class func appStoreVersionExperimentTreatmentLocalizationsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentTreatmentLocalizationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
