//
// SubscriptionPromotionalOffersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubscriptionPromotionalOffersAPI {

    /**

     - parameter subscriptionPromotionalOfferCreateRequest: (body) SubscriptionPromotionalOffer representation 
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersCreateInstance(subscriptionPromotionalOfferCreateRequest: SubscriptionPromotionalOfferCreateRequest) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersCreateInstanceWithRequestBuilder(subscriptionPromotionalOfferCreateRequest: subscriptionPromotionalOfferCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersCreateInstance(urlString: String) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/subscriptionPromotionalOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter subscriptionPromotionalOfferCreateRequest: (body) SubscriptionPromotionalOffer representation 
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersCreateInstanceWithRequestBuilder(subscriptionPromotionalOfferCreateRequest: SubscriptionPromotionalOfferCreateRequest) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        let localVariablePath = "/v1/subscriptionPromotionalOffers"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionPromotionalOfferCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/subscriptionPromotionalOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersDeleteInstance(id: String) async throws {
        return try await subscriptionPromotionalOffersDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersDeleteInstance(urlString: String) async throws {
        return try await subscriptionPromotionalOffersDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionPromotionalOffersDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/subscriptionPromotionalOffers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionPromotionalOffersDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionPromotionalOffersGetInstance: String, CaseIterable {
        case name = "name"
        case offercode = "offerCode"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case subscription = "subscription"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOfferPrices
     */
    public enum FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersGetInstance: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionPromotionalOffersGetInstance: String, CaseIterable {
        case subscription = "subscription"
        case prices = "prices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersGetInstance(id: String, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionPromotionalOffersGetInstance]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersGetInstance]? = nil, include: [Include_subscriptionPromotionalOffersGetInstance]? = nil, limitPrices: Int? = nil) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersGetInstanceWithRequestBuilder(id: id, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptionPromotionalOfferPrices: fieldsSubscriptionPromotionalOfferPrices, include: include, limitPrices: limitPrices).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersGetInstance(urlString: String) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersGetInstanceWithRequestBuilder(id: String, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionPromotionalOffersGetInstance]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersGetInstance]? = nil, include: [Include_subscriptionPromotionalOffersGetInstance]? = nil, limitPrices: Int? = nil) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        var localVariablePath = "/v1/subscriptionPromotionalOffers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionPromotionalOffers]": (wrappedValue: fieldsSubscriptionPromotionalOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPromotionalOfferPrices]": (wrappedValue: fieldsSubscriptionPromotionalOfferPrices?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOfferPrices
     */
    public enum FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersPricesGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionPromotionalOffersPricesGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionPromotionalOffersPricesGetToManyRelated: String, CaseIterable {
        case customerprice = "customerPrice"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case territory = "territory"
        case equalizations = "equalizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionPromotionalOffersPricesGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionPromotionalOfferPricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersPricesGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil) async throws -> SubscriptionPromotionalOfferPricesResponse {
        return try await subscriptionPromotionalOffersPricesGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsSubscriptionPromotionalOfferPrices: fieldsSubscriptionPromotionalOfferPrices, fieldsTerritories: fieldsTerritories, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPromotionalOfferPricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersPricesGetToManyRelated(urlString: String) async throws -> SubscriptionPromotionalOfferPricesResponse {
        return try await subscriptionPromotionalOffersPricesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptionPromotionalOffers/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionPromotionalOfferPricesResponse> 
     */
    open class func subscriptionPromotionalOffersPricesGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionPromotionalOffersPricesGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionPromotionalOfferPricesResponse> {
        var localVariablePath = "/v1/subscriptionPromotionalOffers/{id}/prices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPromotionalOfferPrices]": (wrappedValue: fieldsSubscriptionPromotionalOfferPrices?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPricePoints]": (wrappedValue: fieldsSubscriptionPricePoints?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptionPromotionalOffers/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPromotionalOfferPricesResponse> 
     */
    open class func subscriptionPromotionalOffersPricesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPromotionalOfferPricesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionPromotionalOfferUpdateRequest: (body) SubscriptionPromotionalOffer representation 
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersUpdateInstance(id: String, subscriptionPromotionalOfferUpdateRequest: SubscriptionPromotionalOfferUpdateRequest) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersUpdateInstanceWithRequestBuilder(id: id, subscriptionPromotionalOfferUpdateRequest: subscriptionPromotionalOfferUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPromotionalOfferResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionPromotionalOffersUpdateInstance(urlString: String) async throws -> SubscriptionPromotionalOfferResponse {
        return try await subscriptionPromotionalOffersUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionPromotionalOfferUpdateRequest: (body) SubscriptionPromotionalOffer representation 
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersUpdateInstanceWithRequestBuilder(id: String, subscriptionPromotionalOfferUpdateRequest: SubscriptionPromotionalOfferUpdateRequest) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        var localVariablePath = "/v1/subscriptionPromotionalOffers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionPromotionalOfferUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/subscriptionPromotionalOffers/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPromotionalOfferResponse> 
     */
    open class func subscriptionPromotionalOffersUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPromotionalOfferResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOfferResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
