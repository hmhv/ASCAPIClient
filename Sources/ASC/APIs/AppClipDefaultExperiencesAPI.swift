//
// AppClipDefaultExperiencesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppClipDefaultExperiencesAPI {

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case invocationurls = "invocationUrls"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppClipAppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(id: String, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil, include: [Include_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil) async throws -> AppClipAppStoreReviewDetailResponse {
        return try await appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipAppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(urlString: String) async throws -> AppClipAppStoreReviewDetailResponse {
        return try await appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppClipAppStoreReviewDetailResponse> 
     */
    open class func appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil, include: [Include_appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated]? = nil) -> RequestBuilder<AppClipAppStoreReviewDetailResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClipAppStoreReviewDetails]": (wrappedValue: fieldsAppClipAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAppStoreReviewDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipAppStoreReviewDetailResponse> 
     */
    open class func appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipAppStoreReviewDetailResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipAppStoreReviewDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperienceLocalizations
     */
    public enum FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
        case locale = "locale"
        case subtitle = "subtitle"
    }

    /**
     * enum for parameter fieldsAppClipHeaderImages
     */
    public enum FieldsAppClipHeaderImages_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated: String, CaseIterable {
        case appclipdefaultexperiencelocalization = "appClipDefaultExperienceLocalization"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter fieldsAppClipHeaderImages: (query) the fields to include for returned resources of type appClipHeaderImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppClipDefaultExperienceLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(id: String, filterLocale: [String]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, fieldsAppClipHeaderImages: [FieldsAppClipHeaderImages_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil) async throws -> AppClipDefaultExperienceLocalizationsResponse {
        return try await appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithRequestBuilder(id: id, filterLocale: filterLocale, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations: fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipHeaderImages: fieldsAppClipHeaderImages, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(urlString: String) async throws -> AppClipDefaultExperienceLocalizationsResponse {
        return try await appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter fieldsAppClipHeaderImages: (query) the fields to include for returned resources of type appClipHeaderImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppClipDefaultExperienceLocalizationsResponse> 
     */
    open class func appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithRequestBuilder(id: String, filterLocale: [String]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, fieldsAppClipHeaderImages: [FieldsAppClipHeaderImages_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated]? = nil) -> RequestBuilder<AppClipDefaultExperienceLocalizationsResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[locale]": (wrappedValue: filterLocale?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperienceLocalizations]": (wrappedValue: fieldsAppClipDefaultExperienceLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appClipHeaderImages]": (wrappedValue: fieldsAppClipHeaderImages?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceLocalizationsResponse> 
     */
    open class func appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceLocalizationsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter appClipDefaultExperienceCreateRequest: (body) AppClipDefaultExperience representation 
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesCreateInstance(appClipDefaultExperienceCreateRequest: AppClipDefaultExperienceCreateRequest) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesCreateInstanceWithRequestBuilder(appClipDefaultExperienceCreateRequest: appClipDefaultExperienceCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesCreateInstance(urlString: String) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/appClipDefaultExperiences
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter appClipDefaultExperienceCreateRequest: (body) AppClipDefaultExperience representation 
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesCreateInstanceWithRequestBuilder(appClipDefaultExperienceCreateRequest: AppClipDefaultExperienceCreateRequest) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariablePath = "/v1/appClipDefaultExperiences"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipDefaultExperienceCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/appClipDefaultExperiences
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesDeleteInstance(id: String) async throws {
        return try await appClipDefaultExperiencesDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesDeleteInstance(urlString: String) async throws {
        return try await appClipDefaultExperiencesDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func appClipDefaultExperiencesDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appClipDefaultExperiencesDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appClipDefaultExperiencesGetInstance: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipDefaultExperiencesGetInstance: String, CaseIterable {
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesGetInstance: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case invocationurls = "invocationUrls"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appClipDefaultExperiencesGetInstance: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperienceLocalizations
     */
    public enum FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesGetInstance: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
        case locale = "locale"
        case subtitle = "subtitle"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesGetInstance(id: String, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesGetInstance]? = nil, include: [Include_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesGetInstance]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesGetInstanceWithRequestBuilder(id: id, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, include: include, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations: fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations: limitAppClipDefaultExperienceLocalizations).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesGetInstance(urlString: String) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesGetInstanceWithRequestBuilder(id: String, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesGetInstance]? = nil, include: [Include_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appClipDefaultExperiencesGetInstance]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appClipDefaultExperiencesGetInstance]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[appClipAppStoreReviewDetails]": (wrappedValue: fieldsAppClipAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperienceLocalizations]": (wrappedValue: fieldsAppClipDefaultExperienceLocalizations?.encodeToJSON(), isExplode: false),
            "limit[appClipDefaultExperienceLocalizations]": (wrappedValue: limitAppClipDefaultExperienceLocalizations?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case ageratingoverride = "ageRatingOverride"
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case controlversions = "controlVersions"
        case enddate = "endDate"
        case latestcontrolversion = "latestControlVersion"
        case name = "name"
        case platform = "platform"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case versions = "versions"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appversionstate = "appVersionState"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case reviewtype = "reviewType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated: String, CaseIterable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case alternativedistributionpackage = "alternativeDistributionPackage"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, include: [Include_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil) async throws -> AppStoreVersionResponse {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithRequestBuilder(id: id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(urlString: String) async throws -> AppStoreVersionResponse {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithRequestBuilder(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsApps: [FieldsApps_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, include: [Include_appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated]? = nil) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(), isExplode: false),
            "fields[appStoreReviewDetails]": (wrappedValue: fieldsAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionSubmissions]": (wrappedValue: fieldsAppStoreVersionSubmissions?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[routingAppCoverages]": (wrappedValue: fieldsRoutingAppCoverages?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionPhasedReleases]": (wrappedValue: fieldsAppStoreVersionPhasedReleases?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit[appStoreVersionLocalizations]": (wrappedValue: limitAppStoreVersionLocalizations?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperiments]": (wrappedValue: limitAppStoreVersionExperiments?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(id: String) async throws -> AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(urlString: String) async throws -> AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: (body) Related linkage 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(id: String, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest) async throws {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithRequestBuilder(id: id, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(urlString: String) async throws {
        return try await appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithRequestBuilder(id: String, appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appClipDefaultExperienceUpdateRequest: (body) AppClipDefaultExperience representation 
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesUpdateInstance(id: String, appClipDefaultExperienceUpdateRequest: AppClipDefaultExperienceUpdateRequest) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesUpdateInstanceWithRequestBuilder(id: id, appClipDefaultExperienceUpdateRequest: appClipDefaultExperienceUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipDefaultExperiencesUpdateInstance(urlString: String) async throws -> AppClipDefaultExperienceResponse {
        return try await appClipDefaultExperiencesUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appClipDefaultExperienceUpdateRequest: (body) AppClipDefaultExperience representation 
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesUpdateInstanceWithRequestBuilder(id: String, appClipDefaultExperienceUpdateRequest: AppClipDefaultExperienceUpdateRequest) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        var localVariablePath = "/v1/appClipDefaultExperiences/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipDefaultExperienceUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/appClipDefaultExperiences/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appClipDefaultExperiencesUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: nil, requiresAuthentication: true)
    }
}
