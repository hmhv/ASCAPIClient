//
// ActorsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ActorsAPI {

    /**
     * enum for parameter fieldsActors
     */
    public enum FieldsActors_actorsGetCollection: String, CaseIterable {
        case actortype = "actorType"
        case apikeyid = "apiKeyId"
        case useremail = "userEmail"
        case userfirstname = "userFirstName"
        case userlastname = "userLastName"
    }

    /**

     - parameter filterId: (query) filter by id(s) 
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: ActorsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func actorsGetCollection(filterId: [String], fieldsActors: [FieldsActors_actorsGetCollection]? = nil, limit: Int? = nil) async throws -> ActorsResponse {
        return try await actorsGetCollectionWithRequestBuilder(filterId: filterId, fieldsActors: fieldsActors, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ActorsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func actorsGetCollection(urlString: String) async throws -> ActorsResponse {
        return try await actorsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/actors
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterId: (query) filter by id(s) 
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<ActorsResponse> 
     */
    open class func actorsGetCollectionWithRequestBuilder(filterId: [String], fieldsActors: [FieldsActors_actorsGetCollection]? = nil, limit: Int? = nil) -> RequestBuilder<ActorsResponse> {
        let localVariablePath = "/v1/actors"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[id]": (wrappedValue: filterId.encodeToJSON(), isExplode: false),
            "fields[actors]": (wrappedValue: fieldsActors?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActorsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/actors
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ActorsResponse> 
     */
    open class func actorsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<ActorsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActorsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsActors
     */
    public enum FieldsActors_actorsGetInstance: String, CaseIterable {
        case actortype = "actorType"
        case apikeyid = "apiKeyId"
        case useremail = "userEmail"
        case userfirstname = "userFirstName"
        case userlastname = "userLastName"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - returns: ActorResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func actorsGetInstance(id: String, fieldsActors: [FieldsActors_actorsGetInstance]? = nil) async throws -> ActorResponse {
        return try await actorsGetInstanceWithRequestBuilder(id: id, fieldsActors: fieldsActors).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ActorResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func actorsGetInstance(urlString: String) async throws -> ActorResponse {
        return try await actorsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/actors/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsActors: (query) the fields to include for returned resources of type actors (optional)
     - returns: RequestBuilder<ActorResponse> 
     */
    open class func actorsGetInstanceWithRequestBuilder(id: String, fieldsActors: [FieldsActors_actorsGetInstance]? = nil) -> RequestBuilder<ActorResponse> {
        var localVariablePath = "/v1/actors/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[actors]": (wrappedValue: fieldsActors?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActorResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/actors/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ActorResponse> 
     */
    open class func actorsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<ActorResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActorResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
