//
// BuildsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BuildsAPI {

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsAppEncryptionDeclarationGetToOneRelated: String, CaseIterable {
        case appdescription = "appDescription"
        case createddate = "createdDate"
        case usesencryption = "usesEncryption"
        case exempt = "exempt"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case availableonfrenchstore = "availableOnFrenchStore"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case documenturl = "documentUrl"
        case documentname = "documentName"
        case documenttype = "documentType"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case codevalue = "codeValue"
        case app = "app"
        case builds = "builds"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - returns: AppEncryptionDeclarationWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationGetToOneRelated(id: String, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsAppEncryptionDeclarationGetToOneRelated]? = nil) async throws -> AppEncryptionDeclarationWithoutIncludesResponse {
        return try await buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(id: id, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppEncryptionDeclarationWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationGetToOneRelated(urlString: String) async throws -> AppEncryptionDeclarationWithoutIncludesResponse {
        return try await buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - returns: RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(id: String, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsAppEncryptionDeclarationGetToOneRelated]? = nil) -> RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/appEncryptionDeclaration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppEncryptionDeclarationWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: BuildAppEncryptionDeclarationLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationGetToOneRelationship(id: String) async throws -> BuildAppEncryptionDeclarationLinkageResponse {
        return try await buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildAppEncryptionDeclarationLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationGetToOneRelationship(urlString: String) async throws -> BuildAppEncryptionDeclarationLinkageResponse {
        return try await buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/relationships/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> {
        var localVariablePath = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/relationships/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildAppEncryptionDeclarationLinkageRequest: (body) Related linkage 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationship(id: String, buildAppEncryptionDeclarationLinkageRequest: BuildAppEncryptionDeclarationLinkageRequest) async throws {
        return try await buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(id: id, buildAppEncryptionDeclarationLinkageRequest: buildAppEncryptionDeclarationLinkageRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationship(urlString: String) async throws {
        return try await buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/builds/{id}/relationships/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildAppEncryptionDeclarationLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(id: String, buildAppEncryptionDeclarationLinkageRequest: BuildAppEncryptionDeclarationLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildAppEncryptionDeclarationLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/builds/{id}/relationships/appEncryptionDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsAppGetToOneRelated: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - returns: AppWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppGetToOneRelated(id: String, fieldsApps: [FieldsApps_buildsAppGetToOneRelated]? = nil) async throws -> AppWithoutIncludesResponse {
        return try await buildsAppGetToOneRelatedWithRequestBuilder(id: id, fieldsApps: fieldsApps).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppGetToOneRelated(urlString: String) async throws -> AppWithoutIncludesResponse {
        return try await buildsAppGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - returns: RequestBuilder<AppWithoutIncludesResponse> 
     */
    open class func buildsAppGetToOneRelatedWithRequestBuilder(id: String, fieldsApps: [FieldsApps_buildsAppGetToOneRelated]? = nil) -> RequestBuilder<AppWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/app"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppWithoutIncludesResponse> 
     */
    open class func buildsAppGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gamblingandcontests = "gamblingAndContests"
        case gambling = "gambling"
        case gamblingsimulated = "gamblingSimulated"
        case kidsageband = "kidsAgeBand"
        case lootbox = "lootBox"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case horrororfearthemes = "horrorOrFearThemes"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
        case violencerealistic = "violenceRealistic"
        case ageratingoverride = "ageRatingOverride"
        case koreaageratingoverride = "koreaAgeRatingOverride"
        case seventeenplus = "seventeenPlus"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case description = "description"
        case locale = "locale"
        case keywords = "keywords"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
        case appstoreversion = "appStoreVersion"
        case appscreenshotsets = "appScreenshotSets"
        case apppreviewsets = "appPreviewSets"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
        case currentdaynumber = "currentDayNumber"
    }

    /**
     * enum for parameter fieldsGameCenterAppVersions
     */
    public enum FieldsGameCenterAppVersions_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case enabled = "enabled"
        case compatibilityversions = "compatibilityVersions"
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case contactemail = "contactEmail"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
        case appstoreversion = "appStoreVersion"
        case appstorereviewattachments = "appStoreReviewAttachments"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case name = "name"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case platform = "platform"
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case versions = "versions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsAppStoreVersionGetToOneRelated: String, CaseIterable {
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppStoreVersionGetToOneRelated(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsApps: [FieldsApps_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_buildsAppStoreVersionGetToOneRelated]? = nil, include: [Include_buildsAppStoreVersionGetToOneRelated]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil) async throws -> AppStoreVersionResponse {
        return try await buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions: fieldsGameCenterAppVersions, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, include: include, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsAppStoreVersionGetToOneRelated(urlString: String) async throws -> AppStoreVersionResponse {
        return try await buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/appStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsApps: [FieldsApps_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_buildsAppStoreVersionGetToOneRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_buildsAppStoreVersionGetToOneRelated]? = nil, include: [Include_buildsAppStoreVersionGetToOneRelated]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/builds/{id}/appStoreVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionPhasedReleases]": (wrappedValue: fieldsAppStoreVersionPhasedReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAppVersions]": (wrappedValue: fieldsGameCenterAppVersions?.encodeToJSON(), isExplode: false),
            "fields[routingAppCoverages]": (wrappedValue: fieldsRoutingAppCoverages?.encodeToJSON(), isExplode: false),
            "fields[appStoreReviewDetails]": (wrappedValue: fieldsAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionSubmissions]": (wrappedValue: fieldsAppStoreVersionSubmissions?.encodeToJSON(), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[appStoreVersionLocalizations]": (wrappedValue: limitAppStoreVersionLocalizations?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperiments]": (wrappedValue: limitAppStoreVersionExperiments?.encodeToJSON(), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/appStoreVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsBetaAppReviewSubmissionGetToOneRelated: String, CaseIterable {
        case betareviewstate = "betaReviewState"
        case submitteddate = "submittedDate"
        case build = "build"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - returns: BetaAppReviewSubmissionWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaAppReviewSubmissionGetToOneRelated(id: String, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsBetaAppReviewSubmissionGetToOneRelated]? = nil) async throws -> BetaAppReviewSubmissionWithoutIncludesResponse {
        return try await buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(id: id, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaAppReviewSubmissionWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaAppReviewSubmissionGetToOneRelated(urlString: String) async throws -> BetaAppReviewSubmissionWithoutIncludesResponse {
        return try await buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/betaAppReviewSubmission
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - returns: RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse> 
     */
    open class func buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(id: String, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsBetaAppReviewSubmissionGetToOneRelated]? = nil) -> RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/betaAppReviewSubmission"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaAppReviewSubmissions]": (wrappedValue: fieldsBetaAppReviewSubmissions?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/betaAppReviewSubmission
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse> 
     */
    open class func buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaAppReviewSubmissionWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsBetaBuildLocalizationsGetToManyRelated: String, CaseIterable {
        case whatsnew = "whatsNew"
        case locale = "locale"
        case build = "build"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BetaBuildLocalizationsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildLocalizationsGetToManyRelated(id: String, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsBetaBuildLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BetaBuildLocalizationsWithoutIncludesResponse {
        return try await buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildLocalizationsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildLocalizationsGetToManyRelated(urlString: String) async throws -> BetaBuildLocalizationsWithoutIncludesResponse {
        return try await buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse> 
     */
    open class func buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsBetaBuildLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/betaBuildLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/betaBuildLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse> 
     */
    open class func buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildLocalizationsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - returns: BetaBuildUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildUsagesGetMetrics(id: String, limit: Int? = nil) async throws -> BetaBuildUsagesV1MetricResponse {
        return try await buildsBetaBuildUsagesGetMetricsWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildUsagesGetMetrics(urlString: String) async throws -> BetaBuildUsagesV1MetricResponse {
        return try await buildsBetaBuildUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/metrics/betaBuildUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - returns: RequestBuilder<BetaBuildUsagesV1MetricResponse> 
     */
    open class func buildsBetaBuildUsagesGetMetricsWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BetaBuildUsagesV1MetricResponse> {
        var localVariablePath = "/v1/builds/{id}/metrics/betaBuildUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/metrics/betaBuildUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildUsagesV1MetricResponse> 
     */
    open class func buildsBetaBuildUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildUsagesV1MetricResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaGroupsCreateToManyRelationship(id: String, buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest) async throws {
        return try await buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(id: id, buildBetaGroupsLinkagesRequest: buildBetaGroupsLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaGroupsCreateToManyRelationship(urlString: String) async throws {
        return try await buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/builds/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(id: String, buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/builds/{id}/relationships/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildBetaGroupsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/builds/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaGroupsDeleteToManyRelationship(id: String, buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest) async throws {
        return try await buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(id: id, buildBetaGroupsLinkagesRequest: buildBetaGroupsLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaGroupsDeleteToManyRelationship(urlString: String) async throws {
        return try await buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/builds/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(id: String, buildBetaGroupsLinkagesRequest: BuildBetaGroupsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/builds/{id}/relationships/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildBetaGroupsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/builds/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsBuildBetaDetailGetToOneRelated: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case internalbuildstate = "internalBuildState"
        case externalbuildstate = "externalBuildState"
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsBuildBetaDetailGetToOneRelated: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsBuildBetaDetailGetToOneRelated: String, CaseIterable {
        case build = "build"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBuildBetaDetailGetToOneRelated(id: String, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsBuildBetaDetailGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_buildsBuildBetaDetailGetToOneRelated]? = nil, include: [Include_buildsBuildBetaDetailGetToOneRelated]? = nil) async throws -> BuildBetaDetailResponse {
        return try await buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBuilds: fieldsBuilds, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBuildBetaDetailGetToOneRelated(urlString: String) async throws -> BuildBetaDetailResponse {
        return try await buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/buildBetaDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsBuildBetaDetailGetToOneRelated]? = nil, fieldsBuilds: [FieldsBuilds_buildsBuildBetaDetailGetToOneRelated]? = nil, include: [Include_buildsBuildBetaDetailGetToOneRelated]? = nil) -> RequestBuilder<BuildBetaDetailResponse> {
        var localVariablePath = "/v1/builds/{id}/buildBetaDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/buildBetaDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildBetaDetailResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterDiagnosticType
     */
    public enum FilterDiagnosticType_buildsDiagnosticSignaturesGetToManyRelated: String, CaseIterable {
        case diskWrites = "DISK_WRITES"
        case hangs = "HANGS"
        case launches = "LAUNCHES"
    }

    /**
     * enum for parameter fieldsDiagnosticSignatures
     */
    public enum FieldsDiagnosticSignatures_buildsDiagnosticSignaturesGetToManyRelated: String, CaseIterable {
        case diagnostictype = "diagnosticType"
        case signature = "signature"
        case weight = "weight"
        case insight = "insight"
        case logs = "logs"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterDiagnosticType: (query) filter by attribute &#39;diagnosticType&#39; (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: DiagnosticSignaturesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsDiagnosticSignaturesGetToManyRelated(id: String, filterDiagnosticType: [FilterDiagnosticType_buildsDiagnosticSignaturesGetToManyRelated]? = nil, fieldsDiagnosticSignatures: [FieldsDiagnosticSignatures_buildsDiagnosticSignaturesGetToManyRelated]? = nil, limit: Int? = nil) async throws -> DiagnosticSignaturesResponse {
        return try await buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(id: id, filterDiagnosticType: filterDiagnosticType, fieldsDiagnosticSignatures: fieldsDiagnosticSignatures, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: DiagnosticSignaturesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsDiagnosticSignaturesGetToManyRelated(urlString: String) async throws -> DiagnosticSignaturesResponse {
        return try await buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/diagnosticSignatures
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterDiagnosticType: (query) filter by attribute &#39;diagnosticType&#39; (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<DiagnosticSignaturesResponse> 
     */
    open class func buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(id: String, filterDiagnosticType: [FilterDiagnosticType_buildsDiagnosticSignaturesGetToManyRelated]? = nil, fieldsDiagnosticSignatures: [FieldsDiagnosticSignatures_buildsDiagnosticSignaturesGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<DiagnosticSignaturesResponse> {
        var localVariablePath = "/v1/builds/{id}/diagnosticSignatures"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[diagnosticType]": (wrappedValue: filterDiagnosticType?.encodeToJSON(), isExplode: false),
            "fields[diagnosticSignatures]": (wrappedValue: fieldsDiagnosticSignatures?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiagnosticSignaturesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/diagnosticSignatures
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<DiagnosticSignaturesResponse> 
     */
    open class func buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<DiagnosticSignaturesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiagnosticSignaturesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterProcessingState
     */
    public enum FilterProcessingState_buildsGetCollection: String, CaseIterable {
        case processing = "PROCESSING"
        case failed = "FAILED"
        case invalid = "INVALID"
        case valid = "VALID"
    }

    /**
     * enum for parameter filterBetaAppReviewSubmissionBetaReviewState
     */
    public enum FilterBetaAppReviewSubmissionBetaReviewState_buildsGetCollection: String, CaseIterable {
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }

    /**
     * enum for parameter filterPreReleaseVersionPlatform
     */
    public enum FilterPreReleaseVersionPlatform_buildsGetCollection: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter filterBuildAudienceType
     */
    public enum FilterBuildAudienceType_buildsGetCollection: String, CaseIterable {
        case internalOnly = "INTERNAL_ONLY"
        case appStoreEligible = "APP_STORE_ELIGIBLE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_buildsGetCollection: String, CaseIterable {
        case version = "version"
        case version2 = "-version"
        case uploadeddate = "uploadedDate"
        case uploadeddate2 = "-uploadedDate"
        case prereleaseversion = "preReleaseVersion"
        case prereleaseversion2 = "-preReleaseVersion"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsGetCollection: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsGetCollection: String, CaseIterable {
        case version = "version"
        case platform = "platform"
        case builds = "builds"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsGetCollection: String, CaseIterable {
        case firstname = "firstName"
        case lastname = "lastName"
        case email = "email"
        case invitetype = "inviteType"
        case state = "state"
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsGetCollection: String, CaseIterable {
        case whatsnew = "whatsNew"
        case locale = "locale"
        case build = "build"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsGetCollection: String, CaseIterable {
        case appdescription = "appDescription"
        case createddate = "createdDate"
        case usesencryption = "usesEncryption"
        case exempt = "exempt"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case availableonfrenchstore = "availableOnFrenchStore"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case documenturl = "documentUrl"
        case documentname = "documentName"
        case documenttype = "documentType"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case codevalue = "codeValue"
        case app = "app"
        case builds = "builds"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsGetCollection: String, CaseIterable {
        case betareviewstate = "betaReviewState"
        case submitteddate = "submittedDate"
        case build = "build"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsGetCollection: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsGetCollection: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case internalbuildstate = "internalBuildState"
        case externalbuildstate = "externalBuildState"
        case build = "build"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsGetCollection: String, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsGetCollection: String, CaseIterable {
        case name = "name"
        case iconasset = "iconAsset"
        case icontype = "iconType"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsGetCollection: String, CaseIterable {
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
    }

    /**

     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter filterExpired: (query) filter by attribute &#39;expired&#39; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#39;processingState&#39; (optional)
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#39;buildAudienceType&#39; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - returns: BuildsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsGetCollection(filterVersion: [String]? = nil, filterExpired: [String]? = nil, filterProcessingState: [FilterProcessingState_buildsGetCollection]? = nil, filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState_buildsGetCollection]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform_buildsGetCollection]? = nil, filterBuildAudienceType: [FilterBuildAudienceType_buildsGetCollection]? = nil, filterPreReleaseVersion: [String]? = nil, filterApp: [String]? = nil, filterBetaGroups: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterId: [String]? = nil, sort: [Sort_buildsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_buildsGetCollection]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsGetCollection]? = nil, fieldsBetaTesters: [FieldsBetaTesters_buildsGetCollection]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsGetCollection]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsGetCollection]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsGetCollection]? = nil, fieldsApps: [FieldsApps_buildsGetCollection]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsGetCollection]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsGetCollection]? = nil, fieldsBuildIcons: [FieldsBuildIcons_buildsGetCollection]? = nil, limit: Int? = nil, include: [Include_buildsGetCollection]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) async throws -> BuildsResponse {
        return try await buildsGetCollectionWithRequestBuilder(filterVersion: filterVersion, filterExpired: filterExpired, filterProcessingState: filterProcessingState, filterBetaAppReviewSubmissionBetaReviewState: filterBetaAppReviewSubmissionBetaReviewState, filterUsesNonExemptEncryption: filterUsesNonExemptEncryption, filterPreReleaseVersionVersion: filterPreReleaseVersionVersion, filterPreReleaseVersionPlatform: filterPreReleaseVersionPlatform, filterBuildAudienceType: filterBuildAudienceType, filterPreReleaseVersion: filterPreReleaseVersion, filterApp: filterApp, filterBetaGroups: filterBetaGroups, filterAppStoreVersion: filterAppStoreVersion, filterId: filterId, sort: sort, fieldsBuilds: fieldsBuilds, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsBetaTesters: fieldsBetaTesters, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsApps: fieldsApps, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsBuildIcons: fieldsBuildIcons, limit: limit, include: include, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitBetaGroups: limitBetaGroups, limitBuildBundles: limitBuildBundles, limitIcons: limitIcons, limitIndividualTesters: limitIndividualTesters).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsGetCollection(urlString: String) async throws -> BuildsResponse {
        return try await buildsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterVersion: (query) filter by attribute &#39;version&#39; (optional)
     - parameter filterExpired: (query) filter by attribute &#39;expired&#39; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#39;processingState&#39; (optional)
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#39;buildAudienceType&#39; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func buildsGetCollectionWithRequestBuilder(filterVersion: [String]? = nil, filterExpired: [String]? = nil, filterProcessingState: [FilterProcessingState_buildsGetCollection]? = nil, filterBetaAppReviewSubmissionBetaReviewState: [FilterBetaAppReviewSubmissionBetaReviewState_buildsGetCollection]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterPreReleaseVersionPlatform: [FilterPreReleaseVersionPlatform_buildsGetCollection]? = nil, filterBuildAudienceType: [FilterBuildAudienceType_buildsGetCollection]? = nil, filterPreReleaseVersion: [String]? = nil, filterApp: [String]? = nil, filterBetaGroups: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterId: [String]? = nil, sort: [Sort_buildsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_buildsGetCollection]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsGetCollection]? = nil, fieldsBetaTesters: [FieldsBetaTesters_buildsGetCollection]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsGetCollection]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsGetCollection]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsGetCollection]? = nil, fieldsApps: [FieldsApps_buildsGetCollection]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsGetCollection]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsGetCollection]? = nil, fieldsBuildIcons: [FieldsBuildIcons_buildsGetCollection]? = nil, limit: Int? = nil, include: [Include_buildsGetCollection]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) -> RequestBuilder<BuildsResponse> {
        let localVariablePath = "/v1/builds"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[version]": (wrappedValue: filterVersion?.encodeToJSON(), isExplode: false),
            "filter[expired]": (wrappedValue: filterExpired?.encodeToJSON(), isExplode: false),
            "filter[processingState]": (wrappedValue: filterProcessingState?.encodeToJSON(), isExplode: false),
            "filter[betaAppReviewSubmission.betaReviewState]": (wrappedValue: filterBetaAppReviewSubmissionBetaReviewState?.encodeToJSON(), isExplode: false),
            "filter[usesNonExemptEncryption]": (wrappedValue: filterUsesNonExemptEncryption?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion.version]": (wrappedValue: filterPreReleaseVersionVersion?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion.platform]": (wrappedValue: filterPreReleaseVersionPlatform?.encodeToJSON(), isExplode: false),
            "filter[buildAudienceType]": (wrappedValue: filterBuildAudienceType?.encodeToJSON(), isExplode: false),
            "filter[preReleaseVersion]": (wrappedValue: filterPreReleaseVersion?.encodeToJSON(), isExplode: false),
            "filter[app]": (wrappedValue: filterApp?.encodeToJSON(), isExplode: false),
            "filter[betaGroups]": (wrappedValue: filterBetaGroups?.encodeToJSON(), isExplode: false),
            "filter[appStoreVersion]": (wrappedValue: filterAppStoreVersion?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewSubmissions]": (wrappedValue: fieldsBetaAppReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[buildIcons]": (wrappedValue: fieldsBuildIcons?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[betaBuildLocalizations]": (wrappedValue: limitBetaBuildLocalizations?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[buildBundles]": (wrappedValue: limitBuildBundles?.encodeToJSON(), isExplode: true),
            "limit[icons]": (wrappedValue: limitIcons?.encodeToJSON(), isExplode: true),
            "limit[individualTesters]": (wrappedValue: limitIndividualTesters?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func buildsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<BuildsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsGetInstance: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsGetInstance: String, CaseIterable {
        case version = "version"
        case platform = "platform"
        case builds = "builds"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsGetInstance: String, CaseIterable {
        case firstname = "firstName"
        case lastname = "lastName"
        case email = "email"
        case invitetype = "inviteType"
        case state = "state"
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsGetInstance: String, CaseIterable {
        case whatsnew = "whatsNew"
        case locale = "locale"
        case build = "build"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsGetInstance: String, CaseIterable {
        case appdescription = "appDescription"
        case createddate = "createdDate"
        case usesencryption = "usesEncryption"
        case exempt = "exempt"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case availableonfrenchstore = "availableOnFrenchStore"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case documenturl = "documentUrl"
        case documentname = "documentName"
        case documenttype = "documentType"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case codevalue = "codeValue"
        case app = "app"
        case builds = "builds"
        case appencryptiondeclarationdocument = "appEncryptionDeclarationDocument"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsGetInstance: String, CaseIterable {
        case betareviewstate = "betaReviewState"
        case submitteddate = "submittedDate"
        case build = "build"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsGetInstance: String, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsGetInstance: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case internalbuildstate = "internalBuildState"
        case externalbuildstate = "externalBuildState"
        case build = "build"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsGetInstance: String, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsGetInstance: String, CaseIterable {
        case name = "name"
        case iconasset = "iconAsset"
        case icontype = "iconType"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsGetInstance: String, CaseIterable {
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsGetInstance(id: String, fieldsBuilds: [FieldsBuilds_buildsGetInstance]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsGetInstance]? = nil, fieldsBetaTesters: [FieldsBetaTesters_buildsGetInstance]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsGetInstance]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsGetInstance]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsGetInstance]? = nil, fieldsApps: [FieldsApps_buildsGetInstance]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsGetInstance]? = nil, fieldsBuildIcons: [FieldsBuildIcons_buildsGetInstance]? = nil, include: [Include_buildsGetInstance]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) async throws -> BuildResponse {
        return try await buildsGetInstanceWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsBetaTesters: fieldsBetaTesters, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsApps: fieldsApps, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsBuildIcons: fieldsBuildIcons, include: include, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitBetaGroups: limitBetaGroups, limitBuildBundles: limitBuildBundles, limitIcons: limitIcons, limitIndividualTesters: limitIndividualTesters).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsGetInstance(urlString: String) async throws -> BuildResponse {
        return try await buildsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsGetInstanceWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_buildsGetInstance]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsGetInstance]? = nil, fieldsBetaTesters: [FieldsBetaTesters_buildsGetInstance]? = nil, fieldsBetaBuildLocalizations: [FieldsBetaBuildLocalizations_buildsGetInstance]? = nil, fieldsAppEncryptionDeclarations: [FieldsAppEncryptionDeclarations_buildsGetInstance]? = nil, fieldsBetaAppReviewSubmissions: [FieldsBetaAppReviewSubmissions_buildsGetInstance]? = nil, fieldsApps: [FieldsApps_buildsGetInstance]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildsGetInstance]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_buildsGetInstance]? = nil, fieldsBuildIcons: [FieldsBuildIcons_buildsGetInstance]? = nil, include: [Include_buildsGetInstance]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) -> RequestBuilder<BuildResponse> {
        var localVariablePath = "/v1/builds/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "fields[betaBuildLocalizations]": (wrappedValue: fieldsBetaBuildLocalizations?.encodeToJSON(), isExplode: false),
            "fields[appEncryptionDeclarations]": (wrappedValue: fieldsAppEncryptionDeclarations?.encodeToJSON(), isExplode: false),
            "fields[betaAppReviewSubmissions]": (wrappedValue: fieldsBetaAppReviewSubmissions?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(), isExplode: false),
            "fields[buildIcons]": (wrappedValue: fieldsBuildIcons?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[betaBuildLocalizations]": (wrappedValue: limitBetaBuildLocalizations?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[buildBundles]": (wrappedValue: limitBuildBundles?.encodeToJSON(), isExplode: true),
            "limit[icons]": (wrappedValue: limitIcons?.encodeToJSON(), isExplode: true),
            "limit[individualTesters]": (wrappedValue: limitIndividualTesters?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BuildResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsIconsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case iconasset = "iconAsset"
        case icontype = "iconType"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BuildIconsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIconsGetToManyRelated(id: String, fieldsBuildIcons: [FieldsBuildIcons_buildsIconsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BuildIconsWithoutIncludesResponse {
        return try await buildsIconsGetToManyRelatedWithRequestBuilder(id: id, fieldsBuildIcons: fieldsBuildIcons, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildIconsWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIconsGetToManyRelated(urlString: String) async throws -> BuildIconsWithoutIncludesResponse {
        return try await buildsIconsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/icons
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BuildIconsWithoutIncludesResponse> 
     */
    open class func buildsIconsGetToManyRelatedWithRequestBuilder(id: String, fieldsBuildIcons: [FieldsBuildIcons_buildsIconsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BuildIconsWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/icons"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[buildIcons]": (wrappedValue: fieldsBuildIcons?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildIconsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/icons
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildIconsWithoutIncludesResponse> 
     */
    open class func buildsIconsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildIconsWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildIconsWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildIndividualTestersLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersCreateToManyRelationship(id: String, buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest) async throws {
        return try await buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(id: id, buildIndividualTestersLinkagesRequest: buildIndividualTestersLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersCreateToManyRelationship(urlString: String) async throws {
        return try await buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildIndividualTestersLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(id: String, buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/builds/{id}/relationships/individualTesters"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildIndividualTestersLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildIndividualTestersLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersDeleteToManyRelationship(id: String, buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest) async throws {
        return try await buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(id: id, buildIndividualTestersLinkagesRequest: buildIndividualTestersLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersDeleteToManyRelationship(urlString: String) async throws {
        return try await buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildIndividualTestersLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(id: String, buildIndividualTestersLinkagesRequest: BuildIndividualTestersLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/builds/{id}/relationships/individualTesters"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildIndividualTestersLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsIndividualTestersGetToManyRelated: String, CaseIterable {
        case firstname = "firstName"
        case lastname = "lastName"
        case email = "email"
        case invitetype = "inviteType"
        case state = "state"
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BetaTestersWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersGetToManyRelated(id: String, fieldsBetaTesters: [FieldsBetaTesters_buildsIndividualTestersGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BetaTestersWithoutIncludesResponse {
        return try await buildsIndividualTestersGetToManyRelatedWithRequestBuilder(id: id, fieldsBetaTesters: fieldsBetaTesters, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaTestersWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersGetToManyRelated(urlString: String) async throws -> BetaTestersWithoutIncludesResponse {
        return try await buildsIndividualTestersGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaTestersWithoutIncludesResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelatedWithRequestBuilder(id: String, fieldsBetaTesters: [FieldsBetaTesters_buildsIndividualTestersGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BetaTestersWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/individualTesters"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTestersWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaTestersWithoutIncludesResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BetaTestersWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTestersWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BuildIndividualTestersLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersGetToManyRelationship(id: String, limit: Int? = nil) async throws -> BuildIndividualTestersLinkagesResponse {
        return try await buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildIndividualTestersLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsIndividualTestersGetToManyRelationship(urlString: String) async throws -> BuildIndividualTestersLinkagesResponse {
        return try await buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BuildIndividualTestersLinkagesResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BuildIndividualTestersLinkagesResponse> {
        var localVariablePath = "/v1/builds/{id}/relationships/individualTesters"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildIndividualTestersLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/relationships/individualTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildIndividualTestersLinkagesResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<BuildIndividualTestersLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildIndividualTestersLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_buildsPerfPowerMetricsGetToManyRelated: String, CaseIterable {
        case ios = "IOS"
    }

    /**
     * enum for parameter filterMetricType
     */
    public enum FilterMetricType_buildsPerfPowerMetricsGetToManyRelated: String, CaseIterable {
        case disk = "DISK"
        case hang = "HANG"
        case battery = "BATTERY"
        case launch = "LAUNCH"
        case memory = "MEMORY"
        case animation = "ANIMATION"
        case termination = "TERMINATION"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterMetricType: (query) filter by attribute &#39;metricType&#39; (optional)
     - parameter filterDeviceType: (query) filter by attribute &#39;deviceType&#39; (optional)
     - returns: XcodeMetrics
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsPerfPowerMetricsGetToManyRelated(id: String, filterPlatform: [FilterPlatform_buildsPerfPowerMetricsGetToManyRelated]? = nil, filterMetricType: [FilterMetricType_buildsPerfPowerMetricsGetToManyRelated]? = nil, filterDeviceType: [String]? = nil) async throws -> XcodeMetrics {
        return try await buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(id: id, filterPlatform: filterPlatform, filterMetricType: filterMetricType, filterDeviceType: filterDeviceType).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: XcodeMetrics
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsPerfPowerMetricsGetToManyRelated(urlString: String) async throws -> XcodeMetrics {
        return try await buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/perfPowerMetrics
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterMetricType: (query) filter by attribute &#39;metricType&#39; (optional)
     - parameter filterDeviceType: (query) filter by attribute &#39;deviceType&#39; (optional)
     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(id: String, filterPlatform: [FilterPlatform_buildsPerfPowerMetricsGetToManyRelated]? = nil, filterMetricType: [FilterMetricType_buildsPerfPowerMetricsGetToManyRelated]? = nil, filterDeviceType: [String]? = nil) -> RequestBuilder<XcodeMetrics> {
        var localVariablePath = "/v1/builds/{id}/perfPowerMetrics"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[metricType]": (wrappedValue: filterMetricType?.encodeToJSON(), isExplode: false),
            "filter[deviceType]": (wrappedValue: filterDeviceType?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<XcodeMetrics>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/perfPowerMetrics
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<XcodeMetrics> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<XcodeMetrics>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsPreReleaseVersionGetToOneRelated: String, CaseIterable {
        case version = "version"
        case platform = "platform"
        case builds = "builds"
        case app = "app"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - returns: PrereleaseVersionWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsPreReleaseVersionGetToOneRelated(id: String, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsPreReleaseVersionGetToOneRelated]? = nil) async throws -> PrereleaseVersionWithoutIncludesResponse {
        return try await buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(id: id, fieldsPreReleaseVersions: fieldsPreReleaseVersions).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: PrereleaseVersionWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsPreReleaseVersionGetToOneRelated(urlString: String) async throws -> PrereleaseVersionWithoutIncludesResponse {
        return try await buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/preReleaseVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - returns: RequestBuilder<PrereleaseVersionWithoutIncludesResponse> 
     */
    open class func buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(id: String, fieldsPreReleaseVersions: [FieldsPreReleaseVersions_buildsPreReleaseVersionGetToOneRelated]? = nil) -> RequestBuilder<PrereleaseVersionWithoutIncludesResponse> {
        var localVariablePath = "/v1/builds/{id}/preReleaseVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[preReleaseVersions]": (wrappedValue: fieldsPreReleaseVersions?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PrereleaseVersionWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/preReleaseVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<PrereleaseVersionWithoutIncludesResponse> 
     */
    open class func buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<PrereleaseVersionWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PrereleaseVersionWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildUpdateRequest: (body) Build representation 
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsUpdateInstance(id: String, buildUpdateRequest: BuildUpdateRequest) async throws -> BuildResponse {
        return try await buildsUpdateInstanceWithRequestBuilder(id: id, buildUpdateRequest: buildUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsUpdateInstance(urlString: String) async throws -> BuildResponse {
        return try await buildsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/builds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildUpdateRequest: (body) Build representation 
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsUpdateInstanceWithRequestBuilder(id: String, buildUpdateRequest: BuildUpdateRequest) -> RequestBuilder<BuildResponse> {
        var localVariablePath = "/v1/builds/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/builds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BuildResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
