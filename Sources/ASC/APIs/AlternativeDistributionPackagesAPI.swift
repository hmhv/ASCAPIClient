//
// AlternativeDistributionPackagesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AlternativeDistributionPackagesAPI {

    /**

     - parameter alternativeDistributionPackageCreateRequest: (body) AlternativeDistributionPackage representation 
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesCreateInstance(alternativeDistributionPackageCreateRequest: AlternativeDistributionPackageCreateRequest) async throws -> AlternativeDistributionPackageResponse {
        return try await alternativeDistributionPackagesCreateInstanceWithRequestBuilder(alternativeDistributionPackageCreateRequest: alternativeDistributionPackageCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesCreateInstance(urlString: String) async throws -> AlternativeDistributionPackageResponse {
        return try await alternativeDistributionPackagesCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/alternativeDistributionPackages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter alternativeDistributionPackageCreateRequest: (body) AlternativeDistributionPackage representation 
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func alternativeDistributionPackagesCreateInstanceWithRequestBuilder(alternativeDistributionPackageCreateRequest: AlternativeDistributionPackageCreateRequest) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        let localVariablePath = "/v1/alternativeDistributionPackages"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: alternativeDistributionPackageCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/alternativeDistributionPackages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func alternativeDistributionPackagesCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_alternativeDistributionPackagesGetInstance: String, CaseIterable {
        case versions = "versions"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackageVersions
     */
    public enum FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesGetInstance: String, CaseIterable {
        case url = "url"
        case urlexpirationdate = "urlExpirationDate"
        case version = "version"
        case filechecksum = "fileChecksum"
        case state = "state"
        case variants = "variants"
        case deltas = "deltas"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter include
     */
    public enum Include_alternativeDistributionPackagesGetInstance: String, CaseIterable {
        case versions = "versions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVersions: (query) maximum number of related versions returned (when they are included) (optional)
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesGetInstance(id: String, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_alternativeDistributionPackagesGetInstance]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesGetInstance]? = nil, include: [Include_alternativeDistributionPackagesGetInstance]? = nil, limitVersions: Int? = nil) async throws -> AlternativeDistributionPackageResponse {
        return try await alternativeDistributionPackagesGetInstanceWithRequestBuilder(id: id, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions: fieldsAlternativeDistributionPackageVersions, include: include, limitVersions: limitVersions).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesGetInstance(urlString: String) async throws -> AlternativeDistributionPackageResponse {
        return try await alternativeDistributionPackagesGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/alternativeDistributionPackages/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVersions: (query) maximum number of related versions returned (when they are included) (optional)
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func alternativeDistributionPackagesGetInstanceWithRequestBuilder(id: String, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_alternativeDistributionPackagesGetInstance]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesGetInstance]? = nil, include: [Include_alternativeDistributionPackagesGetInstance]? = nil, limitVersions: Int? = nil) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        var localVariablePath = "/v1/alternativeDistributionPackages/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackageVersions]": (wrappedValue: fieldsAlternativeDistributionPackageVersions?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[versions]": (wrappedValue: limitVersions?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/alternativeDistributionPackages/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func alternativeDistributionPackagesGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case completed = "COMPLETED"
        case replaced = "REPLACED"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackageVersions
     */
    public enum FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case url = "url"
        case urlexpirationdate = "urlExpirationDate"
        case version = "version"
        case filechecksum = "fileChecksum"
        case state = "state"
        case variants = "variants"
        case deltas = "deltas"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackageVariants
     */
    public enum FieldsAlternativeDistributionPackageVariants_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case url = "url"
        case urlexpirationdate = "urlExpirationDate"
        case alternativedistributionkeyblob = "alternativeDistributionKeyBlob"
        case filechecksum = "fileChecksum"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackageDeltas
     */
    public enum FieldsAlternativeDistributionPackageDeltas_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case url = "url"
        case urlexpirationdate = "urlExpirationDate"
        case alternativedistributionkeyblob = "alternativeDistributionKeyBlob"
        case filechecksum = "fileChecksum"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case versions = "versions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_alternativeDistributionPackagesVersionsGetToManyRelated: String, CaseIterable {
        case variants = "variants"
        case deltas = "deltas"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter fieldsAlternativeDistributionPackageVariants: (query) the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)
     - parameter fieldsAlternativeDistributionPackageDeltas: (query) the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVariants: (query) maximum number of related variants returned (when they are included) (optional)
     - parameter limitDeltas: (query) maximum number of related deltas returned (when they are included) (optional)
     - returns: AlternativeDistributionPackageVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesVersionsGetToManyRelated(id: String, filterState: [FilterState_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageVariants: [FieldsAlternativeDistributionPackageVariants_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageDeltas: [FieldsAlternativeDistributionPackageDeltas_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, limitVariants: Int? = nil, limitDeltas: Int? = nil) async throws -> AlternativeDistributionPackageVersionsResponse {
        return try await alternativeDistributionPackagesVersionsGetToManyRelatedWithRequestBuilder(id: id, filterState: filterState, fieldsAlternativeDistributionPackageVersions: fieldsAlternativeDistributionPackageVersions, fieldsAlternativeDistributionPackageVariants: fieldsAlternativeDistributionPackageVariants, fieldsAlternativeDistributionPackageDeltas: fieldsAlternativeDistributionPackageDeltas, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, limit: limit, include: include, limitVariants: limitVariants, limitDeltas: limitDeltas).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AlternativeDistributionPackageVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func alternativeDistributionPackagesVersionsGetToManyRelated(urlString: String) async throws -> AlternativeDistributionPackageVersionsResponse {
        return try await alternativeDistributionPackagesVersionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/alternativeDistributionPackages/{id}/versions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter fieldsAlternativeDistributionPackageVariants: (query) the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)
     - parameter fieldsAlternativeDistributionPackageDeltas: (query) the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVariants: (query) maximum number of related variants returned (when they are included) (optional)
     - parameter limitDeltas: (query) maximum number of related deltas returned (when they are included) (optional)
     - returns: RequestBuilder<AlternativeDistributionPackageVersionsResponse> 
     */
    open class func alternativeDistributionPackagesVersionsGetToManyRelatedWithRequestBuilder(id: String, filterState: [FilterState_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageVariants: [FieldsAlternativeDistributionPackageVariants_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackageDeltas: [FieldsAlternativeDistributionPackageDeltas_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_alternativeDistributionPackagesVersionsGetToManyRelated]? = nil, limitVariants: Int? = nil, limitDeltas: Int? = nil) -> RequestBuilder<AlternativeDistributionPackageVersionsResponse> {
        var localVariablePath = "/v1/alternativeDistributionPackages/{id}/versions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackageVersions]": (wrappedValue: fieldsAlternativeDistributionPackageVersions?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackageVariants]": (wrappedValue: fieldsAlternativeDistributionPackageVariants?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackageDeltas]": (wrappedValue: fieldsAlternativeDistributionPackageDeltas?.encodeToJSON(), isExplode: false),
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[variants]": (wrappedValue: limitVariants?.encodeToJSON(), isExplode: true),
            "limit[deltas]": (wrappedValue: limitDeltas?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/alternativeDistributionPackages/{id}/versions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AlternativeDistributionPackageVersionsResponse> 
     */
    open class func alternativeDistributionPackagesVersionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AlternativeDistributionPackageVersionsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
