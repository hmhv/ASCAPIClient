//
// BundleIdsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BundleIdsAPI {

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsAppGetToOneRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - returns: AppWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsAppGetToOneRelated(id: String, fieldsApps: [FieldsApps_bundleIdsAppGetToOneRelated]? = nil) async throws -> AppWithoutIncludesResponse {
        return try await bundleIdsAppGetToOneRelatedWithRequestBuilder(id: id, fieldsApps: fieldsApps).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsAppGetToOneRelated(urlString: String) async throws -> AppWithoutIncludesResponse {
        return try await bundleIdsAppGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/bundleIds/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - returns: RequestBuilder<AppWithoutIncludesResponse> 
     */
    open class func bundleIdsAppGetToOneRelatedWithRequestBuilder(id: String, fieldsApps: [FieldsApps_bundleIdsAppGetToOneRelated]? = nil) -> RequestBuilder<AppWithoutIncludesResponse> {
        var localVariablePath = "/v1/bundleIds/{id}/app"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/bundleIds/{id}/app
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppWithoutIncludesResponse> 
     */
    open class func bundleIdsAppGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsBundleIdCapabilitiesGetToManyRelated: String, CaseIterable {
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: BundleIdCapabilitiesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelated(id: String, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsBundleIdCapabilitiesGetToManyRelated]? = nil, limit: Int? = nil) async throws -> BundleIdCapabilitiesWithoutIncludesResponse {
        return try await bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(id: id, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BundleIdCapabilitiesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelated(urlString: String) async throws -> BundleIdCapabilitiesWithoutIncludesResponse {
        return try await bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/bundleIds/{id}/bundleIdCapabilities
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse> 
     */
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(id: String, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsBundleIdCapabilitiesGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse> {
        var localVariablePath = "/v1/bundleIds/{id}/bundleIdCapabilities"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[bundleIdCapabilities]": (wrappedValue: fieldsBundleIdCapabilities?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/bundleIds/{id}/bundleIdCapabilities
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse> 
     */
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdCapabilitiesWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter bundleIdCreateRequest: (body) BundleId representation 
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsCreateInstance(bundleIdCreateRequest: BundleIdCreateRequest) async throws -> BundleIdResponse {
        return try await bundleIdsCreateInstanceWithRequestBuilder(bundleIdCreateRequest: bundleIdCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsCreateInstance(urlString: String) async throws -> BundleIdResponse {
        return try await bundleIdsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/bundleIds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter bundleIdCreateRequest: (body) BundleId representation 
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsCreateInstanceWithRequestBuilder(bundleIdCreateRequest: BundleIdCreateRequest) -> RequestBuilder<BundleIdResponse> {
        let localVariablePath = "/v1/bundleIds"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bundleIdCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/bundleIds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BundleIdResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsDeleteInstance(id: String) async throws {
        return try await bundleIdsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsDeleteInstance(urlString: String) async throws {
        return try await bundleIdsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func bundleIdsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/bundleIds/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func bundleIdsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_bundleIdsGetCollection: String, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_bundleIdsGetCollection: String, CaseIterable {
        case id = "id"
        case id2 = "-id"
        case identifier = "identifier"
        case identifier2 = "-identifier"
        case name = "name"
        case name2 = "-name"
        case platform = "platform"
        case platform2 = "-platform"
        case seedid = "seedId"
        case seedid2 = "-seedId"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_bundleIdsGetCollection: String, CaseIterable {
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_bundleIdsGetCollection: String, CaseIterable {
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case profiles = "profiles"
    }

    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsGetCollection: String, CaseIterable {
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsGetCollection: String, CaseIterable {
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsGetCollection: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter filterIdentifier: (query) filter by attribute &#39;identifier&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterSeedId: (query) filter by attribute &#39;seedId&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - returns: BundleIdsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsGetCollection(filterIdentifier: [String]? = nil, filterName: [String]? = nil, filterPlatform: [FilterPlatform_bundleIdsGetCollection]? = nil, filterSeedId: [String]? = nil, filterId: [String]? = nil, sort: [Sort_bundleIdsGetCollection]? = nil, fieldsBundleIds: [FieldsBundleIds_bundleIdsGetCollection]? = nil, limit: Int? = nil, include: [Include_bundleIdsGetCollection]? = nil, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsGetCollection]? = nil, fieldsProfiles: [FieldsProfiles_bundleIdsGetCollection]? = nil, fieldsApps: [FieldsApps_bundleIdsGetCollection]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) async throws -> BundleIdsResponse {
        return try await bundleIdsGetCollectionWithRequestBuilder(filterIdentifier: filterIdentifier, filterName: filterName, filterPlatform: filterPlatform, filterSeedId: filterSeedId, filterId: filterId, sort: sort, fieldsBundleIds: fieldsBundleIds, limit: limit, include: include, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, fieldsProfiles: fieldsProfiles, fieldsApps: fieldsApps, limitBundleIdCapabilities: limitBundleIdCapabilities, limitProfiles: limitProfiles).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BundleIdsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsGetCollection(urlString: String) async throws -> BundleIdsResponse {
        return try await bundleIdsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/bundleIds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterIdentifier: (query) filter by attribute &#39;identifier&#39; (optional)
     - parameter filterName: (query) filter by attribute &#39;name&#39; (optional)
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterSeedId: (query) filter by attribute &#39;seedId&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - returns: RequestBuilder<BundleIdsResponse> 
     */
    open class func bundleIdsGetCollectionWithRequestBuilder(filterIdentifier: [String]? = nil, filterName: [String]? = nil, filterPlatform: [FilterPlatform_bundleIdsGetCollection]? = nil, filterSeedId: [String]? = nil, filterId: [String]? = nil, sort: [Sort_bundleIdsGetCollection]? = nil, fieldsBundleIds: [FieldsBundleIds_bundleIdsGetCollection]? = nil, limit: Int? = nil, include: [Include_bundleIdsGetCollection]? = nil, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsGetCollection]? = nil, fieldsProfiles: [FieldsProfiles_bundleIdsGetCollection]? = nil, fieldsApps: [FieldsApps_bundleIdsGetCollection]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) -> RequestBuilder<BundleIdsResponse> {
        let localVariablePath = "/v1/bundleIds"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[identifier]": (wrappedValue: filterIdentifier?.encodeToJSON(), isExplode: false),
            "filter[name]": (wrappedValue: filterName?.encodeToJSON(), isExplode: false),
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(), isExplode: false),
            "filter[seedId]": (wrappedValue: filterSeedId?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[bundleIdCapabilities]": (wrappedValue: fieldsBundleIdCapabilities?.encodeToJSON(), isExplode: false),
            "fields[profiles]": (wrappedValue: fieldsProfiles?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit[bundleIdCapabilities]": (wrappedValue: limitBundleIdCapabilities?.encodeToJSON(), isExplode: true),
            "limit[profiles]": (wrappedValue: limitProfiles?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/bundleIds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BundleIdsResponse> 
     */
    open class func bundleIdsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<BundleIdsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_bundleIdsGetInstance: String, CaseIterable {
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_bundleIdsGetInstance: String, CaseIterable {
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case profiles = "profiles"
    }

    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsGetInstance: String, CaseIterable {
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsGetInstance: String, CaseIterable {
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsGetInstance: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsGetInstance(id: String, fieldsBundleIds: [FieldsBundleIds_bundleIdsGetInstance]? = nil, include: [Include_bundleIdsGetInstance]? = nil, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsGetInstance]? = nil, fieldsProfiles: [FieldsProfiles_bundleIdsGetInstance]? = nil, fieldsApps: [FieldsApps_bundleIdsGetInstance]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) async throws -> BundleIdResponse {
        return try await bundleIdsGetInstanceWithRequestBuilder(id: id, fieldsBundleIds: fieldsBundleIds, include: include, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, fieldsProfiles: fieldsProfiles, fieldsApps: fieldsApps, limitBundleIdCapabilities: limitBundleIdCapabilities, limitProfiles: limitProfiles).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsGetInstance(urlString: String) async throws -> BundleIdResponse {
        return try await bundleIdsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsGetInstanceWithRequestBuilder(id: String, fieldsBundleIds: [FieldsBundleIds_bundleIdsGetInstance]? = nil, include: [Include_bundleIdsGetInstance]? = nil, fieldsBundleIdCapabilities: [FieldsBundleIdCapabilities_bundleIdsGetInstance]? = nil, fieldsProfiles: [FieldsProfiles_bundleIdsGetInstance]? = nil, fieldsApps: [FieldsApps_bundleIdsGetInstance]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) -> RequestBuilder<BundleIdResponse> {
        var localVariablePath = "/v1/bundleIds/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[bundleIds]": (wrappedValue: fieldsBundleIds?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[bundleIdCapabilities]": (wrappedValue: fieldsBundleIdCapabilities?.encodeToJSON(), isExplode: false),
            "fields[profiles]": (wrappedValue: fieldsProfiles?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit[bundleIdCapabilities]": (wrappedValue: limitBundleIdCapabilities?.encodeToJSON(), isExplode: true),
            "limit[profiles]": (wrappedValue: limitProfiles?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BundleIdResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsProfilesGetToManyRelated: String, CaseIterable {
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: ProfilesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsProfilesGetToManyRelated(id: String, fieldsProfiles: [FieldsProfiles_bundleIdsProfilesGetToManyRelated]? = nil, limit: Int? = nil) async throws -> ProfilesWithoutIncludesResponse {
        return try await bundleIdsProfilesGetToManyRelatedWithRequestBuilder(id: id, fieldsProfiles: fieldsProfiles, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: ProfilesWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsProfilesGetToManyRelated(urlString: String) async throws -> ProfilesWithoutIncludesResponse {
        return try await bundleIdsProfilesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/bundleIds/{id}/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<ProfilesWithoutIncludesResponse> 
     */
    open class func bundleIdsProfilesGetToManyRelatedWithRequestBuilder(id: String, fieldsProfiles: [FieldsProfiles_bundleIdsProfilesGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<ProfilesWithoutIncludesResponse> {
        var localVariablePath = "/v1/bundleIds/{id}/profiles"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[profiles]": (wrappedValue: fieldsProfiles?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfilesWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/bundleIds/{id}/profiles
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<ProfilesWithoutIncludesResponse> 
     */
    open class func bundleIdsProfilesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<ProfilesWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfilesWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter bundleIdUpdateRequest: (body) BundleId representation 
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsUpdateInstance(id: String, bundleIdUpdateRequest: BundleIdUpdateRequest) async throws -> BundleIdResponse {
        return try await bundleIdsUpdateInstanceWithRequestBuilder(id: id, bundleIdUpdateRequest: bundleIdUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BundleIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func bundleIdsUpdateInstance(urlString: String) async throws -> BundleIdResponse {
        return try await bundleIdsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter bundleIdUpdateRequest: (body) BundleId representation 
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsUpdateInstanceWithRequestBuilder(id: String, bundleIdUpdateRequest: BundleIdUpdateRequest) -> RequestBuilder<BundleIdResponse> {
        var localVariablePath = "/v1/bundleIds/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bundleIdUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/bundleIds/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BundleIdResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BundleIdResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
