//
// GameCenterLeaderboardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GameCenterLeaderboardsAPI {

    /**

     - parameter gameCenterLeaderboardCreateRequest: (body) GameCenterLeaderboard representation 
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsCreateInstance(gameCenterLeaderboardCreateRequest: GameCenterLeaderboardCreateRequest) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsCreateInstanceWithRequestBuilder(gameCenterLeaderboardCreateRequest: gameCenterLeaderboardCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsCreateInstance(urlString: String) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter gameCenterLeaderboardCreateRequest: (body) GameCenterLeaderboard representation 
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsCreateInstanceWithRequestBuilder(gameCenterLeaderboardCreateRequest: GameCenterLeaderboardCreateRequest) -> RequestBuilder<GameCenterLeaderboardResponse> {
        let localVariablePath = "/v1/gameCenterLeaderboards"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterLeaderboardCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/gameCenterLeaderboards
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsDeleteInstance(id: String) async throws {
        return try await gameCenterLeaderboardsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsDeleteInstance(urlString: String) async throws {
        return try await gameCenterLeaderboardsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterLeaderboardsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterLeaderboardsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterLeaderboardsGetInstance: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterLeaderboardsGetInstance: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardLocalizations
     */
    public enum FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGetInstance: String, CaseIterable {
        case formatteroverride = "formatterOverride"
        case formattersuffix = "formatterSuffix"
        case formattersuffixsingular = "formatterSuffixSingular"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case gamecenterleaderboardimage = "gameCenterLeaderboardImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGetInstance: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGetInstance(id: String, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsGetInstance]? = nil, include: [Include_gameCenterLeaderboardsGetInstance]? = nil, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGetInstance]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGetInstance]? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsGetInstanceWithRequestBuilder(id: id, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, include: include, fieldsGameCenterLeaderboardLocalizations: fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitLocalizations: limitLocalizations, limitReleases: limitReleases).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGetInstance(urlString: String) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsGetInstanceWithRequestBuilder(id: String, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsGetInstance]? = nil, include: [Include_gameCenterLeaderboardsGetInstance]? = nil, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGetInstance]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGetInstance]? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) -> RequestBuilder<GameCenterLeaderboardResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardLocalizations]": (wrappedValue: fieldsGameCenterLeaderboardLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardLocalizations
     */
    public enum FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case formatteroverride = "formatterOverride"
        case formattersuffix = "formatterSuffix"
        case formattersuffixsingular = "formatterSuffixSingular"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case gamecenterleaderboardimage = "gameCenterLeaderboardImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardSets
     */
    public enum FieldsGameCenterLeaderboardSets_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case groupleaderboardset = "groupLeaderboardSet"
        case localizations = "localizations"
        case referencename = "referenceName"
        case releases = "releases"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelated(id: String, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedWithRequestBuilder(id: id, fieldsGameCenterLeaderboardLocalizations: fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardSets: fieldsGameCenterLeaderboardSets, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limitGameCenterLeaderboardSets: limitGameCenterLeaderboardSets, limitLocalizations: limitLocalizations, limitReleases: limitReleases, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelated(urlString: String) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardSets: (query) the fields to include for returned resources of type gameCenterLeaderboardSets (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limitGameCenterLeaderboardSets: (query) maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedWithRequestBuilder(id: String, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboardSets: [FieldsGameCenterLeaderboardSets_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil, limitGameCenterLeaderboardSets: Int? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterLeaderboardsGroupLeaderboardGetToOneRelated]? = nil) -> RequestBuilder<GameCenterLeaderboardResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}/groupLeaderboard"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterLeaderboardLocalizations]": (wrappedValue: fieldsGameCenterLeaderboardLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardSets]": (wrappedValue: fieldsGameCenterLeaderboardSets?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit[gameCenterLeaderboardSets]": (wrappedValue: limitGameCenterLeaderboardSets?.encodeToJSON(), isExplode: true),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: GameCenterLeaderboardGroupLeaderboardLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship(id: String) async throws -> GameCenterLeaderboardGroupLeaderboardLinkageResponse {
        return try await gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardGroupLeaderboardLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship(urlString: String) async throws -> GameCenterLeaderboardGroupLeaderboardLinkageResponse {
        return try await gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardGroupLeaderboardLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterLeaderboardGroupLeaderboardLinkageRequest: (body) Related linkage 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship(id: String, gameCenterLeaderboardGroupLeaderboardLinkageRequest: GameCenterLeaderboardGroupLeaderboardLinkageRequest) async throws {
        return try await gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipWithRequestBuilder(id: id, gameCenterLeaderboardGroupLeaderboardLinkageRequest: gameCenterLeaderboardGroupLeaderboardLinkageRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship(urlString: String) async throws {
        return try await gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterLeaderboardGroupLeaderboardLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipWithRequestBuilder(id: String, gameCenterLeaderboardGroupLeaderboardLinkageRequest: GameCenterLeaderboardGroupLeaderboardLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterLeaderboardGroupLeaderboardLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardLocalizations
     */
    public enum FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsLocalizationsGetToManyRelated: String, CaseIterable {
        case formatteroverride = "formatterOverride"
        case formattersuffix = "formatterSuffix"
        case formattersuffixsingular = "formatterSuffixSingular"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case gamecenterleaderboardimage = "gameCenterLeaderboardImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardImages
     */
    public enum FieldsGameCenterLeaderboardImages_gameCenterLeaderboardsLocalizationsGetToManyRelated: String, CaseIterable {
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case gamecenterleaderboardlocalization = "gameCenterLeaderboardLocalization"
        case imageasset = "imageAsset"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterLeaderboardsLocalizationsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterLeaderboardsLocalizationsGetToManyRelated: String, CaseIterable {
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case gamecenterleaderboardimage = "gameCenterLeaderboardImage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardImages: (query) the fields to include for returned resources of type gameCenterLeaderboardImages (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterLeaderboardLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsLocalizationsGetToManyRelated(id: String, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardImages: [FieldsGameCenterLeaderboardImages_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil) async throws -> GameCenterLeaderboardLocalizationsResponse {
        return try await gameCenterLeaderboardsLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsGameCenterLeaderboardLocalizations: fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardImages: fieldsGameCenterLeaderboardImages, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsLocalizationsGetToManyRelated(urlString: String) async throws -> GameCenterLeaderboardLocalizationsResponse {
        return try await gameCenterLeaderboardsLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/localizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterLeaderboardLocalizations: (query) the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)
     - parameter fieldsGameCenterLeaderboardImages: (query) the fields to include for returned resources of type gameCenterLeaderboardImages (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterLeaderboardLocalizationsResponse> 
     */
    open class func gameCenterLeaderboardsLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsGameCenterLeaderboardLocalizations: [FieldsGameCenterLeaderboardLocalizations_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterLeaderboardImages: [FieldsGameCenterLeaderboardImages_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterLeaderboardsLocalizationsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterLeaderboardLocalizationsResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}/localizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterLeaderboardLocalizations]": (wrappedValue: fieldsGameCenterLeaderboardLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardImages]": (wrappedValue: fieldsGameCenterLeaderboardImages?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/localizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardLocalizationsResponse> 
     */
    open class func gameCenterLeaderboardsLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardLocalizationsResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterLeaderboardsReleasesGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboards
     */
    public enum FieldsGameCenterLeaderboards_gameCenterLeaderboardsReleasesGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case defaultformatter = "defaultFormatter"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case groupleaderboard = "groupLeaderboard"
        case localizations = "localizations"
        case recurrenceduration = "recurrenceDuration"
        case recurrencerule = "recurrenceRule"
        case recurrencestartdate = "recurrenceStartDate"
        case referencename = "referenceName"
        case releases = "releases"
        case scorerangeend = "scoreRangeEnd"
        case scorerangestart = "scoreRangeStart"
        case scoresorttype = "scoreSortType"
        case submissiontype = "submissionType"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter fieldsGameCenterLeaderboardReleases
     */
    public enum FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsReleasesGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
        case live = "live"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterLeaderboardsReleasesGetToManyRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterleaderboard = "gameCenterLeaderboard"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterLive: (query) filter by attribute &#39;live&#39; (optional)
     - parameter filterGameCenterDetail: (query) filter by id(s) of related &#39;gameCenterDetail&#39; (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: GameCenterLeaderboardReleasesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsReleasesGetToManyRelated(id: String, filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil) async throws -> GameCenterLeaderboardReleasesResponse {
        return try await gameCenterLeaderboardsReleasesGetToManyRelatedWithRequestBuilder(id: id, filterLive: filterLive, filterGameCenterDetail: filterGameCenterDetail, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterLeaderboards: fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardReleases: fieldsGameCenterLeaderboardReleases, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardReleasesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsReleasesGetToManyRelated(urlString: String) async throws -> GameCenterLeaderboardReleasesResponse {
        return try await gameCenterLeaderboardsReleasesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/releases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterLive: (query) filter by attribute &#39;live&#39; (optional)
     - parameter filterGameCenterDetail: (query) filter by id(s) of related &#39;gameCenterDetail&#39; (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterLeaderboards: (query) the fields to include for returned resources of type gameCenterLeaderboards (optional)
     - parameter fieldsGameCenterLeaderboardReleases: (query) the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterLeaderboardReleasesResponse> 
     */
    open class func gameCenterLeaderboardsReleasesGetToManyRelatedWithRequestBuilder(id: String, filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, fieldsGameCenterLeaderboards: [FieldsGameCenterLeaderboards_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, fieldsGameCenterLeaderboardReleases: [FieldsGameCenterLeaderboardReleases_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterLeaderboardsReleasesGetToManyRelated]? = nil) -> RequestBuilder<GameCenterLeaderboardReleasesResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}/releases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[live]": (wrappedValue: filterLive?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboards]": (wrappedValue: fieldsGameCenterLeaderboards?.encodeToJSON(), isExplode: false),
            "fields[gameCenterLeaderboardReleases]": (wrappedValue: fieldsGameCenterLeaderboardReleases?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardReleasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterLeaderboards/{id}/releases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardReleasesResponse> 
     */
    open class func gameCenterLeaderboardsReleasesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardReleasesResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardReleasesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterLeaderboardUpdateRequest: (body) GameCenterLeaderboard representation 
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsUpdateInstance(id: String, gameCenterLeaderboardUpdateRequest: GameCenterLeaderboardUpdateRequest) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsUpdateInstanceWithRequestBuilder(id: id, gameCenterLeaderboardUpdateRequest: gameCenterLeaderboardUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterLeaderboardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterLeaderboardsUpdateInstance(urlString: String) async throws -> GameCenterLeaderboardResponse {
        return try await gameCenterLeaderboardsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterLeaderboardUpdateRequest: (body) GameCenterLeaderboard representation 
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsUpdateInstanceWithRequestBuilder(id: String, gameCenterLeaderboardUpdateRequest: GameCenterLeaderboardUpdateRequest) -> RequestBuilder<GameCenterLeaderboardResponse> {
        var localVariablePath = "/v1/gameCenterLeaderboards/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterLeaderboardUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/gameCenterLeaderboards/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterLeaderboardResponse> 
     */
    open class func gameCenterLeaderboardsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterLeaderboardResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterLeaderboardResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
