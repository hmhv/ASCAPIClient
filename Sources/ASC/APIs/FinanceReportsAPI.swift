//
// FinanceReportsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FinanceReportsAPI {

    /**
     * enum for parameter filterReportType
     */
    public enum FilterReportType_financeReportsGetCollection: String, CaseIterable, JSONEncodable {
        case financial = "FINANCIAL"
        case financeDetail = "FINANCE_DETAIL"
    }

    /**

     - parameter filterRegionCode: (query) filter by attribute &#39;regionCode&#39; 
     - parameter filterReportDate: (query) filter by attribute &#39;reportDate&#39; 
     - parameter filterReportType: (query) filter by attribute &#39;reportType&#39; 
     - parameter filterVendorNumber: (query) filter by attribute &#39;vendorNumber&#39; 
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func financeReportsGetCollection(filterRegionCode: [String], filterReportDate: [String], filterReportType: [FilterReportType_financeReportsGetCollection], filterVendorNumber: [String]) async throws -> URL {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = financeReportsGetCollectionWithRequestBuilder(filterRegionCode: filterRegionCode, filterReportDate: filterReportDate, filterReportType: filterReportType, filterVendorNumber: filterVendorNumber).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func financeReportsGetCollection(urlString: String) async throws -> URL {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = financeReportsGetCollectionWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/financeReports
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter filterRegionCode: (query) filter by attribute &#39;regionCode&#39; 
     - parameter filterReportDate: (query) filter by attribute &#39;reportDate&#39; 
     - parameter filterReportType: (query) filter by attribute &#39;reportType&#39; 
     - parameter filterVendorNumber: (query) filter by attribute &#39;vendorNumber&#39; 
     - returns: RequestBuilder<URL> 
     */
    open class func financeReportsGetCollectionWithRequestBuilder(filterRegionCode: [String], filterReportDate: [String], filterReportType: [FilterReportType_financeReportsGetCollection], filterVendorNumber: [String]) -> RequestBuilder<URL> {
        let localVariablePath = "/v1/financeReports"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[regionCode]": filterRegionCode.encodeToJSON(),
            "filter[reportDate]": filterReportDate.encodeToJSON(),
            "filter[reportType]": filterReportType.encodeToJSON(),
            "filter[vendorNumber]": filterVendorNumber.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/financeReports
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<URL> 
     */
    open class func financeReportsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<URL> {
        let localVariableRequestBuilder: RequestBuilder<URL>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }
}
