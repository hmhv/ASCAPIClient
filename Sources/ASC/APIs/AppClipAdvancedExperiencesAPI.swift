//
// AppClipAdvancedExperiencesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppClipAdvancedExperiencesAPI {

    /**

     - parameter appClipAdvancedExperienceCreateRequest: (body) AppClipAdvancedExperience representation 
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesCreateInstance(appClipAdvancedExperienceCreateRequest: AppClipAdvancedExperienceCreateRequest) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(appClipAdvancedExperienceCreateRequest: appClipAdvancedExperienceCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesCreateInstance(urlString: String) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - POST /v1/appClipAdvancedExperiences
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter appClipAdvancedExperienceCreateRequest: (body) AppClipAdvancedExperience representation 
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(appClipAdvancedExperienceCreateRequest: AppClipAdvancedExperienceCreateRequest) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        let localVariablePath = "/v1/appClipAdvancedExperiences"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipAdvancedExperienceCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - POST /v1/appClipAdvancedExperiences
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppClipAdvancedExperiences
     */
    public enum FieldsAppClipAdvancedExperiences_appClipAdvancedExperiencesGetInstance: String, CaseIterable, JSONEncodable {
        case action = "action"
        case appclip = "appClip"
        case businesscategory = "businessCategory"
        case defaultlanguage = "defaultLanguage"
        case headerimage = "headerImage"
        case ispoweredby = "isPoweredBy"
        case link = "link"
        case localizations = "localizations"
        case place = "place"
        case placestatus = "placeStatus"
        case removed = "removed"
        case status = "status"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipAdvancedExperiencesGetInstance: String, CaseIterable, JSONEncodable {
        case appclip = "appClip"
        case headerimage = "headerImage"
        case localizations = "localizations"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAdvancedExperiences: (query) the fields to include for returned resources of type appClipAdvancedExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesGetInstance(id: String, fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences_appClipAdvancedExperiencesGetInstance]? = nil, include: [Include_appClipAdvancedExperiencesGetInstance]? = nil, limitLocalizations: Int? = nil) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesGetInstanceWithRequestBuilder(id: id, fieldsAppClipAdvancedExperiences: fieldsAppClipAdvancedExperiences, include: include, limitLocalizations: limitLocalizations).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesGetInstance(urlString: String) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesGetInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appClipAdvancedExperiences/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAdvancedExperiences: (query) the fields to include for returned resources of type appClipAdvancedExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesGetInstanceWithRequestBuilder(id: String, fieldsAppClipAdvancedExperiences: [FieldsAppClipAdvancedExperiences_appClipAdvancedExperiencesGetInstance]? = nil, include: [Include_appClipAdvancedExperiencesGetInstance]? = nil, limitLocalizations: Int? = nil) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        var localVariablePath = "/v1/appClipAdvancedExperiences/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClipAdvancedExperiences]": fieldsAppClipAdvancedExperiences?.encodeToJSON(),
            "include": include?.encodeToJSON(),
            "limit[localizations]": limitLocalizations?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appClipAdvancedExperiences/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appClipAdvancedExperienceUpdateRequest: (body) AppClipAdvancedExperience representation 
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesUpdateInstance(id: String, appClipAdvancedExperienceUpdateRequest: AppClipAdvancedExperienceUpdateRequest) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(id: id, appClipAdvancedExperienceUpdateRequest: appClipAdvancedExperienceUpdateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipAdvancedExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appClipAdvancedExperiencesUpdateInstance(urlString: String) async throws -> AppClipAdvancedExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - PATCH /v1/appClipAdvancedExperiences/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appClipAdvancedExperienceUpdateRequest: (body) AppClipAdvancedExperience representation 
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(id: String, appClipAdvancedExperienceUpdateRequest: AppClipAdvancedExperienceUpdateRequest) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        var localVariablePath = "/v1/appClipAdvancedExperiences/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipAdvancedExperienceUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - PATCH /v1/appClipAdvancedExperiences/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil)
    }
}
