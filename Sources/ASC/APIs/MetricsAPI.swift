//
// MetricsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MetricsAPI {

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_appsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case betatesters = "betaTesters"
    }

    /**
     * enum for parameter period
     */
    public enum Period_appsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case p7D = "P7D"
        case p30D = "P30D"
        case p90D = "P90D"
        case p365D = "P365D"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTesterUsagesGetMetrics(id: String, limit: Int? = nil, groupBy: [GroupBy_appsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_appsBetaTesterUsagesGetMetrics? = nil) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await appsBetaTesterUsagesGetMetricsWithRequestBuilder(id: id, limit: limit, groupBy: groupBy, filterBetaTesters: filterBetaTesters, period: period).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appsBetaTesterUsagesGetMetrics(urlString: String) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await appsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/apps/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func appsBetaTesterUsagesGetMetricsWithRequestBuilder(id: String, limit: Int? = nil, groupBy: [GroupBy_appsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_appsBetaTesterUsagesGetMetrics? = nil) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        var localVariablePath = "/v1/apps/{id}/metrics/betaTesterUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[betaTesters]": (wrappedValue: filterBetaTesters?.encodeToJSON(), isExplode: false),
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/apps/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func appsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_betaGroupsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case betatesters = "betaTesters"
    }

    /**
     * enum for parameter period
     */
    public enum Period_betaGroupsBetaTesterUsagesGetMetrics: String, CaseIterable {
        case p7D = "P7D"
        case p30D = "P30D"
        case p90D = "P90D"
        case p365D = "P365D"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaGroupsBetaTesterUsagesGetMetrics(id: String, limit: Int? = nil, groupBy: [GroupBy_betaGroupsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_betaGroupsBetaTesterUsagesGetMetrics? = nil) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await betaGroupsBetaTesterUsagesGetMetricsWithRequestBuilder(id: id, limit: limit, groupBy: groupBy, filterBetaTesters: filterBetaTesters, period: period).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppsBetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaGroupsBetaTesterUsagesGetMetrics(urlString: String) async throws -> AppsBetaTesterUsagesV1MetricResponse {
        return try await betaGroupsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/betaGroups/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterBetaTesters: (query) filter by &#39;betaTesters&#39; relationship dimension (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func betaGroupsBetaTesterUsagesGetMetricsWithRequestBuilder(id: String, limit: Int? = nil, groupBy: [GroupBy_betaGroupsBetaTesterUsagesGetMetrics]? = nil, filterBetaTesters: String? = nil, period: Period_betaGroupsBetaTesterUsagesGetMetrics? = nil) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        var localVariablePath = "/v1/betaGroups/{id}/metrics/betaTesterUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[betaTesters]": (wrappedValue: filterBetaTesters?.encodeToJSON(), isExplode: false),
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/betaGroups/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> 
     */
    open class func betaGroupsBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<AppsBetaTesterUsagesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppsBetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter period
     */
    public enum Period_betaTestersBetaTesterUsagesGetMetrics: String, CaseIterable {
        case p7D = "P7D"
        case p30D = "P30D"
        case p90D = "P90D"
        case p365D = "P365D"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterApps: (query) filter by &#39;apps&#39; relationship dimension 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: BetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaTestersBetaTesterUsagesGetMetrics(id: String, filterApps: String, limit: Int? = nil, period: Period_betaTestersBetaTesterUsagesGetMetrics? = nil) async throws -> BetaTesterUsagesV1MetricResponse {
        return try await betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(id: id, filterApps: filterApps, limit: limit, period: period).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaTesterUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func betaTestersBetaTesterUsagesGetMetrics(urlString: String) async throws -> BetaTesterUsagesV1MetricResponse {
        return try await betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/betaTesters/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterApps: (query) filter by &#39;apps&#39; relationship dimension 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: RequestBuilder<BetaTesterUsagesV1MetricResponse> 
     */
    open class func betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(id: String, filterApps: String, limit: Int? = nil, period: Period_betaTestersBetaTesterUsagesGetMetrics? = nil) -> RequestBuilder<BetaTesterUsagesV1MetricResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/metrics/betaTesterUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "filter[apps]": (wrappedValue: filterApps.encodeToJSON(), isExplode: false),
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/betaTesters/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaTesterUsagesV1MetricResponse> 
     */
    open class func betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<BetaTesterUsagesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaTesterUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - returns: BetaBuildUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildUsagesGetMetrics(id: String, limit: Int? = nil) async throws -> BetaBuildUsagesV1MetricResponse {
        return try await buildsBetaBuildUsagesGetMetricsWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BetaBuildUsagesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildsBetaBuildUsagesGetMetrics(urlString: String) async throws -> BetaBuildUsagesV1MetricResponse {
        return try await buildsBetaBuildUsagesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/builds/{id}/metrics/betaBuildUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - returns: RequestBuilder<BetaBuildUsagesV1MetricResponse> 
     */
    open class func buildsBetaBuildUsagesGetMetricsWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BetaBuildUsagesV1MetricResponse> {
        var localVariablePath = "/v1/builds/{id}/metrics/betaBuildUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaBuildUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/builds/{id}/metrics/betaBuildUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BetaBuildUsagesV1MetricResponse> 
     */
    open class func buildsBetaBuildUsagesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<BetaBuildUsagesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<BetaBuildUsagesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterDetailsClassicMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterDetailsClassicMatchmakingRequestsGetMetrics: String, CaseIterable {
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterDetailsClassicMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterDetailsClassicMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingAppRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterDetailsClassicMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterDetailsClassicMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterDetailsClassicMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterDetailsClassicMatchmakingRequestsGetMetrics? = nil, sort: [Sort_gameCenterDetailsClassicMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingAppRequestsV1MetricResponse {
        return try await gameCenterDetailsClassicMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingAppRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterDetailsClassicMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingAppRequestsV1MetricResponse {
        return try await gameCenterDetailsClassicMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> 
     */
    open class func gameCenterDetailsClassicMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterDetailsClassicMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterDetailsClassicMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterDetailsClassicMatchmakingRequestsGetMetrics? = nil, sort: [Sort_gameCenterDetailsClassicMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> 
     */
    open class func gameCenterDetailsClassicMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics: String, CaseIterable {
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingAppRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics? = nil, sort: [Sort_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingAppRequestsV1MetricResponse {
        return try await gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingAppRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingAppRequestsV1MetricResponse {
        return try await gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> 
     */
    open class func gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics? = nil, sort: [Sort_gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> 
     */
    open class func gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingAppRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case averagenumberofrequests = "averageNumberOfRequests"
        case averagenumberofrequests2 = "-averageNumberOfRequests"
        case count = "count"
        case count2 = "-count"
        case p50numberofrequests = "p50NumberOfRequests"
        case p50numberofrequests2 = "-p50NumberOfRequests"
        case p95numberofrequests = "p95NumberOfRequests"
        case p95numberofrequests2 = "-p95NumberOfRequests"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, filterGameCenterDetail: filterGameCenterDetail, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics: String, CaseIterable {
        case averagenumberofrequests = "averageNumberOfRequests"
        case averagenumberofrequests2 = "-averageNumberOfRequests"
        case count = "count"
        case count2 = "-count"
        case p50numberofrequests = "p50NumberOfRequests"
        case p50numberofrequests2 = "-p50NumberOfRequests"
        case p95numberofrequests = "p95NumberOfRequests"
        case p95numberofrequests2 = "-p95NumberOfRequests"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueSizesV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueSizesV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueSizesV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case result = "result"
    }

    /**
     * enum for parameter filterResult
     */
    public enum FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case matched = "MATCHED"
        case canceled = "CANCELED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics: String, CaseIterable {
        case averagesecondsinqueue = "averageSecondsInQueue"
        case averagesecondsinqueue2 = "-averageSecondsInQueue"
        case count = "count"
        case count2 = "-count"
        case p50secondsinqueue = "p50SecondsInQueue"
        case p50secondsinqueue2 = "-p50SecondsInQueue"
        case p95secondsinqueue = "p95SecondsInQueue"
        case p95secondsinqueue2 = "-p95SecondsInQueue"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, filterGameCenterDetail: filterGameCenterDetail, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingQueueRequestsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingQueueRequestsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterDetail: (query) filter by &#39;gameCenterDetail&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil, filterResult: FilterResult_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics? = nil, filterGameCenterDetail: String? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueueRequestsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics: String, CaseIterable {
        case averageplayercount = "averagePlayerCount"
        case averageplayercount2 = "-averagePlayerCount"
        case count = "count"
        case count2 = "-count"
        case p50playercount = "p50PlayerCount"
        case p50playercount2 = "-p50PlayerCount"
        case p95playercount = "p95PlayerCount"
        case p95playercount2 = "-p95PlayerCount"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingSessionsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics]? = nil) async throws -> GameCenterMatchmakingSessionsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingSessionsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingSessionsV1MetricResponse {
        return try await gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics, limit: Int? = nil, sort: [Sort_gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingSessionsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics: String, CaseIterable {
        case gamecentermatchmakingqueue = "gameCenterMatchmakingQueue"
        case result = "result"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics: String, CaseIterable {
        case count = "count"
        case count2 = "-count"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics]? = nil, filterResult: String? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics]? = nil) async throws -> GameCenterMatchmakingBooleanRuleResultsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterResult: filterResult, filterGameCenterMatchmakingQueue: filterGameCenterMatchmakingQueue, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingBooleanRuleResultsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterResult: (query) filter by &#39;result&#39; attribute dimension (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics]? = nil, filterResult: String? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[result]": (wrappedValue: filterResult?.encodeToJSON(), isExplode: false),
            "filter[gameCenterMatchmakingQueue]": (wrappedValue: filterGameCenterMatchmakingQueue?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics: String, CaseIterable {
        case gamecentermatchmakingqueue = "gameCenterMatchmakingQueue"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics: String, CaseIterable {
        case averageresult = "averageResult"
        case averageresult2 = "-averageResult"
        case count = "count"
        case count2 = "-count"
        case p50result = "p50Result"
        case p50result2 = "-p50Result"
        case p95result = "p95Result"
        case p95result2 = "-p95Result"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingNumberRuleResultsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics]? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics]? = nil) async throws -> GameCenterMatchmakingNumberRuleResultsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterGameCenterMatchmakingQueue: filterGameCenterMatchmakingQueue, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingNumberRuleResultsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingNumberRuleResultsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics]? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[gameCenterMatchmakingQueue]": (wrappedValue: filterGameCenterMatchmakingQueue?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics: String, CaseIterable {
        case p1D = "P1D"
        case pt1h = "PT1H"
        case pt15m = "PT15M"
    }

    /**
     * enum for parameter groupBy
     */
    public enum GroupBy_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics: String, CaseIterable {
        case gamecentermatchmakingqueue = "gameCenterMatchmakingQueue"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics: String, CaseIterable {
        case count = "count"
        case count2 = "-count"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: GameCenterMatchmakingRuleErrorsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics]? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics]? = nil) async throws -> GameCenterMatchmakingRuleErrorsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsWithRequestBuilder(id: id, granularity: granularity, limit: limit, groupBy: groupBy, filterGameCenterMatchmakingQueue: filterGameCenterMatchmakingQueue, sort: sort).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: GameCenterMatchmakingRuleErrorsV1MetricResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(urlString: String) async throws -> GameCenterMatchmakingRuleErrorsV1MetricResponse {
        return try await gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter granularity: (query) the granularity of the per-group dataset 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter groupBy: (query) the dimension by which to group the results (optional)
     - parameter filterGameCenterMatchmakingQueue: (query) filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)
     - parameter sort: (query) comma-separated list of sort expressions; metrics will be sorted as specified (optional)
     - returns: RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsWithRequestBuilder(id: String, granularity: Granularity_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics, limit: Int? = nil, groupBy: [GroupBy_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics]? = nil, filterGameCenterMatchmakingQueue: String? = nil, sort: [Sort_gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics]? = nil) -> RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: false),
            "groupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: false),
            "filter[gameCenterMatchmakingQueue]": (wrappedValue: filterGameCenterMatchmakingQueue?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse> 
     */
    open class func gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsWithRequestBuilder(urlString: String) -> RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse> {
        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleErrorsV1MetricResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: [:], headers: nil, requiresAuthentication: true)
    }
}
