//
// CiMacOsVersionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CiMacOsVersionsAPI {

    /**
     * enum for parameter fieldsCiMacOsVersions
     */
    public enum FieldsCiMacOsVersions_ciMacOsVersionsGetCollection: String, CaseIterable, JSONEncodable {
        case name = "name"
        case version = "version"
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciMacOsVersionsGetCollection: String, CaseIterable, JSONEncodable {
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter fieldsCiXcodeVersions
     */
    public enum FieldsCiXcodeVersions_ciMacOsVersionsGetCollection: String, CaseIterable, JSONEncodable {
        case macosversions = "macOsVersions"
        case name = "name"
        case testdestinations = "testDestinations"
        case version = "version"
    }

    /**

     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter limitXcodeVersions: (query) maximum number of related xcodeVersions returned (when they are included) (optional)
     - returns: CiMacOsVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsGetCollection(fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsGetCollection]? = nil, limit: Int? = nil, include: [Include_ciMacOsVersionsGetCollection]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsGetCollection]? = nil, limitXcodeVersions: Int? = nil) async throws -> CiMacOsVersionsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsGetCollectionWithRequestBuilder(fieldsCiMacOsVersions: fieldsCiMacOsVersions, limit: limit, include: include, fieldsCiXcodeVersions: fieldsCiXcodeVersions, limitXcodeVersions: limitXcodeVersions).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiMacOsVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsGetCollection(urlString: String) async throws -> CiMacOsVersionsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsGetCollectionWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/ciMacOsVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter limitXcodeVersions: (query) maximum number of related xcodeVersions returned (when they are included) (optional)
     - returns: RequestBuilder<CiMacOsVersionsResponse> 
     */
    open class func ciMacOsVersionsGetCollectionWithRequestBuilder(fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsGetCollection]? = nil, limit: Int? = nil, include: [Include_ciMacOsVersionsGetCollection]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsGetCollection]? = nil, limitXcodeVersions: Int? = nil) -> RequestBuilder<CiMacOsVersionsResponse> {
        let localVariablePath = "/v1/ciMacOsVersions"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciMacOsVersions]": fieldsCiMacOsVersions?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "include": include?.encodeToJSON(),
            "fields[ciXcodeVersions]": fieldsCiXcodeVersions?.encodeToJSON(),
            "limit[xcodeVersions]": limitXcodeVersions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiMacOsVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/ciMacOsVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiMacOsVersionsResponse> 
     */
    open class func ciMacOsVersionsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<CiMacOsVersionsResponse> {
        let localVariableRequestBuilder: RequestBuilder<CiMacOsVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsCiMacOsVersions
     */
    public enum FieldsCiMacOsVersions_ciMacOsVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case name = "name"
        case version = "version"
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciMacOsVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter fieldsCiXcodeVersions
     */
    public enum FieldsCiXcodeVersions_ciMacOsVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case macosversions = "macOsVersions"
        case name = "name"
        case testdestinations = "testDestinations"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter limitXcodeVersions: (query) maximum number of related xcodeVersions returned (when they are included) (optional)
     - returns: CiMacOsVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsGetInstance(id: String, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsGetInstance]? = nil, include: [Include_ciMacOsVersionsGetInstance]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsGetInstance]? = nil, limitXcodeVersions: Int? = nil) async throws -> CiMacOsVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsGetInstanceWithRequestBuilder(id: id, fieldsCiMacOsVersions: fieldsCiMacOsVersions, include: include, fieldsCiXcodeVersions: fieldsCiXcodeVersions, limitXcodeVersions: limitXcodeVersions).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiMacOsVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsGetInstance(urlString: String) async throws -> CiMacOsVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsGetInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/ciMacOsVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter limitXcodeVersions: (query) maximum number of related xcodeVersions returned (when they are included) (optional)
     - returns: RequestBuilder<CiMacOsVersionResponse> 
     */
    open class func ciMacOsVersionsGetInstanceWithRequestBuilder(id: String, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsGetInstance]? = nil, include: [Include_ciMacOsVersionsGetInstance]? = nil, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsGetInstance]? = nil, limitXcodeVersions: Int? = nil) -> RequestBuilder<CiMacOsVersionResponse> {
        var localVariablePath = "/v1/ciMacOsVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciMacOsVersions]": fieldsCiMacOsVersions?.encodeToJSON(),
            "include": include?.encodeToJSON(),
            "fields[ciXcodeVersions]": fieldsCiXcodeVersions?.encodeToJSON(),
            "limit[xcodeVersions]": limitXcodeVersions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiMacOsVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/ciMacOsVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiMacOsVersionResponse> 
     */
    open class func ciMacOsVersionsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<CiMacOsVersionResponse> {
        let localVariableRequestBuilder: RequestBuilder<CiMacOsVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsCiXcodeVersions
     */
    public enum FieldsCiXcodeVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case macosversions = "macOsVersions"
        case name = "name"
        case testdestinations = "testDestinations"
        case version = "version"
    }

    /**
     * enum for parameter fieldsCiMacOsVersions
     */
    public enum FieldsCiMacOsVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case name = "name"
        case version = "version"
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciMacOsVersionsXcodeVersionsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case macosversions = "macOsVersions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitMacOsVersions: (query) maximum number of related macOsVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CiXcodeVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsXcodeVersionsGetToManyRelated(id: String, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitMacOsVersions: Int? = nil, include: [Include_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil) async throws -> CiXcodeVersionsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsXcodeVersionsGetToManyRelatedWithRequestBuilder(id: id, fieldsCiXcodeVersions: fieldsCiXcodeVersions, fieldsCiMacOsVersions: fieldsCiMacOsVersions, limit: limit, limitMacOsVersions: limitMacOsVersions, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CiXcodeVersionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ciMacOsVersionsXcodeVersionsGetToManyRelated(urlString: String) async throws -> CiXcodeVersionsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = ciMacOsVersionsXcodeVersionsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/ciMacOsVersions/{id}/xcodeVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitMacOsVersions: (query) maximum number of related macOsVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CiXcodeVersionsResponse> 
     */
    open class func ciMacOsVersionsXcodeVersionsGetToManyRelatedWithRequestBuilder(id: String, fieldsCiXcodeVersions: [FieldsCiXcodeVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil, fieldsCiMacOsVersions: [FieldsCiMacOsVersions_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil, limit: Int? = nil, limitMacOsVersions: Int? = nil, include: [Include_ciMacOsVersionsXcodeVersionsGetToManyRelated]? = nil) -> RequestBuilder<CiXcodeVersionsResponse> {
        var localVariablePath = "/v1/ciMacOsVersions/{id}/xcodeVersions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ciXcodeVersions]": fieldsCiXcodeVersions?.encodeToJSON(),
            "fields[ciMacOsVersions]": fieldsCiMacOsVersions?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "limit[macOsVersions]": limitMacOsVersions?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CiXcodeVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/ciMacOsVersions/{id}/xcodeVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CiXcodeVersionsResponse> 
     */
    open class func ciMacOsVersionsXcodeVersionsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CiXcodeVersionsResponse> {
        let localVariableRequestBuilder: RequestBuilder<CiXcodeVersionsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }
}
