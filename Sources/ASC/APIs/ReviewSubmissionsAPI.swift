//
// ReviewSubmissionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ReviewSubmissionsAPI {

    /**

     - parameter reviewSubmissionCreateRequest: (body) ReviewSubmission representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsCreateInstance(reviewSubmissionCreateRequest: ReviewSubmissionCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsCreateInstanceWithRequestBuilder(reviewSubmissionCreateRequest: reviewSubmissionCreateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsCreateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsCreateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v1/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter reviewSubmissionCreateRequest: (body) ReviewSubmission representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsCreateInstanceWithRequestBuilder(reviewSubmissionCreateRequest: ReviewSubmissionCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        let localVariablePath = "/v1/reviewSubmissions"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reviewSubmissionCreateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - POST /v1/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsCreateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_reviewSubmissionsGetCollection: String, Sendable, CaseIterable {
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
        case visionOs = "VISION_OS"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_reviewSubmissionsGetCollection: String, Sendable, CaseIterable {
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case unresolvedIssues = "UNRESOLVED_ISSUES"
        case canceling = "CANCELING"
        case completing = "COMPLETING"
        case complete = "COMPLETE"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_reviewSubmissionsGetCollection: String, Sendable, CaseIterable {
        case platform = "platform"
        case submitteddate = "submittedDate"
        case state = "state"
        case app = "app"
        case items = "items"
        case appstoreversionforreview = "appStoreVersionForReview"
        case submittedbyactor = "submittedByActor"
        case lastupdatedbyactor = "lastUpdatedByActor"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsGetCollection: String, Sendable, CaseIterable {
        case state = "state"
        case appstoreversion = "appStoreVersion"
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appevent = "appEvent"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsGetCollection: String, Sendable, CaseIterable {
        case app = "app"
        case items = "items"
        case appstoreversionforreview = "appStoreVersionForReview"
        case submittedbyactor = "submittedByActor"
        case lastupdatedbyactor = "lastUpdatedByActor"
    }

    /**

     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsGetCollection(filterApp: [String], filterPlatform: [FilterPlatform_reviewSubmissionsGetCollection]? = nil, filterState: [FilterState_reviewSubmissionsGetCollection]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_reviewSubmissionsGetCollection]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsGetCollection]? = nil, limit: Int? = nil, include: [Include_reviewSubmissionsGetCollection]? = nil, limitItems: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionsResponse {
        return try await reviewSubmissionsGetCollectionWithRequestBuilder(filterApp: filterApp, filterPlatform: filterPlatform, filterState: filterState, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, limit: limit, include: include, limitItems: limitItems, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsGetCollection(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionsResponse {
        return try await reviewSubmissionsGetCollectionWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterApp: (query) filter by id(s) of related &#39;app&#39; 
     - parameter filterPlatform: (query) filter by attribute &#39;platform&#39; (optional)
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func reviewSubmissionsGetCollectionWithRequestBuilder(filterApp: [String], filterPlatform: [FilterPlatform_reviewSubmissionsGetCollection]? = nil, filterState: [FilterState_reviewSubmissionsGetCollection]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions_reviewSubmissionsGetCollection]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsGetCollection]? = nil, limit: Int? = nil, include: [Include_reviewSubmissionsGetCollection]? = nil, limitItems: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionsResponse> {
        let localVariablePath = "/v1/reviewSubmissions"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[platform]": (wrappedValue: filterPlatform?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[app]": (wrappedValue: filterApp.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[reviewSubmissionItems]": (wrappedValue: fieldsReviewSubmissionItems?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[items]": (wrappedValue: limitItems?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/reviewSubmissions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func reviewSubmissionsGetCollectionWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_reviewSubmissionsGetInstance: String, Sendable, CaseIterable {
        case platform = "platform"
        case submitteddate = "submittedDate"
        case state = "state"
        case app = "app"
        case items = "items"
        case appstoreversionforreview = "appStoreVersionForReview"
        case submittedbyactor = "submittedByActor"
        case lastupdatedbyactor = "lastUpdatedByActor"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsGetInstance: String, Sendable, CaseIterable {
        case state = "state"
        case appstoreversion = "appStoreVersion"
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appevent = "appEvent"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsGetInstance: String, Sendable, CaseIterable {
        case app = "app"
        case items = "items"
        case appstoreversionforreview = "appStoreVersionForReview"
        case submittedbyactor = "submittedByActor"
        case lastupdatedbyactor = "lastUpdatedByActor"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsGetInstance(id: String, fieldsReviewSubmissions: [FieldsReviewSubmissions_reviewSubmissionsGetInstance]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsGetInstance]? = nil, include: [Include_reviewSubmissionsGetInstance]? = nil, limitItems: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsGetInstanceWithRequestBuilder(id: id, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, include: include, limitItems: limitItems, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsGetInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsGetInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/reviewSubmissions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsGetInstanceWithRequestBuilder(id: String, fieldsReviewSubmissions: [FieldsReviewSubmissions_reviewSubmissionsGetInstance]? = nil, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsGetInstance]? = nil, include: [Include_reviewSubmissionsGetInstance]? = nil, limitItems: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        var localVariablePath = "/v1/reviewSubmissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[reviewSubmissions]": (wrappedValue: fieldsReviewSubmissions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[reviewSubmissionItems]": (wrappedValue: fieldsReviewSubmissionItems?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[items]": (wrappedValue: limitItems?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/reviewSubmissions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsGetInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case state = "state"
        case appstoreversion = "appStoreVersion"
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appevent = "appEvent"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageVersions
     */
    public enum FieldsAppCustomProductPageVersions_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case version = "version"
        case state = "state"
        case deeplink = "deepLink"
        case appcustomproductpage = "appCustomProductPage"
        case appcustomproductpagelocalizations = "appCustomProductPageLocalizations"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case platform = "platform"
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case badge = "badge"
        case eventstate = "eventState"
        case deeplink = "deepLink"
        case purchaserequirement = "purchaseRequirement"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purpose = "purpose"
        case territoryschedules = "territorySchedules"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case localizations = "localizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsItemsGetToManyRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appevent = "appEvent"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionItemsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsItemsGetToManyRelated(id: String, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_reviewSubmissionsItemsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_reviewSubmissionsItemsGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionItemsResponse {
        return try await reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(id: id, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPageVersions: fieldsAppCustomProductPageVersions, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppEvents: fieldsAppEvents, limit: limit, include: include, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionItemsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsItemsGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionItemsResponse {
        return try await reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/reviewSubmissions/{id}/items
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionItemsResponse> 
     */
    open class func reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(id: String, fieldsReviewSubmissionItems: [FieldsReviewSubmissionItems_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppCustomProductPageVersions: [FieldsAppCustomProductPageVersions_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_reviewSubmissionsItemsGetToManyRelated]? = nil, fieldsAppEvents: [FieldsAppEvents_reviewSubmissionsItemsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_reviewSubmissionsItemsGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionItemsResponse> {
        var localVariablePath = "/v1/reviewSubmissions/{id}/items"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[reviewSubmissionItems]": (wrappedValue: fieldsReviewSubmissionItems?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appCustomProductPageVersions]": (wrappedValue: fieldsAppCustomProductPageVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appEvents]": (wrappedValue: fieldsAppEvents?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionItemsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/reviewSubmissions/{id}/items
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionItemsResponse> 
     */
    open class func reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionItemsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionItemsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter reviewSubmissionUpdateRequest: (body) ReviewSubmission representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsUpdateInstance(id: String, reviewSubmissionUpdateRequest: ReviewSubmissionUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsUpdateInstanceWithRequestBuilder(id: id, reviewSubmissionUpdateRequest: reviewSubmissionUpdateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewSubmissionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reviewSubmissionsUpdateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewSubmissionResponse {
        return try await reviewSubmissionsUpdateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /v1/reviewSubmissions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter reviewSubmissionUpdateRequest: (body) ReviewSubmission representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsUpdateInstanceWithRequestBuilder(id: String, reviewSubmissionUpdateRequest: ReviewSubmissionUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        var localVariablePath = "/v1/reviewSubmissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reviewSubmissionUpdateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - PATCH /v1/reviewSubmissions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsUpdateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<ReviewSubmissionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
