//
// InAppPurchasePriceSchedulesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InAppPurchasePriceSchedulesAPI {

    /**

     - parameter inAppPurchasePriceScheduleCreateRequest: (body) InAppPurchasePriceSchedule representation 
     - returns: InAppPurchasePriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesCreateInstance(inAppPurchasePriceScheduleCreateRequest: InAppPurchasePriceScheduleCreateRequest) async throws -> InAppPurchasePriceScheduleResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesCreateInstanceWithRequestBuilder(inAppPurchasePriceScheduleCreateRequest: inAppPurchasePriceScheduleCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: InAppPurchasePriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesCreateInstance(urlString: String) async throws -> InAppPurchasePriceScheduleResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesCreateInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - POST /v1/inAppPurchasePriceSchedules
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter inAppPurchasePriceScheduleCreateRequest: (body) InAppPurchasePriceSchedule representation 
     - returns: RequestBuilder<InAppPurchasePriceScheduleResponse> 
     */
    open class func inAppPurchasePriceSchedulesCreateInstanceWithRequestBuilder(inAppPurchasePriceScheduleCreateRequest: InAppPurchasePriceScheduleCreateRequest) -> RequestBuilder<InAppPurchasePriceScheduleResponse> {
        let localVariablePath = "/v1/inAppPurchasePriceSchedules"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inAppPurchasePriceScheduleCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - POST /v1/inAppPurchasePriceSchedules
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<InAppPurchasePriceScheduleResponse> 
     */
    open class func inAppPurchasePriceSchedulesCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<InAppPurchasePriceScheduleResponse> {
        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsInAppPurchasePriceSchedules
     */
    public enum FieldsInAppPurchasePriceSchedules_inAppPurchasePriceSchedulesGetInstance: String, CaseIterable, JSONEncodable {
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasePriceSchedulesGetInstance: String, CaseIterable, JSONEncodable {
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsInAppPurchasePrices
     */
    public enum FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesGetInstance: String, CaseIterable, JSONEncodable {
        case inapppurchasepricepoint = "inAppPurchasePricePoint"
        case inapppurchasev2 = "inAppPurchaseV2"
        case startdate = "startDate"
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - returns: InAppPurchasePriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesGetInstance(id: String, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasePriceSchedulesGetInstance]? = nil, include: [Include_inAppPurchasePriceSchedulesGetInstance]? = nil, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesGetInstance]? = nil, limitManualPrices: Int? = nil) async throws -> InAppPurchasePriceScheduleResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesGetInstanceWithRequestBuilder(id: id, fieldsInAppPurchasePriceSchedules: fieldsInAppPurchasePriceSchedules, include: include, fieldsInAppPurchasePrices: fieldsInAppPurchasePrices, limitManualPrices: limitManualPrices).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: InAppPurchasePriceScheduleResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesGetInstance(urlString: String) async throws -> InAppPurchasePriceScheduleResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesGetInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/inAppPurchasePriceSchedules/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - returns: RequestBuilder<InAppPurchasePriceScheduleResponse> 
     */
    open class func inAppPurchasePriceSchedulesGetInstanceWithRequestBuilder(id: String, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasePriceSchedulesGetInstance]? = nil, include: [Include_inAppPurchasePriceSchedulesGetInstance]? = nil, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesGetInstance]? = nil, limitManualPrices: Int? = nil) -> RequestBuilder<InAppPurchasePriceScheduleResponse> {
        var localVariablePath = "/v1/inAppPurchasePriceSchedules/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchasePriceSchedules]": fieldsInAppPurchasePriceSchedules?.encodeToJSON(),
            "include": include?.encodeToJSON(),
            "fields[inAppPurchasePrices]": fieldsInAppPurchasePrices?.encodeToJSON(),
            "limit[manualPrices]": limitManualPrices?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/inAppPurchasePriceSchedules/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<InAppPurchasePriceScheduleResponse> 
     */
    open class func inAppPurchasePriceSchedulesGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<InAppPurchasePriceScheduleResponse> {
        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePriceScheduleResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsInAppPurchasePricePoints
     */
    public enum FieldsInAppPurchasePricePoints_inAppPurchasePriceSchedulesManualPricesGetToManyRelated: String, CaseIterable, JSONEncodable {
        case customerprice = "customerPrice"
        case inapppurchasev2 = "inAppPurchaseV2"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchasePrices
     */
    public enum FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesManualPricesGetToManyRelated: String, CaseIterable, JSONEncodable {
        case inapppurchasepricepoint = "inAppPurchasePricePoint"
        case inapppurchasev2 = "inAppPurchaseV2"
        case startdate = "startDate"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_inAppPurchasePriceSchedulesManualPricesGetToManyRelated: String, CaseIterable, JSONEncodable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasePriceSchedulesManualPricesGetToManyRelated: String, CaseIterable, JSONEncodable {
        case inapppurchasepricepoint = "inAppPurchasePricePoint"
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: InAppPurchasePricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesManualPricesGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil) async throws -> InAppPurchasePricesResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesManualPricesGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsInAppPurchasePricePoints: fieldsInAppPurchasePricePoints, fieldsInAppPurchasePrices: fieldsInAppPurchasePrices, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: InAppPurchasePricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inAppPurchasePriceSchedulesManualPricesGetToManyRelated(urlString: String) async throws -> InAppPurchasePricesResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = inAppPurchasePriceSchedulesManualPricesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/inAppPurchasePriceSchedules/{id}/manualPrices
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchasePricesResponse> 
     */
    open class func inAppPurchasePriceSchedulesManualPricesGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasePriceSchedulesManualPricesGetToManyRelated]? = nil) -> RequestBuilder<InAppPurchasePricesResponse> {
        var localVariablePath = "/v1/inAppPurchasePriceSchedules/{id}/manualPrices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": filterTerritory?.encodeToJSON(),
            "fields[inAppPurchasePricePoints]": fieldsInAppPurchasePricePoints?.encodeToJSON(),
            "fields[inAppPurchasePrices]": fieldsInAppPurchasePrices?.encodeToJSON(),
            "fields[territories]": fieldsTerritories?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/inAppPurchasePriceSchedules/{id}/manualPrices
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<InAppPurchasePricesResponse> 
     */
    open class func inAppPurchasePriceSchedulesManualPricesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<InAppPurchasePricesResponse> {
        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }
}
