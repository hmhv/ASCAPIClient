//
// AppStoreVersionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AppStoreVersionsAPI {

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated: String, Sendable, CaseIterable {
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gamblingandcontests = "gamblingAndContests"
        case gambling = "gambling"
        case gamblingsimulated = "gamblingSimulated"
        case kidsageband = "kidsAgeBand"
        case lootbox = "lootBox"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case horrororfearthemes = "horrorOrFearThemes"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
        case violencerealistic = "violenceRealistic"
        case ageratingoverride = "ageRatingOverride"
        case koreaageratingoverride = "koreaAgeRatingOverride"
        case seventeenplus = "seventeenPlus"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AgeRatingDeclarationWithoutIncludesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelated(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AgeRatingDeclarationWithoutIncludesResponse {
        return try await appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(id: id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AgeRatingDeclarationWithoutIncludesResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AgeRatingDeclarationWithoutIncludesResponse {
        return try await appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/ageRatingDeclaration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgeRatingDeclarationWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_appStoreVersionsAlternativeDistributionPackageGetToOneRelated: String, Sendable, CaseIterable {
        case versions = "versions"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackageVersions
     */
    public enum FieldsAlternativeDistributionPackageVersions_appStoreVersionsAlternativeDistributionPackageGetToOneRelated: String, Sendable, CaseIterable {
        case url = "url"
        case urlexpirationdate = "urlExpirationDate"
        case version = "version"
        case filechecksum = "fileChecksum"
        case state = "state"
        case variants = "variants"
        case deltas = "deltas"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAlternativeDistributionPackageGetToOneRelated: String, Sendable, CaseIterable {
        case versions = "versions"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVersions: (query) maximum number of related versions returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAlternativeDistributionPackageGetToOneRelated(id: String, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, include: [Include_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, limitVersions: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AlternativeDistributionPackageResponse {
        return try await appStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithRequestBuilder(id: id, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions: fieldsAlternativeDistributionPackageVersions, include: include, limitVersions: limitVersions, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AlternativeDistributionPackageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAlternativeDistributionPackageGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AlternativeDistributionPackageResponse {
        return try await appStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/alternativeDistributionPackage
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter fieldsAlternativeDistributionPackageVersions: (query) the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitVersions: (query) maximum number of related versions returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func appStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithRequestBuilder(id: String, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, fieldsAlternativeDistributionPackageVersions: [FieldsAlternativeDistributionPackageVersions_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, include: [Include_appStoreVersionsAlternativeDistributionPackageGetToOneRelated]? = nil, limitVersions: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/alternativeDistributionPackage"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[alternativeDistributionPackageVersions]": (wrappedValue: fieldsAlternativeDistributionPackageVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[versions]": (wrappedValue: limitVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/alternativeDistributionPackage
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AlternativeDistributionPackageResponse> 
     */
    open class func appStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AlternativeDistributionPackageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AlternativeDistributionPackageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case bundleid = "bundleId"
        case app = "app"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperienceLocalizations
     */
    public enum FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case locale = "locale"
        case subtitle = "subtitle"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
    }

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case invocationurls = "invocationUrls"
        case appclipdefaultexperience = "appClipDefaultExperience"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, Sendable, CaseIterable {
        case appclip = "appClip"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelated(id: String, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClips: [FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppClipDefaultExperienceResponse {
        return try await appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(id: id, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppClips: fieldsAppClips, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations: fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, include: include, limitAppClipDefaultExperienceLocalizations: limitAppClipDefaultExperienceLocalizations, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppClipDefaultExperienceResponse {
        return try await appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(id: String, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClips: [FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appClips]": (wrappedValue: fieldsAppClips?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appClipDefaultExperienceLocalizations]": (wrappedValue: fieldsAppClipDefaultExperienceLocalizations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appClipAppStoreReviewDetails]": (wrappedValue: fieldsAppClipAppStoreReviewDetails?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[appClipDefaultExperienceLocalizations]": (wrappedValue: limitAppClipDefaultExperienceLocalizations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionAppClipDefaultExperienceLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionAppClipDefaultExperienceLinkageResponse {
        return try await appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionAppClipDefaultExperienceLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionAppClipDefaultExperienceLinkageResponse {
        return try await appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionAppClipDefaultExperienceLinkageRequest: (body) Related linkage 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(id: String, appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(id: id, appStoreVersionAppClipDefaultExperienceLinkageRequest: appStoreVersionAppClipDefaultExperienceLinkageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionAppClipDefaultExperienceLinkageRequest: (body) Related linkage 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(id: String, appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionAppClipDefaultExperienceLinkageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, Sendable, CaseIterable {
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case contactemail = "contactEmail"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
        case appstoreversion = "appStoreVersion"
        case appstorereviewattachments = "appStoreReviewAttachments"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppStoreReviewAttachments
     */
    public enum FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, Sendable, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case appstorereviewdetail = "appStoreReviewDetail"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case appstorereviewattachments = "appStoreReviewAttachments"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelated(id: String, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, limitAppStoreReviewAttachments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreReviewDetailResponse {
        return try await appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppStoreReviewAttachments: fieldsAppStoreReviewAttachments, include: include, limitAppStoreReviewAttachments: limitAppStoreReviewAttachments, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreReviewDetailResponse {
        return try await appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreReviewDetailResponse> 
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, limitAppStoreReviewAttachments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreReviewDetailResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreReviewDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreReviewDetails]": (wrappedValue: fieldsAppStoreReviewDetails?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreReviewAttachments]": (wrappedValue: fieldsAppStoreReviewAttachments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[appStoreReviewAttachments]": (wrappedValue: limitAppStoreReviewAttachments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreReviewDetailResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreReviewDetailResponse> 
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreReviewDetailResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreReviewDetailResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, Sendable, CaseIterable {
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatments
     */
    public enum FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case appicon = "appIcon"
        case appiconname = "appIconName"
        case promoteddate = "promotedDate"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appstoreversionexperimenttreatmentlocalizations = "appStoreVersionExperimentTreatmentLocalizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionExperimentsResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionExperimentsResponse {
        return try await appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(id: id, filterState: filterState, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments: fieldsAppStoreVersionExperimentTreatments, limit: limit, include: include, limitAppStoreVersionExperimentTreatments: limitAppStoreVersionExperimentTreatments, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionExperimentsResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionExperimentsResponse {
        return try await appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperiments
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionExperimentsResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionExperimentsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionExperiments"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperimentTreatments]": (wrappedValue: fieldsAppStoreVersionExperimentTreatments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[appStoreVersionExperimentTreatments]": (wrappedValue: limitAppStoreVersionExperimentTreatments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperiments
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionExperimentsResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionExperimentsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case platform = "platform"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case bundleid = "bundleId"
        case sku = "sku"
        case primarylocale = "primaryLocale"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case streamlinedpurchasingenabled = "streamlinedPurchasingEnabled"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case ciproduct = "ciProduct"
        case betatesters = "betaTesters"
        case betagroups = "betaGroups"
        case appstoreversions = "appStoreVersions"
        case prereleaseversions = "preReleaseVersions"
        case betaapplocalizations = "betaAppLocalizations"
        case builds = "builds"
        case betalicenseagreement = "betaLicenseAgreement"
        case betaappreviewdetail = "betaAppReviewDetail"
        case appinfos = "appInfos"
        case appclips = "appClips"
        case apppricepoints = "appPricePoints"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case apppriceschedule = "appPriceSchedule"
        case appavailabilityv2 = "appAvailabilityV2"
        case inapppurchases = "inAppPurchases"
        case subscriptiongroups = "subscriptionGroups"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case perfpowermetrics = "perfPowerMetrics"
        case appcustomproductpages = "appCustomProductPages"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case promotedpurchases = "promotedPurchases"
        case appevents = "appEvents"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case customerreviews = "customerReviews"
        case gamecenterdetail = "gameCenterDetail"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case marketplacesearchdetail = "marketplaceSearchDetail"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatments
     */
    public enum FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case name = "name"
        case appicon = "appIcon"
        case appiconname = "appIconName"
        case promoteddate = "promotedDate"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimentv2 = "appStoreVersionExperimentV2"
        case appstoreversionexperimenttreatmentlocalizations = "appStoreVersionExperimentTreatmentLocalizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated: String, Sendable, CaseIterable {
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitControlVersions: (query) maximum number of related controlVersions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionExperimentsV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsApps: [FieldsApps_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limitControlVersions: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionExperimentsV2Response {
        return try await appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(id: id, filterState: filterState, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsApps: fieldsApps, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments: fieldsAppStoreVersionExperimentTreatments, limit: limit, include: include, limitControlVersions: limitControlVersions, limitAppStoreVersionExperimentTreatments: limitAppStoreVersionExperimentTreatments, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionExperimentsV2Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionExperimentsV2Response {
        return try await appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperimentsV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitControlVersions: (query) maximum number of related controlVersions returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionExperimentsV2Response> 
     */
    open class func appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsApps: [FieldsApps_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated]? = nil, limitControlVersions: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionExperimentsV2Response> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[state]": (wrappedValue: filterState?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperimentTreatments]": (wrappedValue: fieldsAppStoreVersionExperimentTreatments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[controlVersions]": (wrappedValue: limitControlVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[appStoreVersionExperimentTreatments]": (wrappedValue: limitAppStoreVersionExperimentTreatments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsV2Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperimentsV2
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionExperimentsV2Response> 
     */
    open class func appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionExperimentsV2Response> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsV2Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, Sendable, CaseIterable {
        case description = "description"
        case locale = "locale"
        case keywords = "keywords"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
        case appstoreversion = "appStoreVersion"
        case appscreenshotsets = "appScreenshotSets"
        case apppreviewsets = "appPreviewSets"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAppScreenshotSets
     */
    public enum FieldsAppScreenshotSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, Sendable, CaseIterable {
        case screenshotdisplaytype = "screenshotDisplayType"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case appscreenshots = "appScreenshots"
    }

    /**
     * enum for parameter fieldsAppPreviewSets
     */
    public enum FieldsAppPreviewSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, Sendable, CaseIterable {
        case previewtype = "previewType"
        case appstoreversionlocalization = "appStoreVersionLocalization"
        case appcustomproductpagelocalization = "appCustomProductPageLocalization"
        case appstoreversionexperimenttreatmentlocalization = "appStoreVersionExperimentTreatmentLocalization"
        case apppreviews = "appPreviews"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
        case appscreenshotsets = "appScreenshotSets"
        case apppreviewsets = "appPreviewSets"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppScreenshotSets: (query) maximum number of related appScreenshotSets returned (when they are included) (optional)
     - parameter limitAppPreviewSets: (query) maximum number of related appPreviewSets returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id: String, filterLocale: [String]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limitAppScreenshotSets: Int? = nil, limitAppPreviewSets: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionLocalizationsResponse {
        return try await appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(id: id, filterLocale: filterLocale, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppScreenshotSets: fieldsAppScreenshotSets, fieldsAppPreviewSets: fieldsAppPreviewSets, limit: limit, include: include, limitAppScreenshotSets: limitAppScreenshotSets, limitAppPreviewSets: limitAppPreviewSets, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionLocalizationsResponse {
        return try await appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterLocale: (query) filter by attribute &#39;locale&#39; (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppScreenshotSets: (query) the fields to include for returned resources of type appScreenshotSets (optional)
     - parameter fieldsAppPreviewSets: (query) the fields to include for returned resources of type appPreviewSets (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppScreenshotSets: (query) maximum number of related appScreenshotSets returned (when they are included) (optional)
     - parameter limitAppPreviewSets: (query) maximum number of related appPreviewSets returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionLocalizationsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(id: String, filterLocale: [String]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppScreenshotSets: [FieldsAppScreenshotSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, fieldsAppPreviewSets: [FieldsAppPreviewSets_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limitAppScreenshotSets: Int? = nil, limitAppPreviewSets: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionLocalizationsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[locale]": (wrappedValue: filterLocale?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appScreenshotSets]": (wrappedValue: fieldsAppScreenshotSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appPreviewSets]": (wrappedValue: fieldsAppPreviewSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[appScreenshotSets]": (wrappedValue: limitAppScreenshotSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[appPreviewSets]": (wrappedValue: limitAppPreviewSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionLocalizationsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionLocalizationsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionLocalizationsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionLocalizationsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated: String, Sendable, CaseIterable {
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
        case currentdaynumber = "currentDayNumber"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionPhasedReleaseWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id: String, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionPhasedReleaseWithoutIncludesResponse {
        return try await appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionPhasedReleaseWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionPhasedReleaseWithoutIncludesResponse {
        return try await appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse> 
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionPhasedReleases]": (wrappedValue: fieldsAppStoreVersionPhasedReleases?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse> 
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionPhasedReleaseWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionSubmissionResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id: String, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionSubmissionResponse {
        return try await appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionSubmissionResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionSubmissionResponse {
        return try await appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionSubmissionResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionSubmissionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionSubmission"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionSubmissions]": (wrappedValue: fieldsAppStoreVersionSubmissions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionSubmissionResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionSubmissionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionSubmissionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsBuildGetToOneRelated: String, Sendable, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelated(id: String, fieldsBuilds: [FieldsBuilds_appStoreVersionsBuildGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> BuildWithoutIncludesResponse {
        return try await appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> BuildWithoutIncludesResponse {
        return try await appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_appStoreVersionsBuildGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<BuildWithoutIncludesResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<BuildWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionBuildLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelationship(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionBuildLinkageResponse {
        return try await appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionBuildLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelationship(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionBuildLinkageResponse {
        return try await appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionBuildLinkageResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionBuildLinkageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionBuildLinkageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionBuildLinkageResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionBuildLinkageResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionBuildLinkageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionBuildLinkageRequest: (body) Related linkage 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildUpdateToOneRelationship(id: String, appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(id: id, appStoreVersionBuildLinkageRequest: appStoreVersionBuildLinkageRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildUpdateToOneRelationship(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionBuildLinkageRequest: (body) Related linkage 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(id: String, appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionBuildLinkageRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter appStoreVersionCreateRequest: (body) AppStoreVersion representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCreateInstance(appStoreVersionCreateRequest: AppStoreVersionCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsCreateInstanceWithRequestBuilder(appStoreVersionCreateRequest: appStoreVersionCreateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCreateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsCreateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v1/appStoreVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter appStoreVersionCreateRequest: (body) AppStoreVersion representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsCreateInstanceWithRequestBuilder(appStoreVersionCreateRequest: AppStoreVersionCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariablePath = "/v1/appStoreVersions"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionCreateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - POST /v1/appStoreVersions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsCreateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter filterTerritory
     */
    public enum FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated: String, Sendable, CaseIterable {
        case abw = "ABW"
        case afg = "AFG"
        case ago = "AGO"
        case aia = "AIA"
        case alb = "ALB"
        case and = "AND"
        case ant = "ANT"
        case are = "ARE"
        case arg = "ARG"
        case arm = "ARM"
        case asm = "ASM"
        case atg = "ATG"
        case aus = "AUS"
        case aut = "AUT"
        case aze = "AZE"
        case bdi = "BDI"
        case bel = "BEL"
        case ben = "BEN"
        case bes = "BES"
        case bfa = "BFA"
        case bgd = "BGD"
        case bgr = "BGR"
        case bhr = "BHR"
        case bhs = "BHS"
        case bih = "BIH"
        case blr = "BLR"
        case blz = "BLZ"
        case bmu = "BMU"
        case bol = "BOL"
        case bra = "BRA"
        case brb = "BRB"
        case brn = "BRN"
        case btn = "BTN"
        case bwa = "BWA"
        case caf = "CAF"
        case can = "CAN"
        case che = "CHE"
        case chl = "CHL"
        case chn = "CHN"
        case civ = "CIV"
        case cmr = "CMR"
        case cod = "COD"
        case cog = "COG"
        case cok = "COK"
        case col = "COL"
        case com = "COM"
        case cpv = "CPV"
        case cri = "CRI"
        case cub = "CUB"
        case cuw = "CUW"
        case cxr = "CXR"
        case cym = "CYM"
        case cyp = "CYP"
        case cze = "CZE"
        case deu = "DEU"
        case dji = "DJI"
        case dma = "DMA"
        case dnk = "DNK"
        case dom = "DOM"
        case dza = "DZA"
        case ecu = "ECU"
        case egy = "EGY"
        case eri = "ERI"
        case esp = "ESP"
        case est = "EST"
        case eth = "ETH"
        case fin = "FIN"
        case fji = "FJI"
        case flk = "FLK"
        case fra = "FRA"
        case fro = "FRO"
        case fsm = "FSM"
        case gab = "GAB"
        case gbr = "GBR"
        case geo = "GEO"
        case ggy = "GGY"
        case gha = "GHA"
        case gib = "GIB"
        case gin = "GIN"
        case glp = "GLP"
        case gmb = "GMB"
        case gnb = "GNB"
        case gnq = "GNQ"
        case grc = "GRC"
        case grd = "GRD"
        case grl = "GRL"
        case gtm = "GTM"
        case guf = "GUF"
        case gum = "GUM"
        case guy = "GUY"
        case hkg = "HKG"
        case hnd = "HND"
        case hrv = "HRV"
        case hti = "HTI"
        case hun = "HUN"
        case idn = "IDN"
        case imn = "IMN"
        case ind = "IND"
        case irl = "IRL"
        case irq = "IRQ"
        case isl = "ISL"
        case isr = "ISR"
        case ita = "ITA"
        case jam = "JAM"
        case jey = "JEY"
        case jor = "JOR"
        case jpn = "JPN"
        case kaz = "KAZ"
        case ken = "KEN"
        case kgz = "KGZ"
        case khm = "KHM"
        case kir = "KIR"
        case kna = "KNA"
        case kor = "KOR"
        case kwt = "KWT"
        case lao = "LAO"
        case lbn = "LBN"
        case lbr = "LBR"
        case lby = "LBY"
        case lca = "LCA"
        case lie = "LIE"
        case lka = "LKA"
        case lso = "LSO"
        case ltu = "LTU"
        case lux = "LUX"
        case lva = "LVA"
        case mac = "MAC"
        case mar = "MAR"
        case mco = "MCO"
        case mda = "MDA"
        case mdg = "MDG"
        case mdv = "MDV"
        case mex = "MEX"
        case mhl = "MHL"
        case mkd = "MKD"
        case mli = "MLI"
        case mlt = "MLT"
        case mmr = "MMR"
        case mne = "MNE"
        case mng = "MNG"
        case mnp = "MNP"
        case moz = "MOZ"
        case mrt = "MRT"
        case msr = "MSR"
        case mtq = "MTQ"
        case mus = "MUS"
        case mwi = "MWI"
        case mys = "MYS"
        case myt = "MYT"
        case nam = "NAM"
        case ncl = "NCL"
        case ner = "NER"
        case nfk = "NFK"
        case nga = "NGA"
        case nic = "NIC"
        case niu = "NIU"
        case nld = "NLD"
        case nor = "NOR"
        case npl = "NPL"
        case nru = "NRU"
        case nzl = "NZL"
        case omn = "OMN"
        case pak = "PAK"
        case pan = "PAN"
        case per = "PER"
        case phl = "PHL"
        case plw = "PLW"
        case png = "PNG"
        case pol = "POL"
        case pri = "PRI"
        case prt = "PRT"
        case pry = "PRY"
        case pse = "PSE"
        case pyf = "PYF"
        case qat = "QAT"
        case reu = "REU"
        case rou = "ROU"
        case rus = "RUS"
        case rwa = "RWA"
        case sau = "SAU"
        case sen = "SEN"
        case sgp = "SGP"
        case shn = "SHN"
        case slb = "SLB"
        case sle = "SLE"
        case slv = "SLV"
        case smr = "SMR"
        case som = "SOM"
        case spm = "SPM"
        case srb = "SRB"
        case ssd = "SSD"
        case stp = "STP"
        case sur = "SUR"
        case svk = "SVK"
        case svn = "SVN"
        case swe = "SWE"
        case swz = "SWZ"
        case sxm = "SXM"
        case syc = "SYC"
        case tca = "TCA"
        case tcd = "TCD"
        case tgo = "TGO"
        case tha = "THA"
        case tjk = "TJK"
        case tkm = "TKM"
        case tls = "TLS"
        case ton = "TON"
        case tto = "TTO"
        case tun = "TUN"
        case tur = "TUR"
        case tuv = "TUV"
        case twn = "TWN"
        case tza = "TZA"
        case uga = "UGA"
        case ukr = "UKR"
        case umi = "UMI"
        case ury = "URY"
        case usa = "USA"
        case uzb = "UZB"
        case vat = "VAT"
        case vct = "VCT"
        case ven = "VEN"
        case vgb = "VGB"
        case vir = "VIR"
        case vnm = "VNM"
        case vut = "VUT"
        case wlf = "WLF"
        case wsm = "WSM"
        case yem = "YEM"
        case zaf = "ZAF"
        case zmb = "ZMB"
        case zwe = "ZWE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appStoreVersionsCustomerReviewsGetToManyRelated: String, Sendable, CaseIterable {
        case rating = "rating"
        case rating2 = "-rating"
        case createddate = "createdDate"
        case createddate2 = "-createdDate"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated: String, Sendable, CaseIterable {
        case rating = "rating"
        case title = "title"
        case body = "body"
        case reviewernickname = "reviewerNickname"
        case createddate = "createdDate"
        case territory = "territory"
        case response = "response"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated: String, Sendable, CaseIterable {
        case responsebody = "responseBody"
        case lastmodifieddate = "lastModifiedDate"
        case state = "state"
        case review = "review"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsCustomerReviewsGetToManyRelated: String, Sendable, CaseIterable {
        case response = "response"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCustomerReviewsGetToManyRelated(id: String, filterTerritory: [FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, filterRating: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> CustomerReviewsResponse {
        return try await appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, filterRating: filterRating, existsPublishedResponse: existsPublishedResponse, sort: sort, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, limit: limit, include: include, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCustomerReviewsGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> CustomerReviewsResponse {
        return try await appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/customerReviews
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, filterRating: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<CustomerReviewsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/customerReviews"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "filter[rating]": (wrappedValue: filterRating?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "exists[publishedResponse]": (wrappedValue: existsPublishedResponse?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[customerReviews]": (wrappedValue: fieldsCustomerReviews?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[customerReviewResponses]": (wrappedValue: fieldsCustomerReviewResponses?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/customerReviews
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<CustomerReviewsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsDeleteInstance(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsDeleteInstanceWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsDeleteInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await appStoreVersionsDeleteInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsDeleteInstanceWithRequestBuilder(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - DELETE /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsDeleteInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterAppVersions
     */
    public enum FieldsGameCenterAppVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated: String, Sendable, CaseIterable {
        case enabled = "enabled"
        case compatibilityversions = "compatibilityVersions"
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsGameCenterAppVersionGetToOneRelated: String, Sendable, CaseIterable {
        case compatibilityversions = "compatibilityVersions"
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCompatibilityVersions: (query) maximum number of related compatibilityVersions returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterAppVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGameCenterAppVersionGetToOneRelated(id: String, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, include: [Include_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, limitCompatibilityVersions: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterAppVersionResponse {
        return try await appStoreVersionsGameCenterAppVersionGetToOneRelatedWithRequestBuilder(id: id, fieldsGameCenterAppVersions: fieldsGameCenterAppVersions, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include, limitCompatibilityVersions: limitCompatibilityVersions, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterAppVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGameCenterAppVersionGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterAppVersionResponse {
        return try await appStoreVersionsGameCenterAppVersionGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/gameCenterAppVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitCompatibilityVersions: (query) maximum number of related compatibilityVersions returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterAppVersionResponse> 
     */
    open class func appStoreVersionsGameCenterAppVersionGetToOneRelatedWithRequestBuilder(id: String, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, include: [Include_appStoreVersionsGameCenterAppVersionGetToOneRelated]? = nil, limitCompatibilityVersions: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterAppVersionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/gameCenterAppVersion"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterAppVersions]": (wrappedValue: fieldsGameCenterAppVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[compatibilityVersions]": (wrappedValue: limitCompatibilityVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAppVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/gameCenterAppVersion
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterAppVersionResponse> 
     */
    open class func appStoreVersionsGameCenterAppVersionGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterAppVersionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAppVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case platform = "platform"
        case versionstring = "versionString"
        case appstorestate = "appStoreState"
        case appversionstate = "appVersionState"
        case copyright = "copyright"
        case reviewtype = "reviewType"
        case releasetype = "releaseType"
        case earliestreleasedate = "earliestReleaseDate"
        case downloadable = "downloadable"
        case createddate = "createdDate"
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case customerreviews = "customerReviews"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gamblingandcontests = "gamblingAndContests"
        case gambling = "gambling"
        case gamblingsimulated = "gamblingSimulated"
        case kidsageband = "kidsAgeBand"
        case lootbox = "lootBox"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case horrororfearthemes = "horrorOrFearThemes"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
        case violencerealistic = "violenceRealistic"
        case ageratingoverride = "ageRatingOverride"
        case koreaageratingoverride = "koreaAgeRatingOverride"
        case seventeenplus = "seventeenPlus"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case description = "description"
        case locale = "locale"
        case keywords = "keywords"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
        case appstoreversion = "appStoreVersion"
        case appscreenshotsets = "appScreenshotSets"
        case apppreviewsets = "appPreviewSets"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
        case currentdaynumber = "currentDayNumber"
    }

    /**
     * enum for parameter fieldsGameCenterAppVersions
     */
    public enum FieldsGameCenterAppVersions_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case enabled = "enabled"
        case compatibilityversions = "compatibilityVersions"
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case contactemail = "contactEmail"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
        case appstoreversion = "appStoreVersion"
        case appstorereviewattachments = "appStoreReviewAttachments"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case action = "action"
        case appclip = "appClip"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case name = "name"
        case trafficproportion = "trafficProportion"
        case state = "state"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case enddate = "endDate"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case platform = "platform"
        case app = "app"
        case latestcontrolversion = "latestControlVersion"
        case controlversions = "controlVersions"
    }

    /**
     * enum for parameter fieldsAlternativeDistributionPackages
     */
    public enum FieldsAlternativeDistributionPackages_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case versions = "versions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsGetInstance: String, Sendable, CaseIterable {
        case app = "app"
        case ageratingdeclaration = "ageRatingDeclaration"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case build = "build"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case gamecenterappversion = "gameCenterAppVersion"
        case routingappcoverage = "routingAppCoverage"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case alternativedistributionpackage = "alternativeDistributionPackage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGetInstance(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGetInstance]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appStoreVersionsGetInstance]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsGetInstance]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appStoreVersionsGetInstance]? = nil, include: [Include_appStoreVersionsGetInstance]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsGetInstanceWithRequestBuilder(id: id, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions: fieldsGameCenterAppVersions, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages: fieldsAlternativeDistributionPackages, include: include, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2: limitAppStoreVersionExperimentsV2, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGetInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsGetInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsGameCenterAppVersions: (query) the fields to include for returned resources of type gameCenterAppVersions (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAlternativeDistributionPackages: (query) the fields to include for returned resources of type alternativeDistributionPackages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperimentsV2: (query) maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsGetInstanceWithRequestBuilder(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGetInstance]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance]? = nil, fieldsGameCenterAppVersions: [FieldsGameCenterAppVersions_appStoreVersionsGetInstance]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsGetInstance]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance]? = nil, fieldsAlternativeDistributionPackages: [FieldsAlternativeDistributionPackages_appStoreVersionsGetInstance]? = nil, include: [Include_appStoreVersionsGetInstance]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionExperimentsV2: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersions]": (wrappedValue: fieldsAppStoreVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[ageRatingDeclarations]": (wrappedValue: fieldsAgeRatingDeclarations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionLocalizations]": (wrappedValue: fieldsAppStoreVersionLocalizations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionPhasedReleases]": (wrappedValue: fieldsAppStoreVersionPhasedReleases?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterAppVersions]": (wrappedValue: fieldsGameCenterAppVersions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[routingAppCoverages]": (wrappedValue: fieldsRoutingAppCoverages?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreReviewDetails]": (wrappedValue: fieldsAppStoreReviewDetails?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionSubmissions]": (wrappedValue: fieldsAppStoreVersionSubmissions?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appClipDefaultExperiences]": (wrappedValue: fieldsAppClipDefaultExperiences?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[appStoreVersionExperiments]": (wrappedValue: fieldsAppStoreVersionExperiments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[alternativeDistributionPackages]": (wrappedValue: fieldsAlternativeDistributionPackages?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[appStoreVersionExperiments]": (wrappedValue: limitAppStoreVersionExperiments?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[appStoreVersionExperimentsV2]": (wrappedValue: limitAppStoreVersionExperimentsV2?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[appStoreVersionLocalizations]": (wrappedValue: limitAppStoreVersionLocalizations?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsGetInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated: String, Sendable, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RoutingAppCoverageWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelated(id: String, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> RoutingAppCoverageWithoutIncludesResponse {
        return try await appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(id: id, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RoutingAppCoverageWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> RoutingAppCoverageWithoutIncludesResponse {
        return try await appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/appStoreVersions/{id}/routingAppCoverage
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RoutingAppCoverageWithoutIncludesResponse> 
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(id: String, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<RoutingAppCoverageWithoutIncludesResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/routingAppCoverage"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[routingAppCoverages]": (wrappedValue: fieldsRoutingAppCoverages?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoutingAppCoverageWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/appStoreVersions/{id}/routingAppCoverage
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RoutingAppCoverageWithoutIncludesResponse> 
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<RoutingAppCoverageWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoutingAppCoverageWithoutIncludesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionUpdateRequest: (body) AppStoreVersion representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsUpdateInstance(id: String, appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsUpdateInstanceWithRequestBuilder(id: id, appStoreVersionUpdateRequest: appStoreVersionUpdateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsUpdateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> AppStoreVersionResponse {
        return try await appStoreVersionsUpdateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionUpdateRequest: (body) AppStoreVersion representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsUpdateInstanceWithRequestBuilder(id: String, appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionUpdateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsUpdateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
