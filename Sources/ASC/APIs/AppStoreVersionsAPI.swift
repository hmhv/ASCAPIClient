//
// AppStoreVersionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppStoreVersionsAPI {

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated: String, CaseIterable, JSONEncodable {
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - returns: AgeRatingDeclarationResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelated(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated]? = nil) async throws -> AgeRatingDeclarationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(id: id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AgeRatingDeclarationResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelated(urlString: String) async throws -> AgeRatingDeclarationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - returns: RequestBuilder<AgeRatingDeclarationResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(id: String, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated]? = nil) -> RequestBuilder<AgeRatingDeclarationResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/ageRatingDeclaration"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AgeRatingDeclarationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AgeRatingDeclarationResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AgeRatingDeclarationResponse> {
        let localVariableRequestBuilder: RequestBuilder<AgeRatingDeclarationResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case invocationurls = "invocationUrls"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperienceLocalizations
     */
    public enum FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
        case locale = "locale"
        case subtitle = "subtitle"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelated(id: String, fieldsAppClips: [FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, include: [Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil) async throws -> AppClipDefaultExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(id: id, fieldsAppClips: fieldsAppClips, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations: fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations: limitAppClipDefaultExperienceLocalizations, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppClipDefaultExperienceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelated(urlString: String) async throws -> AppClipDefaultExperienceResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(id: String, fieldsAppClips: [FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, fieldsAppClipDefaultExperienceLocalizations: [FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, include: [Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated]? = nil) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClips]": fieldsAppClips?.encodeToJSON(),
            "fields[appClipAppStoreReviewDetails]": fieldsAppClipAppStoreReviewDetails?.encodeToJSON(),
            "fields[appStoreVersions]": fieldsAppStoreVersions?.encodeToJSON(),
            "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences?.encodeToJSON(),
            "fields[appClipDefaultExperienceLocalizations]": fieldsAppClipDefaultExperienceLocalizations?.encodeToJSON(),
            "limit[appClipDefaultExperienceLocalizations]": limitAppClipDefaultExperienceLocalizations?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: AppStoreVersionAppClipDefaultExperienceLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(id: String) async throws -> AppStoreVersionAppClipDefaultExperienceLinkageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionAppClipDefaultExperienceLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(urlString: String) async throws -> AppStoreVersionAppClipDefaultExperienceLinkageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionAppClipDefaultExperienceLinkageRequest: (body) Related linkage 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(id: String, appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(id: id, appStoreVersionAppClipDefaultExperienceLinkageRequest: appStoreVersionAppClipDefaultExperienceLinkageRequest).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(urlString: String) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionAppClipDefaultExperienceLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(id: String, appStoreVersionAppClipDefaultExperienceLinkageRequest: AppStoreVersionAppClipDefaultExperienceLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionAppClipDefaultExperienceLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppStoreReviewAttachments
     */
    public enum FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstorereviewdetail = "appStoreReviewDetail"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelated(id: String, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, limitAppStoreReviewAttachments: Int? = nil, include: [Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil) async throws -> AppStoreReviewDetailResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppStoreReviewAttachments: fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments: limitAppStoreReviewAttachments, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreReviewDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelated(urlString: String) async throws -> AppStoreReviewDetailResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreReviewDetailResponse> 
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, fieldsAppStoreReviewAttachments: [FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil, limitAppStoreReviewAttachments: Int? = nil, include: [Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated]? = nil) -> RequestBuilder<AppStoreReviewDetailResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreReviewDetail"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails?.encodeToJSON(),
            "fields[appStoreVersions]": fieldsAppStoreVersions?.encodeToJSON(),
            "fields[appStoreReviewAttachments]": fieldsAppStoreReviewAttachments?.encodeToJSON(),
            "limit[appStoreReviewAttachments]": limitAppStoreReviewAttachments?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreReviewDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreReviewDetailResponse> 
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreReviewDetailResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreReviewDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatments
     */
    public enum FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case appicon = "appIcon"
        case appiconname = "appIconName"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimenttreatmentlocalizations = "appStoreVersionExperimentTreatmentLocalizations"
        case name = "name"
        case promoteddate = "promotedDate"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreVersionExperimentsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limit: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil) async throws -> AppStoreVersionExperimentsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(id: id, filterState: filterState, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments: fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersions: fieldsAppStoreVersions, limit: limit, limitAppStoreVersionExperimentTreatments: limitAppStoreVersionExperimentTreatments, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionExperimentsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(urlString: String) async throws -> AppStoreVersionExperimentsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperiments
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#39;state&#39; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreVersionExperimentsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(id: String, filterState: [FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersionExperimentTreatments: [FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil, limit: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated]? = nil) -> RequestBuilder<AppStoreVersionExperimentsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionExperiments"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[state]": filterState?.encodeToJSON(),
            "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments?.encodeToJSON(),
            "fields[appStoreVersionExperimentTreatments]": fieldsAppStoreVersionExperimentTreatments?.encodeToJSON(),
            "fields[appStoreVersions]": fieldsAppStoreVersions?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "limit[appStoreVersionExperimentTreatments]": limitAppStoreVersionExperimentTreatments?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperiments
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionExperimentsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionExperimentsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionExperimentsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: AppStoreVersionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(id: String, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) async throws -> AppStoreVersionLocalizationsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limit: limit).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(urlString: String) async throws -> AppStoreVersionLocalizationsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<AppStoreVersionLocalizationsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<AppStoreVersionLocalizationsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionLocalizationsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionLocalizationsResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - returns: AppStoreVersionPhasedReleaseResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(id: String, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated]? = nil) async throws -> AppStoreVersionPhasedReleaseResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionPhasedReleaseResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(urlString: String) async throws -> AppStoreVersionPhasedReleaseResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - returns: RequestBuilder<AppStoreVersionPhasedReleaseResponse> 
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated]? = nil) -> RequestBuilder<AppStoreVersionPhasedReleaseResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionPhasedReleaseResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionPhasedReleaseResponse> 
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionPhasedReleaseResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionPhasedReleaseResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: AppStoreVersionSubmissionResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(id: String, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil) async throws -> AppStoreVersionSubmissionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(id: id, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionSubmissionResponse
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(urlString: String) async throws -> AppStoreVersionSubmissionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppStoreVersionSubmissionResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(id: String, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil, include: [Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated]? = nil) -> RequestBuilder<AppStoreVersionSubmissionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/appStoreVersionSubmission"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions?.encodeToJSON(),
            "fields[appStoreVersions]": fieldsAppStoreVersions?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionSubmissionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionSubmissionResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionSubmissionResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionSubmissionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsBuildGetToOneRelated: String, CaseIterable, JSONEncodable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelated(id: String, fieldsBuilds: [FieldsBuilds_appStoreVersionsBuildGetToOneRelated]? = nil) async throws -> BuildResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelated(urlString: String) async throws -> BuildResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_appStoreVersionsBuildGetToOneRelated]? = nil) -> RequestBuilder<BuildResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": fieldsBuilds?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildResponse> {
        let localVariableRequestBuilder: RequestBuilder<BuildResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: AppStoreVersionBuildLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelationship(id: String) async throws -> AppStoreVersionBuildLinkageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionBuildLinkageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildGetToOneRelationship(urlString: String) async throws -> AppStoreVersionBuildLinkageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<AppStoreVersionBuildLinkageResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<AppStoreVersionBuildLinkageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionBuildLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/relationships/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionBuildLinkageResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionBuildLinkageResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionBuildLinkageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionBuildLinkageRequest: (body) Related linkage 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildUpdateToOneRelationship(id: String, appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(id: id, appStoreVersionBuildLinkageRequest: appStoreVersionBuildLinkageRequest).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsBuildUpdateToOneRelationship(urlString: String) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionBuildLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(id: String, appStoreVersionBuildLinkageRequest: AppStoreVersionBuildLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}/relationships/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionBuildLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/build
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil)
    }

    /**

     - parameter appStoreVersionCreateRequest: (body) AppStoreVersion representation 
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCreateInstance(appStoreVersionCreateRequest: AppStoreVersionCreateRequest) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsCreateInstanceWithRequestBuilder(appStoreVersionCreateRequest: appStoreVersionCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCreateInstance(urlString: String) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsCreateInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - POST /v1/appStoreVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter appStoreVersionCreateRequest: (body) AppStoreVersion representation 
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsCreateInstanceWithRequestBuilder(appStoreVersionCreateRequest: AppStoreVersionCreateRequest) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariablePath = "/v1/appStoreVersions"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - POST /v1/appStoreVersions
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter filterTerritory
     */
    public enum FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case abw = "ABW"
        case afg = "AFG"
        case ago = "AGO"
        case aia = "AIA"
        case alb = "ALB"
        case and = "AND"
        case ant = "ANT"
        case are = "ARE"
        case arg = "ARG"
        case arm = "ARM"
        case asm = "ASM"
        case atg = "ATG"
        case aus = "AUS"
        case aut = "AUT"
        case aze = "AZE"
        case bdi = "BDI"
        case bel = "BEL"
        case ben = "BEN"
        case bes = "BES"
        case bfa = "BFA"
        case bgd = "BGD"
        case bgr = "BGR"
        case bhr = "BHR"
        case bhs = "BHS"
        case bih = "BIH"
        case blr = "BLR"
        case blz = "BLZ"
        case bmu = "BMU"
        case bol = "BOL"
        case bra = "BRA"
        case brb = "BRB"
        case brn = "BRN"
        case btn = "BTN"
        case bwa = "BWA"
        case caf = "CAF"
        case can = "CAN"
        case che = "CHE"
        case chl = "CHL"
        case chn = "CHN"
        case civ = "CIV"
        case cmr = "CMR"
        case cod = "COD"
        case cog = "COG"
        case cok = "COK"
        case col = "COL"
        case com = "COM"
        case cpv = "CPV"
        case cri = "CRI"
        case cub = "CUB"
        case cuw = "CUW"
        case cxr = "CXR"
        case cym = "CYM"
        case cyp = "CYP"
        case cze = "CZE"
        case deu = "DEU"
        case dji = "DJI"
        case dma = "DMA"
        case dnk = "DNK"
        case dom = "DOM"
        case dza = "DZA"
        case ecu = "ECU"
        case egy = "EGY"
        case eri = "ERI"
        case esp = "ESP"
        case est = "EST"
        case eth = "ETH"
        case fin = "FIN"
        case fji = "FJI"
        case flk = "FLK"
        case fra = "FRA"
        case fro = "FRO"
        case fsm = "FSM"
        case gab = "GAB"
        case gbr = "GBR"
        case geo = "GEO"
        case ggy = "GGY"
        case gha = "GHA"
        case gib = "GIB"
        case gin = "GIN"
        case glp = "GLP"
        case gmb = "GMB"
        case gnb = "GNB"
        case gnq = "GNQ"
        case grc = "GRC"
        case grd = "GRD"
        case grl = "GRL"
        case gtm = "GTM"
        case guf = "GUF"
        case gum = "GUM"
        case guy = "GUY"
        case hkg = "HKG"
        case hnd = "HND"
        case hrv = "HRV"
        case hti = "HTI"
        case hun = "HUN"
        case idn = "IDN"
        case imn = "IMN"
        case ind = "IND"
        case irl = "IRL"
        case irq = "IRQ"
        case isl = "ISL"
        case isr = "ISR"
        case ita = "ITA"
        case jam = "JAM"
        case jey = "JEY"
        case jor = "JOR"
        case jpn = "JPN"
        case kaz = "KAZ"
        case ken = "KEN"
        case kgz = "KGZ"
        case khm = "KHM"
        case kir = "KIR"
        case kna = "KNA"
        case kor = "KOR"
        case kwt = "KWT"
        case lao = "LAO"
        case lbn = "LBN"
        case lbr = "LBR"
        case lby = "LBY"
        case lca = "LCA"
        case lie = "LIE"
        case lka = "LKA"
        case lso = "LSO"
        case ltu = "LTU"
        case lux = "LUX"
        case lva = "LVA"
        case mac = "MAC"
        case mar = "MAR"
        case mco = "MCO"
        case mda = "MDA"
        case mdg = "MDG"
        case mdv = "MDV"
        case mex = "MEX"
        case mhl = "MHL"
        case mkd = "MKD"
        case mli = "MLI"
        case mlt = "MLT"
        case mmr = "MMR"
        case mne = "MNE"
        case mng = "MNG"
        case mnp = "MNP"
        case moz = "MOZ"
        case mrt = "MRT"
        case msr = "MSR"
        case mtq = "MTQ"
        case mus = "MUS"
        case mwi = "MWI"
        case mys = "MYS"
        case myt = "MYT"
        case nam = "NAM"
        case ncl = "NCL"
        case ner = "NER"
        case nfk = "NFK"
        case nga = "NGA"
        case nic = "NIC"
        case niu = "NIU"
        case nld = "NLD"
        case nor = "NOR"
        case npl = "NPL"
        case nru = "NRU"
        case nzl = "NZL"
        case omn = "OMN"
        case pak = "PAK"
        case pan = "PAN"
        case per = "PER"
        case phl = "PHL"
        case plw = "PLW"
        case png = "PNG"
        case pol = "POL"
        case pri = "PRI"
        case prt = "PRT"
        case pry = "PRY"
        case pse = "PSE"
        case pyf = "PYF"
        case qat = "QAT"
        case reu = "REU"
        case rou = "ROU"
        case rus = "RUS"
        case rwa = "RWA"
        case sau = "SAU"
        case sen = "SEN"
        case sgp = "SGP"
        case shn = "SHN"
        case slb = "SLB"
        case sle = "SLE"
        case slv = "SLV"
        case smr = "SMR"
        case som = "SOM"
        case spm = "SPM"
        case srb = "SRB"
        case ssd = "SSD"
        case stp = "STP"
        case sur = "SUR"
        case svk = "SVK"
        case svn = "SVN"
        case swe = "SWE"
        case swz = "SWZ"
        case sxm = "SXM"
        case syc = "SYC"
        case tca = "TCA"
        case tcd = "TCD"
        case tgo = "TGO"
        case tha = "THA"
        case tjk = "TJK"
        case tkm = "TKM"
        case tls = "TLS"
        case ton = "TON"
        case tto = "TTO"
        case tun = "TUN"
        case tur = "TUR"
        case tuv = "TUV"
        case twn = "TWN"
        case tza = "TZA"
        case uga = "UGA"
        case ukr = "UKR"
        case umi = "UMI"
        case ury = "URY"
        case usa = "USA"
        case uzb = "UZB"
        case vat = "VAT"
        case vct = "VCT"
        case ven = "VEN"
        case vgb = "VGB"
        case vir = "VIR"
        case vnm = "VNM"
        case vut = "VUT"
        case wlf = "WLF"
        case wsm = "WSM"
        case yem = "YEM"
        case zaf = "ZAF"
        case zmb = "ZMB"
        case zwe = "ZWE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appStoreVersionsCustomerReviewsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case createddate = "createdDate"
        case createddate_desc = "-createdDate"
        case rating = "rating"
        case rating_desc = "-rating"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsCustomerReviewsGetToManyRelated: String, CaseIterable, JSONEncodable {
        case response = "response"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCustomerReviewsGetToManyRelated(id: String, filterRating: [String]? = nil, filterTerritory: [FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil) async throws -> CustomerReviewsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: id, filterRating: filterRating, filterTerritory: filterTerritory, existsPublishedResponse: existsPublishedResponse, sort: sort, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, limit: limit, include: include).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: CustomerReviewsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsCustomerReviewsGetToManyRelated(urlString: String) async throws -> CustomerReviewsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/customerReviews
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#39;rating&#39; (optional)
     - parameter filterTerritory: (query) filter by attribute &#39;territory&#39; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(id: String, filterRating: [String]? = nil, filterTerritory: [FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, existsPublishedResponse: Bool? = nil, sort: [Sort_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, fieldsCustomerReviewResponses: [FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_appStoreVersionsCustomerReviewsGetToManyRelated]? = nil) -> RequestBuilder<CustomerReviewsResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/customerReviews"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[rating]": filterRating?.encodeToJSON(),
            "filter[territory]": filterTerritory?.encodeToJSON(),
            "exists[publishedResponse]": existsPublishedResponse?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "fields[customerReviews]": fieldsCustomerReviews?.encodeToJSON(),
            "fields[customerReviewResponses]": fieldsCustomerReviewResponses?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "include": include?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/customerReviews
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<CustomerReviewsResponse> {
        let localVariableRequestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsDeleteInstance(id: String) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsDeleteInstanceWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsDeleteInstance(urlString: String) async throws {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsDeleteInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case .success:
                        continuation.resume(returning: ())
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - DELETE /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - DELETE /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()
        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance: String, CaseIterable, JSONEncodable {
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGetInstance(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGetInstance]? = nil, include: [Include_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsGetInstance]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsGetInstance]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsGetInstance]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsGetInstanceWithRequestBuilder(id: id, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsGetInstance(urlString: String) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsGetInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsGetInstanceWithRequestBuilder(id: String, fieldsAppStoreVersions: [FieldsAppStoreVersions_appStoreVersionsGetInstance]? = nil, include: [Include_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionExperiments: [FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionSubmissions: [FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance]? = nil, fieldsAgeRatingDeclarations: [FieldsAgeRatingDeclarations_appStoreVersionsGetInstance]? = nil, fieldsCustomerReviews: [FieldsCustomerReviews_appStoreVersionsGetInstance]? = nil, fieldsAppStoreReviewDetails: [FieldsAppStoreReviewDetails_appStoreVersionsGetInstance]? = nil, fieldsAppClipDefaultExperiences: [FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance]? = nil, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionPhasedReleases: [FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_appStoreVersionsGetInstance]? = nil, fieldsAppStoreVersionLocalizations: [FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appStoreVersions]": fieldsAppStoreVersions?.encodeToJSON(),
            "include": include?.encodeToJSON(),
            "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments?.encodeToJSON(),
            "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions?.encodeToJSON(),
            "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations?.encodeToJSON(),
            "fields[customerReviews]": fieldsCustomerReviews?.encodeToJSON(),
            "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails?.encodeToJSON(),
            "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences?.encodeToJSON(),
            "fields[routingAppCoverages]": fieldsRoutingAppCoverages?.encodeToJSON(),
            "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases?.encodeToJSON(),
            "fields[builds]": fieldsBuilds?.encodeToJSON(),
            "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations?.encodeToJSON(),
            "limit[appStoreVersionExperiments]": limitAppStoreVersionExperiments?.encodeToJSON(),
            "limit[appStoreVersionLocalizations]": limitAppStoreVersionLocalizations?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated: String, CaseIterable, JSONEncodable {
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - returns: RoutingAppCoverageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelated(id: String, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated]? = nil) async throws -> RoutingAppCoverageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(id: id, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: RoutingAppCoverageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelated(urlString: String) async throws -> RoutingAppCoverageResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - GET /v1/appStoreVersions/{id}/routingAppCoverage
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(id: String, fieldsRoutingAppCoverages: [FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated]? = nil) -> RequestBuilder<RoutingAppCoverageResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}/routingAppCoverage"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[routingAppCoverages]": fieldsRoutingAppCoverages?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - GET /v1/appStoreVersions/{id}/routingAppCoverage
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<RoutingAppCoverageResponse> {
        let localVariableRequestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionUpdateRequest: (body) AppStoreVersion representation 
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsUpdateInstance(id: String, appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsUpdateInstanceWithRequestBuilder(id: id, appStoreVersionUpdateRequest: appStoreVersionUpdateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: AppStoreVersionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appStoreVersionsUpdateInstance(urlString: String) async throws -> AppStoreVersionResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = appStoreVersionsUpdateInstanceWithRequestBuilder(urlString: urlString).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     - PATCH /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appStoreVersionUpdateRequest: (body) AppStoreVersion representation 
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsUpdateInstanceWithRequestBuilder(id: String, appStoreVersionUpdateRequest: AppStoreVersionUpdateRequest) -> RequestBuilder<AppStoreVersionResponse> {
        var localVariablePath = "/v1/appStoreVersions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appStoreVersionUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     - PATCH /v1/appStoreVersions/{id}
     - BASIC:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<AppStoreVersionResponse> {
        let localVariableRequestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()
        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil)
    }
}
