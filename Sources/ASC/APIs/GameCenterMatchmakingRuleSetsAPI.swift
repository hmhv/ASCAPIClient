//
// GameCenterMatchmakingRuleSetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class GameCenterMatchmakingRuleSetsAPI {

    /**

     - parameter gameCenterMatchmakingRuleSetCreateRequest: (body) GameCenterMatchmakingRuleSet representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsCreateInstance(gameCenterMatchmakingRuleSetCreateRequest: GameCenterMatchmakingRuleSetCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsCreateInstanceWithRequestBuilder(gameCenterMatchmakingRuleSetCreateRequest: gameCenterMatchmakingRuleSetCreateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsCreateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsCreateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v1/gameCenterMatchmakingRuleSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter gameCenterMatchmakingRuleSetCreateRequest: (body) GameCenterMatchmakingRuleSet representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsCreateInstanceWithRequestBuilder(gameCenterMatchmakingRuleSetCreateRequest: GameCenterMatchmakingRuleSetCreateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        let localVariablePath = "/v1/gameCenterMatchmakingRuleSets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterMatchmakingRuleSetCreateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - POST /v1/gameCenterMatchmakingRuleSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsCreateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsDeleteInstance(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await gameCenterMatchmakingRuleSetsDeleteInstanceWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsDeleteInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await gameCenterMatchmakingRuleSetsDeleteInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - DELETE /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterMatchmakingRuleSetsDeleteInstanceWithRequestBuilder(id: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - DELETE /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterMatchmakingRuleSetsDeleteInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRuleSets
     */
    public enum FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetCollection: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case rulelanguageversion = "ruleLanguageVersion"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
        case teams = "teams"
        case rules = "rules"
        case matchmakingqueues = "matchmakingQueues"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingTeams
     */
    public enum FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetCollection: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRules
     */
    public enum FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetCollection: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case description = "description"
        case type = "type"
        case expression = "expression"
        case weight = "weight"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingQueues
     */
    public enum FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetCollection: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case classicmatchmakingbundleids = "classicMatchmakingBundleIds"
        case ruleset = "ruleSet"
        case experimentruleset = "experimentRuleSet"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterMatchmakingRuleSetsGetCollection: String, Sendable, CaseIterable {
        case teams = "teams"
        case rules = "rules"
        case matchmakingqueues = "matchmakingQueues"
    }

    /**

     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitMatchmakingQueues: (query) maximum number of related matchmakingQueues returned (when they are included) (optional)
     - parameter limitRules: (query) maximum number of related rules returned (when they are included) (optional)
     - parameter limitTeams: (query) maximum number of related teams returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsGetCollection(fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingRuleSetsGetCollection]? = nil, limitMatchmakingQueues: Int? = nil, limitRules: Int? = nil, limitTeams: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetsResponse {
        return try await gameCenterMatchmakingRuleSetsGetCollectionWithRequestBuilder(fieldsGameCenterMatchmakingRuleSets: fieldsGameCenterMatchmakingRuleSets, fieldsGameCenterMatchmakingTeams: fieldsGameCenterMatchmakingTeams, fieldsGameCenterMatchmakingRules: fieldsGameCenterMatchmakingRules, fieldsGameCenterMatchmakingQueues: fieldsGameCenterMatchmakingQueues, limit: limit, include: include, limitMatchmakingQueues: limitMatchmakingQueues, limitRules: limitRules, limitTeams: limitTeams, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsGetCollection(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetsResponse {
        return try await gameCenterMatchmakingRuleSetsGetCollectionWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitMatchmakingQueues: (query) maximum number of related matchmakingQueues returned (when they are included) (optional)
     - parameter limitRules: (query) maximum number of related rules returned (when they are included) (optional)
     - parameter limitTeams: (query) maximum number of related teams returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetsResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsGetCollectionWithRequestBuilder(fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetCollection]? = nil, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetCollection]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingRuleSetsGetCollection]? = nil, limitMatchmakingQueues: Int? = nil, limitRules: Int? = nil, limitTeams: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetsResponse> {
        let localVariablePath = "/v1/gameCenterMatchmakingRuleSets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingRuleSets]": (wrappedValue: fieldsGameCenterMatchmakingRuleSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingTeams]": (wrappedValue: fieldsGameCenterMatchmakingTeams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingRules]": (wrappedValue: fieldsGameCenterMatchmakingRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingQueues]": (wrappedValue: fieldsGameCenterMatchmakingQueues?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[matchmakingQueues]": (wrappedValue: limitMatchmakingQueues?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[rules]": (wrappedValue: limitRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[teams]": (wrappedValue: limitTeams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetsResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsGetCollectionWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRuleSets
     */
    public enum FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetInstance: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case rulelanguageversion = "ruleLanguageVersion"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
        case teams = "teams"
        case rules = "rules"
        case matchmakingqueues = "matchmakingQueues"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingTeams
     */
    public enum FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetInstance: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRules
     */
    public enum FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetInstance: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case description = "description"
        case type = "type"
        case expression = "expression"
        case weight = "weight"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingQueues
     */
    public enum FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetInstance: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case classicmatchmakingbundleids = "classicMatchmakingBundleIds"
        case ruleset = "ruleSet"
        case experimentruleset = "experimentRuleSet"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterMatchmakingRuleSetsGetInstance: String, Sendable, CaseIterable {
        case teams = "teams"
        case rules = "rules"
        case matchmakingqueues = "matchmakingQueues"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitMatchmakingQueues: (query) maximum number of related matchmakingQueues returned (when they are included) (optional)
     - parameter limitRules: (query) maximum number of related rules returned (when they are included) (optional)
     - parameter limitTeams: (query) maximum number of related teams returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsGetInstance(id: String, fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetInstance]? = nil, include: [Include_gameCenterMatchmakingRuleSetsGetInstance]? = nil, limitMatchmakingQueues: Int? = nil, limitRules: Int? = nil, limitTeams: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsGetInstanceWithRequestBuilder(id: id, fieldsGameCenterMatchmakingRuleSets: fieldsGameCenterMatchmakingRuleSets, fieldsGameCenterMatchmakingTeams: fieldsGameCenterMatchmakingTeams, fieldsGameCenterMatchmakingRules: fieldsGameCenterMatchmakingRules, fieldsGameCenterMatchmakingQueues: fieldsGameCenterMatchmakingQueues, include: include, limitMatchmakingQueues: limitMatchmakingQueues, limitRules: limitRules, limitTeams: limitTeams, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsGetInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsGetInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitMatchmakingQueues: (query) maximum number of related matchmakingQueues returned (when they are included) (optional)
     - parameter limitRules: (query) maximum number of related rules returned (when they are included) (optional)
     - parameter limitTeams: (query) maximum number of related teams returned (when they are included) (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsGetInstanceWithRequestBuilder(id: String, fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsGetInstance]? = nil, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsGetInstance]? = nil, include: [Include_gameCenterMatchmakingRuleSetsGetInstance]? = nil, limitMatchmakingQueues: Int? = nil, limitRules: Int? = nil, limitTeams: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingRuleSets]": (wrappedValue: fieldsGameCenterMatchmakingRuleSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingTeams]": (wrappedValue: fieldsGameCenterMatchmakingTeams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingRules]": (wrappedValue: fieldsGameCenterMatchmakingRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingQueues]": (wrappedValue: fieldsGameCenterMatchmakingQueues?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit[matchmakingQueues]": (wrappedValue: limitMatchmakingQueues?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[rules]": (wrappedValue: limitRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "limit[teams]": (wrappedValue: limitTeams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsGetInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingQueues
     */
    public enum FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case classicmatchmakingbundleids = "classicMatchmakingBundleIds"
        case ruleset = "ruleSet"
        case experimentruleset = "experimentRuleSet"
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRuleSets
     */
    public enum FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case rulelanguageversion = "ruleLanguageVersion"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
        case teams = "teams"
        case rules = "rules"
        case matchmakingqueues = "matchmakingQueues"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated: String, Sendable, CaseIterable {
        case ruleset = "ruleSet"
        case experimentruleset = "experimentRuleSet"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingQueuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated(id: String, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingQueuesResponse {
        return try await gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedWithRequestBuilder(id: id, fieldsGameCenterMatchmakingQueues: fieldsGameCenterMatchmakingQueues, fieldsGameCenterMatchmakingRuleSets: fieldsGameCenterMatchmakingRuleSets, limit: limit, include: include, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingQueuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingQueuesResponse {
        return try await gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingQueues: (query) the fields to include for returned resources of type gameCenterMatchmakingQueues (optional)
     - parameter fieldsGameCenterMatchmakingRuleSets: (query) the fields to include for returned resources of type gameCenterMatchmakingRuleSets (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingQueuesResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedWithRequestBuilder(id: String, fieldsGameCenterMatchmakingQueues: [FieldsGameCenterMatchmakingQueues_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, fieldsGameCenterMatchmakingRuleSets: [FieldsGameCenterMatchmakingRuleSets_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated]? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingQueuesResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingQueues]": (wrappedValue: fieldsGameCenterMatchmakingQueues?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "fields[gameCenterMatchmakingRuleSets]": (wrappedValue: fieldsGameCenterMatchmakingRuleSets?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueuesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingQueuesResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingQueuesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingQueuesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingRules
     */
    public enum FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsRulesGetToManyRelated: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case description = "description"
        case type = "type"
        case expression = "expression"
        case weight = "weight"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRulesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsRulesGetToManyRelated(id: String, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsRulesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRulesResponse {
        return try await gameCenterMatchmakingRuleSetsRulesGetToManyRelatedWithRequestBuilder(id: id, fieldsGameCenterMatchmakingRules: fieldsGameCenterMatchmakingRules, limit: limit, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRulesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsRulesGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRulesResponse {
        return try await gameCenterMatchmakingRuleSetsRulesGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/rules
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingRules: (query) the fields to include for returned resources of type gameCenterMatchmakingRules (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRulesResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsRulesGetToManyRelatedWithRequestBuilder(id: String, fieldsGameCenterMatchmakingRules: [FieldsGameCenterMatchmakingRules_gameCenterMatchmakingRuleSetsRulesGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRulesResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}/rules"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingRules]": (wrappedValue: fieldsGameCenterMatchmakingRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRulesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/rules
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRulesResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsRulesGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRulesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRulesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter fieldsGameCenterMatchmakingTeams
     */
    public enum FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsTeamsGetToManyRelated: String, Sendable, CaseIterable {
        case referencename = "referenceName"
        case minplayers = "minPlayers"
        case maxplayers = "maxPlayers"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingTeamsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsTeamsGetToManyRelated(id: String, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsTeamsGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingTeamsResponse {
        return try await gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedWithRequestBuilder(id: id, fieldsGameCenterMatchmakingTeams: fieldsGameCenterMatchmakingTeams, limit: limit, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingTeamsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsTeamsGetToManyRelated(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingTeamsResponse {
        return try await gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/teams
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterMatchmakingTeams: (query) the fields to include for returned resources of type gameCenterMatchmakingTeams (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingTeamsResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedWithRequestBuilder(id: String, fieldsGameCenterMatchmakingTeams: [FieldsGameCenterMatchmakingTeams_gameCenterMatchmakingRuleSetsTeamsGetToManyRelated]? = nil, limit: Int? = nil, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingTeamsResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}/teams"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterMatchmakingTeams]": (wrappedValue: fieldsGameCenterMatchmakingTeams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingTeamsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - GET /v1/gameCenterMatchmakingRuleSets/{id}/teams
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingTeamsResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsTeamsGetToManyRelatedWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingTeamsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingTeamsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterMatchmakingRuleSetUpdateRequest: (body) GameCenterMatchmakingRuleSet representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsUpdateInstance(id: String, gameCenterMatchmakingRuleSetUpdateRequest: GameCenterMatchmakingRuleSetUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsUpdateInstanceWithRequestBuilder(id: id, gameCenterMatchmakingRuleSetUpdateRequest: gameCenterMatchmakingRuleSetUpdateRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GameCenterMatchmakingRuleSetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func gameCenterMatchmakingRuleSetsUpdateInstance(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) async throws(ErrorResponse) -> GameCenterMatchmakingRuleSetResponse {
        return try await gameCenterMatchmakingRuleSetsUpdateInstanceWithRequestBuilder(urlString: urlString, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - PATCH /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterMatchmakingRuleSetUpdateRequest: (body) GameCenterMatchmakingRuleSet representation 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsUpdateInstanceWithRequestBuilder(id: String, gameCenterMatchmakingRuleSetUpdateRequest: GameCenterMatchmakingRuleSetUpdateRequest, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        var localVariablePath = "/v1/gameCenterMatchmakingRuleSets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterMatchmakingRuleSetUpdateRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     - PATCH /v1/gameCenterMatchmakingRuleSets/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GameCenterMatchmakingRuleSetResponse> 
     */
    open class func gameCenterMatchmakingRuleSetsUpdateInstanceWithRequestBuilder(urlString: String, apiConfiguration: ASCAPIConfiguration = ASCAPIConfiguration.shared) -> RequestBuilder<GameCenterMatchmakingRuleSetResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterMatchmakingRuleSetResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
