//
// SubscriptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubscriptionsAPI {

    /**
     * enum for parameter fieldsSubscriptionAppStoreReviewScreenshots
     */
    public enum FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case imageasset = "imageAsset"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case subscription = "subscription"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionAppStoreReviewScreenshotResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelated(id: String, fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil, include: [Include_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil) async throws -> SubscriptionAppStoreReviewScreenshotResponse {
        return try await subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(id: id, fieldsSubscriptionAppStoreReviewScreenshots: fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions: fieldsSubscriptions, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionAppStoreReviewScreenshotResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelated(urlString: String) async throws -> SubscriptionAppStoreReviewScreenshotResponse {
        return try await subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/appStoreReviewScreenshot
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> 
     */
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(id: String, fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil, include: [Include_subscriptionsAppStoreReviewScreenshotGetToOneRelated]? = nil) -> RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/appStoreReviewScreenshot"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionAppStoreReviewScreenshots]": (wrappedValue: fieldsSubscriptionAppStoreReviewScreenshots?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/appStoreReviewScreenshot
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> 
     */
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter subscriptionCreateRequest: (body) Subscription representation 
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsCreateInstance(subscriptionCreateRequest: SubscriptionCreateRequest) async throws -> SubscriptionResponse {
        return try await subscriptionsCreateInstanceWithRequestBuilder(subscriptionCreateRequest: subscriptionCreateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsCreateInstance(urlString: String) async throws -> SubscriptionResponse {
        return try await subscriptionsCreateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - POST /v1/subscriptions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter subscriptionCreateRequest: (body) Subscription representation 
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsCreateInstanceWithRequestBuilder(subscriptionCreateRequest: SubscriptionCreateRequest) -> RequestBuilder<SubscriptionResponse> {
        let localVariablePath = "/v1/subscriptions"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - POST /v1/subscriptions
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsCreateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsDeleteInstance(id: String) async throws {
        return try await subscriptionsDeleteInstanceWithRequestBuilder(id: id).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsDeleteInstance(urlString: String) async throws {
        return try await subscriptionsDeleteInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/subscriptions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsDeleteInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsGetInstance: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter fieldsSubscriptionLocalizations
     */
    public enum FieldsSubscriptionLocalizations_subscriptionsGetInstance: String, CaseIterable {
        case name = "name"
        case locale = "locale"
        case description = "description"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptionAppStoreReviewScreenshots
     */
    public enum FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsGetInstance: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case imageasset = "imageAsset"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case uploadoperations = "uploadOperations"
        case assetdeliverystate = "assetDeliveryState"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptionIntroductoryOffers
     */
    public enum FieldsSubscriptionIntroductoryOffers_subscriptionsGetInstance: String, CaseIterable {
        case startdate = "startDate"
        case enddate = "endDate"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case subscription = "subscription"
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionsGetInstance: String, CaseIterable {
        case name = "name"
        case offercode = "offerCode"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case subscription = "subscription"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodes
     */
    public enum FieldsSubscriptionOfferCodes_subscriptionsGetInstance: String, CaseIterable {
        case name = "name"
        case customereligibilities = "customerEligibilities"
        case offereligibility = "offerEligibility"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case totalnumberofcodes = "totalNumberOfCodes"
        case active = "active"
        case subscription = "subscription"
        case onetimeusecodes = "oneTimeUseCodes"
        case customcodes = "customCodes"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptionPrices
     */
    public enum FieldsSubscriptionPrices_subscriptionsGetInstance: String, CaseIterable {
        case startdate = "startDate"
        case preserved = "preserved"
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_subscriptionsGetInstance: String, CaseIterable {
        case visibleforallusers = "visibleForAllUsers"
        case enabled = "enabled"
        case state = "state"
        case inapppurchasev2 = "inAppPurchaseV2"
        case subscription = "subscription"
        case promotionimages = "promotionImages"
    }

    /**
     * enum for parameter fieldsSubscriptionAvailabilities
     */
    public enum FieldsSubscriptionAvailabilities_subscriptionsGetInstance: String, CaseIterable {
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
    }

    /**
     * enum for parameter fieldsWinBackOffers
     */
    public enum FieldsWinBackOffers_subscriptionsGetInstance: String, CaseIterable {
        case referencename = "referenceName"
        case offerid = "offerId"
        case duration = "duration"
        case offermode = "offerMode"
        case periodcount = "periodCount"
        case customereligibilitypaidsubscriptiondurationinmonths = "customerEligibilityPaidSubscriptionDurationInMonths"
        case customereligibilitytimesincelastsubscribedinmonths = "customerEligibilityTimeSinceLastSubscribedInMonths"
        case customereligibilitywaitbetweenoffersinmonths = "customerEligibilityWaitBetweenOffersInMonths"
        case startdate = "startDate"
        case enddate = "endDate"
        case priority = "priority"
        case promotionintent = "promotionIntent"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptionImages
     */
    public enum FieldsSubscriptionImages_subscriptionsGetInstance: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case assettoken = "assetToken"
        case imageasset = "imageAsset"
        case uploadoperations = "uploadOperations"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsGetInstance: String, CaseIterable {
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionAvailabilities: (query) the fields to include for returned resources of type subscriptionAvailabilities (optional)
     - parameter fieldsWinBackOffers: (query) the fields to include for returned resources of type winBackOffers (optional)
     - parameter fieldsSubscriptionImages: (query) the fields to include for returned resources of type subscriptionImages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitImages: (query) maximum number of related images returned (when they are included) (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)
     - parameter limitWinBackOffers: (query) maximum number of related winBackOffers returned (when they are included) (optional)
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsGetInstance(id: String, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsGetInstance]? = nil, fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations_subscriptionsGetInstance]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsGetInstance]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes_subscriptionsGetInstance]? = nil, fieldsSubscriptionPrices: [FieldsSubscriptionPrices_subscriptionsGetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_subscriptionsGetInstance]? = nil, fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities_subscriptionsGetInstance]? = nil, fieldsWinBackOffers: [FieldsWinBackOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionImages: [FieldsSubscriptionImages_subscriptionsGetInstance]? = nil, include: [Include_subscriptionsGetInstance]? = nil, limitImages: Int? = nil, limitIntroductoryOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, limitPromotionalOffers: Int? = nil, limitSubscriptionLocalizations: Int? = nil, limitWinBackOffers: Int? = nil) async throws -> SubscriptionResponse {
        return try await subscriptionsGetInstanceWithRequestBuilder(id: id, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionLocalizations: fieldsSubscriptionLocalizations, fieldsSubscriptionAppStoreReviewScreenshots: fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptionIntroductoryOffers: fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes: fieldsSubscriptionOfferCodes, fieldsSubscriptionPrices: fieldsSubscriptionPrices, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptionAvailabilities: fieldsSubscriptionAvailabilities, fieldsWinBackOffers: fieldsWinBackOffers, fieldsSubscriptionImages: fieldsSubscriptionImages, include: include, limitImages: limitImages, limitIntroductoryOffers: limitIntroductoryOffers, limitOfferCodes: limitOfferCodes, limitPrices: limitPrices, limitPromotionalOffers: limitPromotionalOffers, limitSubscriptionLocalizations: limitSubscriptionLocalizations, limitWinBackOffers: limitWinBackOffers).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsGetInstance(urlString: String) async throws -> SubscriptionResponse {
        return try await subscriptionsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionAvailabilities: (query) the fields to include for returned resources of type subscriptionAvailabilities (optional)
     - parameter fieldsWinBackOffers: (query) the fields to include for returned resources of type winBackOffers (optional)
     - parameter fieldsSubscriptionImages: (query) the fields to include for returned resources of type subscriptionImages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitImages: (query) maximum number of related images returned (when they are included) (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)
     - parameter limitWinBackOffers: (query) maximum number of related winBackOffers returned (when they are included) (optional)
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsGetInstanceWithRequestBuilder(id: String, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsGetInstance]? = nil, fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations_subscriptionsGetInstance]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsGetInstance]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes_subscriptionsGetInstance]? = nil, fieldsSubscriptionPrices: [FieldsSubscriptionPrices_subscriptionsGetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_subscriptionsGetInstance]? = nil, fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities_subscriptionsGetInstance]? = nil, fieldsWinBackOffers: [FieldsWinBackOffers_subscriptionsGetInstance]? = nil, fieldsSubscriptionImages: [FieldsSubscriptionImages_subscriptionsGetInstance]? = nil, include: [Include_subscriptionsGetInstance]? = nil, limitImages: Int? = nil, limitIntroductoryOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, limitPromotionalOffers: Int? = nil, limitSubscriptionLocalizations: Int? = nil, limitWinBackOffers: Int? = nil) -> RequestBuilder<SubscriptionResponse> {
        var localVariablePath = "/v1/subscriptions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionLocalizations]": (wrappedValue: fieldsSubscriptionLocalizations?.encodeToJSON(), isExplode: false),
            "fields[subscriptionAppStoreReviewScreenshots]": (wrappedValue: fieldsSubscriptionAppStoreReviewScreenshots?.encodeToJSON(), isExplode: false),
            "fields[subscriptionIntroductoryOffers]": (wrappedValue: fieldsSubscriptionIntroductoryOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPromotionalOffers]": (wrappedValue: fieldsSubscriptionPromotionalOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptionOfferCodes]": (wrappedValue: fieldsSubscriptionOfferCodes?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPrices]": (wrappedValue: fieldsSubscriptionPrices?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[subscriptionAvailabilities]": (wrappedValue: fieldsSubscriptionAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[winBackOffers]": (wrappedValue: fieldsWinBackOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptionImages]": (wrappedValue: fieldsSubscriptionImages?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[images]": (wrappedValue: limitImages?.encodeToJSON(), isExplode: true),
            "limit[introductoryOffers]": (wrappedValue: limitIntroductoryOffers?.encodeToJSON(), isExplode: true),
            "limit[offerCodes]": (wrappedValue: limitOfferCodes?.encodeToJSON(), isExplode: true),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
            "limit[promotionalOffers]": (wrappedValue: limitPromotionalOffers?.encodeToJSON(), isExplode: true),
            "limit[subscriptionLocalizations]": (wrappedValue: limitSubscriptionLocalizations?.encodeToJSON(), isExplode: true),
            "limit[winBackOffers]": (wrappedValue: limitWinBackOffers?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionImages
     */
    public enum FieldsSubscriptionImages_subscriptionsImagesGetToManyRelated: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case assettoken = "assetToken"
        case imageasset = "imageAsset"
        case uploadoperations = "uploadOperations"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsImagesGetToManyRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsImagesGetToManyRelated: String, CaseIterable {
        case subscription = "subscription"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionImages: (query) the fields to include for returned resources of type subscriptionImages (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionImagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsImagesGetToManyRelated(id: String, fieldsSubscriptionImages: [FieldsSubscriptionImages_subscriptionsImagesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsImagesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsImagesGetToManyRelated]? = nil) async throws -> SubscriptionImagesResponse {
        return try await subscriptionsImagesGetToManyRelatedWithRequestBuilder(id: id, fieldsSubscriptionImages: fieldsSubscriptionImages, fieldsSubscriptions: fieldsSubscriptions, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionImagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsImagesGetToManyRelated(urlString: String) async throws -> SubscriptionImagesResponse {
        return try await subscriptionsImagesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/images
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionImages: (query) the fields to include for returned resources of type subscriptionImages (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionImagesResponse> 
     */
    open class func subscriptionsImagesGetToManyRelatedWithRequestBuilder(id: String, fieldsSubscriptionImages: [FieldsSubscriptionImages_subscriptionsImagesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsImagesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsImagesGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionImagesResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/images"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionImages]": (wrappedValue: fieldsSubscriptionImages?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionImagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/images
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionImagesResponse> 
     */
    open class func subscriptionsImagesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionImagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionImagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionIntroductoryOffersLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationship(id: String, subscriptionIntroductoryOffersLinkagesRequest: SubscriptionIntroductoryOffersLinkagesRequest) async throws {
        return try await subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(id: id, subscriptionIntroductoryOffersLinkagesRequest: subscriptionIntroductoryOffersLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationship(urlString: String) async throws {
        return try await subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/subscriptions/{id}/relationships/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionIntroductoryOffersLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(id: String, subscriptionIntroductoryOffersLinkagesRequest: SubscriptionIntroductoryOffersLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/subscriptions/{id}/relationships/introductoryOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionIntroductoryOffersLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/subscriptions/{id}/relationships/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionIntroductoryOffers
     */
    public enum FieldsSubscriptionIntroductoryOffers_subscriptionsIntroductoryOffersGetToManyRelated: String, CaseIterable {
        case startdate = "startDate"
        case enddate = "endDate"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case subscription = "subscription"
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsIntroductoryOffersGetToManyRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsIntroductoryOffersGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsIntroductoryOffersGetToManyRelated: String, CaseIterable {
        case customerprice = "customerPrice"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case territory = "territory"
        case equalizations = "equalizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsIntroductoryOffersGetToManyRelated: String, CaseIterable {
        case subscription = "subscription"
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionIntroductoryOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsIntroductoryOffersGetToManyRelated]? = nil) async throws -> SubscriptionIntroductoryOffersResponse {
        return try await subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsSubscriptionIntroductoryOffers: fieldsSubscriptionIntroductoryOffers, fieldsSubscriptions: fieldsSubscriptions, fieldsTerritories: fieldsTerritories, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionIntroductoryOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersGetToManyRelated(urlString: String) async throws -> SubscriptionIntroductoryOffersResponse {
        return try await subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionIntroductoryOffersResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [FieldsSubscriptionIntroductoryOffers_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsIntroductoryOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsIntroductoryOffersGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionIntroductoryOffersResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/introductoryOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionIntroductoryOffers]": (wrappedValue: fieldsSubscriptionIntroductoryOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPricePoints]": (wrappedValue: fieldsSubscriptionPricePoints?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionIntroductoryOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionIntroductoryOffersResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionIntroductoryOffersResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionIntroductoryOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: SubscriptionIntroductoryOffersLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersGetToManyRelationship(id: String, limit: Int? = nil) async throws -> SubscriptionIntroductoryOffersLinkagesResponse {
        return try await subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionIntroductoryOffersLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsIntroductoryOffersGetToManyRelationship(urlString: String) async throws -> SubscriptionIntroductoryOffersLinkagesResponse {
        return try await subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/relationships/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/relationships/introductoryOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/relationships/introductoryOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodes
     */
    public enum FieldsSubscriptionOfferCodes_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case name = "name"
        case customereligibilities = "customerEligibilities"
        case offereligibility = "offerEligibility"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case totalnumberofcodes = "totalNumberOfCodes"
        case active = "active"
        case subscription = "subscription"
        case onetimeusecodes = "oneTimeUseCodes"
        case customcodes = "customCodes"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodeOneTimeUseCodes
     */
    public enum FieldsSubscriptionOfferCodeOneTimeUseCodes_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case numberofcodes = "numberOfCodes"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case active = "active"
        case offercode = "offerCode"
        case values = "values"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodeCustomCodes
     */
    public enum FieldsSubscriptionOfferCodeCustomCodes_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case customcode = "customCode"
        case numberofcodes = "numberOfCodes"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case active = "active"
        case offercode = "offerCode"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodePrices
     */
    public enum FieldsSubscriptionOfferCodePrices_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsOfferCodesGetToManyRelated: String, CaseIterable {
        case subscription = "subscription"
        case onetimeusecodes = "oneTimeUseCodes"
        case customcodes = "customCodes"
        case prices = "prices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter fieldsSubscriptionOfferCodeCustomCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)
     - parameter fieldsSubscriptionOfferCodePrices: (query) the fields to include for returned resources of type subscriptionOfferCodePrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitOneTimeUseCodes: (query) maximum number of related oneTimeUseCodes returned (when they are included) (optional)
     - parameter limitCustomCodes: (query) maximum number of related customCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: SubscriptionOfferCodesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsOfferCodesGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices_subscriptionsOfferCodesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsOfferCodesGetToManyRelated]? = nil, limitOneTimeUseCodes: Int? = nil, limitCustomCodes: Int? = nil, limitPrices: Int? = nil) async throws -> SubscriptionOfferCodesResponse {
        return try await subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsSubscriptionOfferCodes: fieldsSubscriptionOfferCodes, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionOfferCodeOneTimeUseCodes: fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptionOfferCodeCustomCodes: fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodePrices: fieldsSubscriptionOfferCodePrices, limit: limit, include: include, limitOneTimeUseCodes: limitOneTimeUseCodes, limitCustomCodes: limitCustomCodes, limitPrices: limitPrices).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionOfferCodesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsOfferCodesGetToManyRelated(urlString: String) async throws -> SubscriptionOfferCodesResponse {
        return try await subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/offerCodes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter fieldsSubscriptionOfferCodeCustomCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)
     - parameter fieldsSubscriptionOfferCodePrices: (query) the fields to include for returned resources of type subscriptionOfferCodePrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitOneTimeUseCodes: (query) maximum number of related oneTimeUseCodes returned (when they are included) (optional)
     - parameter limitCustomCodes: (query) maximum number of related customCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: RequestBuilder<SubscriptionOfferCodesResponse> 
     */
    open class func subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionOfferCodes: [FieldsSubscriptionOfferCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [FieldsSubscriptionOfferCodeOneTimeUseCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [FieldsSubscriptionOfferCodeCustomCodes_subscriptionsOfferCodesGetToManyRelated]? = nil, fieldsSubscriptionOfferCodePrices: [FieldsSubscriptionOfferCodePrices_subscriptionsOfferCodesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsOfferCodesGetToManyRelated]? = nil, limitOneTimeUseCodes: Int? = nil, limitCustomCodes: Int? = nil, limitPrices: Int? = nil) -> RequestBuilder<SubscriptionOfferCodesResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/offerCodes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionOfferCodes]": (wrappedValue: fieldsSubscriptionOfferCodes?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionOfferCodeOneTimeUseCodes]": (wrappedValue: fieldsSubscriptionOfferCodeOneTimeUseCodes?.encodeToJSON(), isExplode: false),
            "fields[subscriptionOfferCodeCustomCodes]": (wrappedValue: fieldsSubscriptionOfferCodeCustomCodes?.encodeToJSON(), isExplode: false),
            "fields[subscriptionOfferCodePrices]": (wrappedValue: fieldsSubscriptionOfferCodePrices?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[oneTimeUseCodes]": (wrappedValue: limitOneTimeUseCodes?.encodeToJSON(), isExplode: true),
            "limit[customCodes]": (wrappedValue: limitCustomCodes?.encodeToJSON(), isExplode: true),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionOfferCodesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/offerCodes
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionOfferCodesResponse> 
     */
    open class func subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionOfferCodesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionOfferCodesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsPricePointsGetToManyRelated: String, CaseIterable {
        case customerprice = "customerPrice"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case territory = "territory"
        case equalizations = "equalizations"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsPricePointsGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPricePointsGetToManyRelated: String, CaseIterable {
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionPricePointsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricePointsGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPricePointsGetToManyRelated]? = nil) async throws -> SubscriptionPricePointsResponse {
        return try await subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPricePointsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricePointsGetToManyRelated(urlString: String) async throws -> SubscriptionPricePointsResponse {
        return try await subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/pricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionPricePointsResponse> 
     */
    open class func subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsPricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsPricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPricePointsGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionPricePointsResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/pricePoints"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPricePoints]": (wrappedValue: fieldsSubscriptionPricePoints?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricePointsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/pricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPricePointsResponse> 
     */
    open class func subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPricePointsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricePointsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionPricesLinkagesRequest: (body) List of related linkages 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesDeleteToManyRelationship(id: String, subscriptionPricesLinkagesRequest: SubscriptionPricesLinkagesRequest) async throws {
        return try await subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(id: id, subscriptionPricesLinkagesRequest: subscriptionPricesLinkagesRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesDeleteToManyRelationship(urlString: String) async throws {
        return try await subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - DELETE /v1/subscriptions/{id}/relationships/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionPricesLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(id: String, subscriptionPricesLinkagesRequest: SubscriptionPricesLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/subscriptions/{id}/relationships/prices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionPricesLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - DELETE /v1/subscriptions/{id}/relationships/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<Void> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ASCAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionPrices
     */
    public enum FieldsSubscriptionPrices_subscriptionsPricesGetToManyRelated: String, CaseIterable {
        case startdate = "startDate"
        case preserved = "preserved"
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsPricesGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsPricesGetToManyRelated: String, CaseIterable {
        case customerprice = "customerPrice"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case territory = "territory"
        case equalizations = "equalizations"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPricesGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterSubscriptionPricePoint: (query) filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionPricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesGetToManyRelated(id: String, filterSubscriptionPricePoint: [String]? = nil, filterTerritory: [String]? = nil, fieldsSubscriptionPrices: [FieldsSubscriptionPrices_subscriptionsPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsPricesGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPricesGetToManyRelated]? = nil) async throws -> SubscriptionPricesResponse {
        return try await subscriptionsPricesGetToManyRelatedWithRequestBuilder(id: id, filterSubscriptionPricePoint: filterSubscriptionPricePoint, filterTerritory: filterTerritory, fieldsSubscriptionPrices: fieldsSubscriptionPrices, fieldsTerritories: fieldsTerritories, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPricesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesGetToManyRelated(urlString: String) async throws -> SubscriptionPricesResponse {
        return try await subscriptionsPricesGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterSubscriptionPricePoint: (query) filter by id(s) of related &#39;subscriptionPricePoint&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionPricesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelatedWithRequestBuilder(id: String, filterSubscriptionPricePoint: [String]? = nil, filterTerritory: [String]? = nil, fieldsSubscriptionPrices: [FieldsSubscriptionPrices_subscriptionsPricesGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsPricesGetToManyRelated]? = nil, fieldsSubscriptionPricePoints: [FieldsSubscriptionPricePoints_subscriptionsPricesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPricesGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionPricesResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/prices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[subscriptionPricePoint]": (wrappedValue: filterSubscriptionPricePoint?.encodeToJSON(), isExplode: false),
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPrices]": (wrappedValue: fieldsSubscriptionPrices?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPricePoints]": (wrappedValue: fieldsSubscriptionPricePoints?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPricesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPricesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: SubscriptionPricesLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesGetToManyRelationship(id: String, limit: Int? = nil) async throws -> SubscriptionPricesLinkagesResponse {
        return try await subscriptionsPricesGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPricesLinkagesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPricesGetToManyRelationship(urlString: String) async throws -> SubscriptionPricesLinkagesResponse {
        return try await subscriptionsPricesGetToManyRelationshipWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/relationships/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<SubscriptionPricesLinkagesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<SubscriptionPricesLinkagesResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/relationships/prices"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricesLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/relationships/prices
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPricesLinkagesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelationshipWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPricesLinkagesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPricesLinkagesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_subscriptionsPromotedPurchaseGetToOneRelated: String, CaseIterable {
        case visibleforallusers = "visibleForAllUsers"
        case enabled = "enabled"
        case state = "state"
        case inapppurchasev2 = "inAppPurchaseV2"
        case subscription = "subscription"
        case promotionimages = "promotionImages"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_subscriptionsPromotedPurchaseGetToOneRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case inapppurchasetype = "inAppPurchaseType"
        case state = "state"
        case reviewnote = "reviewNote"
        case familysharable = "familySharable"
        case contenthosting = "contentHosting"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case pricepoints = "pricePoints"
        case content = "content"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case promotedpurchase = "promotedPurchase"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case images = "images"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsPromotedPurchaseGetToOneRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter fieldsPromotedPurchaseImages
     */
    public enum FieldsPromotedPurchaseImages_subscriptionsPromotedPurchaseGetToOneRelated: String, CaseIterable {
        case filesize = "fileSize"
        case filename = "fileName"
        case sourcefilechecksum = "sourceFileChecksum"
        case assettoken = "assetToken"
        case imageasset = "imageAsset"
        case assettype = "assetType"
        case uploadoperations = "uploadOperations"
        case state = "state"
        case promotedpurchase = "promotedPurchase"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPromotedPurchaseGetToOneRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
        case subscription = "subscription"
        case promotionimages = "promotionImages"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - returns: PromotedPurchaseResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPromotedPurchaseGetToOneRelated(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, include: [Include_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, limitPromotionImages: Int? = nil) async throws -> PromotedPurchaseResponse {
        return try await subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(id: id, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsInAppPurchases: fieldsInAppPurchases, fieldsSubscriptions: fieldsSubscriptions, fieldsPromotedPurchaseImages: fieldsPromotedPurchaseImages, include: include, limitPromotionImages: limitPromotionImages).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: PromotedPurchaseResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPromotedPurchaseGetToOneRelated(urlString: String) async throws -> PromotedPurchaseResponse {
        return try await subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/promotedPurchase
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - returns: RequestBuilder<PromotedPurchaseResponse> 
     */
    open class func subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, include: [Include_subscriptionsPromotedPurchaseGetToOneRelated]? = nil, limitPromotionImages: Int? = nil) -> RequestBuilder<PromotedPurchaseResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/promotedPurchase"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchaseImages]": (wrappedValue: fieldsPromotedPurchaseImages?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[promotionImages]": (wrappedValue: limitPromotionImages?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromotedPurchaseResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/promotedPurchase
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<PromotedPurchaseResponse> 
     */
    open class func subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<PromotedPurchaseResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromotedPurchaseResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionsPromotionalOffersGetToManyRelated: String, CaseIterable {
        case name = "name"
        case offercode = "offerCode"
        case duration = "duration"
        case offermode = "offerMode"
        case numberofperiods = "numberOfPeriods"
        case subscription = "subscription"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsPromotionalOffersGetToManyRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOfferPrices
     */
    public enum FieldsSubscriptionPromotionalOfferPrices_subscriptionsPromotionalOffersGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPromotionalOffersGetToManyRelated: String, CaseIterable {
        case subscription = "subscription"
        case prices = "prices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: SubscriptionPromotionalOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPromotionalOffersGetToManyRelated(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionsPromotionalOffersGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsPromotionalOffersGetToManyRelated]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionsPromotionalOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPromotionalOffersGetToManyRelated]? = nil, limitPrices: Int? = nil) async throws -> SubscriptionPromotionalOffersResponse {
        return try await subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(id: id, filterTerritory: filterTerritory, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionPromotionalOfferPrices: fieldsSubscriptionPromotionalOfferPrices, limit: limit, include: include, limitPrices: limitPrices).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionPromotionalOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsPromotionalOffersGetToManyRelated(urlString: String) async throws -> SubscriptionPromotionalOffersResponse {
        return try await subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/promotionalOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: RequestBuilder<SubscriptionPromotionalOffersResponse> 
     */
    open class func subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOffers: [FieldsSubscriptionPromotionalOffers_subscriptionsPromotionalOffersGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsPromotionalOffersGetToManyRelated]? = nil, fieldsSubscriptionPromotionalOfferPrices: [FieldsSubscriptionPromotionalOfferPrices_subscriptionsPromotionalOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsPromotionalOffersGetToManyRelated]? = nil, limitPrices: Int? = nil) -> RequestBuilder<SubscriptionPromotionalOffersResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/promotionalOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPromotionalOffers]": (wrappedValue: fieldsSubscriptionPromotionalOffers?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[subscriptionPromotionalOfferPrices]": (wrappedValue: fieldsSubscriptionPromotionalOfferPrices?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/promotionalOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionPromotionalOffersResponse> 
     */
    open class func subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionPromotionalOffersResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionPromotionalOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionAvailabilities
     */
    public enum FieldsSubscriptionAvailabilities_subscriptionsSubscriptionAvailabilityGetToOneRelated: String, CaseIterable {
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsSubscriptionAvailabilityGetToOneRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsSubscriptionAvailabilityGetToOneRelated: String, CaseIterable {
        case availableterritories = "availableTerritories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAvailabilities: (query) the fields to include for returned resources of type subscriptionAvailabilities (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - returns: SubscriptionAvailabilityResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsSubscriptionAvailabilityGetToOneRelated(id: String, fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, include: [Include_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil) async throws -> SubscriptionAvailabilityResponse {
        return try await subscriptionsSubscriptionAvailabilityGetToOneRelatedWithRequestBuilder(id: id, fieldsSubscriptionAvailabilities: fieldsSubscriptionAvailabilities, fieldsTerritories: fieldsTerritories, include: include, limitAvailableTerritories: limitAvailableTerritories).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionAvailabilityResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsSubscriptionAvailabilityGetToOneRelated(urlString: String) async throws -> SubscriptionAvailabilityResponse {
        return try await subscriptionsSubscriptionAvailabilityGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/subscriptionAvailability
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAvailabilities: (query) the fields to include for returned resources of type subscriptionAvailabilities (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - returns: RequestBuilder<SubscriptionAvailabilityResponse> 
     */
    open class func subscriptionsSubscriptionAvailabilityGetToOneRelatedWithRequestBuilder(id: String, fieldsSubscriptionAvailabilities: [FieldsSubscriptionAvailabilities_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, include: [Include_subscriptionsSubscriptionAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil) -> RequestBuilder<SubscriptionAvailabilityResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/subscriptionAvailability"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionAvailabilities]": (wrappedValue: fieldsSubscriptionAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[availableTerritories]": (wrappedValue: limitAvailableTerritories?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/subscriptionAvailability
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionAvailabilityResponse> 
     */
    open class func subscriptionsSubscriptionAvailabilityGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionAvailabilityResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionAvailabilityResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsSubscriptionLocalizations
     */
    public enum FieldsSubscriptionLocalizations_subscriptionsSubscriptionLocalizationsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case locale = "locale"
        case description = "description"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsSubscriptionLocalizationsGetToManyRelated: String, CaseIterable {
        case name = "name"
        case productid = "productId"
        case familysharable = "familySharable"
        case state = "state"
        case subscriptionperiod = "subscriptionPeriod"
        case reviewnote = "reviewNote"
        case grouplevel = "groupLevel"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case promotionaloffers = "promotionalOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
        case subscriptionavailability = "subscriptionAvailability"
        case winbackoffers = "winBackOffers"
        case images = "images"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsSubscriptionLocalizationsGetToManyRelated: String, CaseIterable {
        case subscription = "subscription"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: SubscriptionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelated(id: String, fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil) async throws -> SubscriptionLocalizationsResponse {
        return try await subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsSubscriptionLocalizations: fieldsSubscriptionLocalizations, fieldsSubscriptions: fieldsSubscriptions, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionLocalizationsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelated(urlString: String) async throws -> SubscriptionLocalizationsResponse {
        return try await subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/subscriptionLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<SubscriptionLocalizationsResponse> 
     */
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsSubscriptionLocalizations: [FieldsSubscriptionLocalizations_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsSubscriptionLocalizationsGetToManyRelated]? = nil) -> RequestBuilder<SubscriptionLocalizationsResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/subscriptionLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[subscriptionLocalizations]": (wrappedValue: fieldsSubscriptionLocalizations?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/subscriptionLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionLocalizationsResponse> 
     */
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionLocalizationsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionLocalizationsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionUpdateRequest: (body) Subscription representation 
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsUpdateInstance(id: String, subscriptionUpdateRequest: SubscriptionUpdateRequest) async throws -> SubscriptionResponse {
        return try await subscriptionsUpdateInstanceWithRequestBuilder(id: id, subscriptionUpdateRequest: subscriptionUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: SubscriptionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsUpdateInstance(urlString: String) async throws -> SubscriptionResponse {
        return try await subscriptionsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter subscriptionUpdateRequest: (body) Subscription representation 
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsUpdateInstanceWithRequestBuilder(id: String, subscriptionUpdateRequest: SubscriptionUpdateRequest) -> RequestBuilder<SubscriptionResponse> {
        var localVariablePath = "/v1/subscriptions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriptionUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/subscriptions/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<SubscriptionResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubscriptionResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsWinBackOffers
     */
    public enum FieldsWinBackOffers_subscriptionsWinBackOffersGetToManyRelated: String, CaseIterable {
        case referencename = "referenceName"
        case offerid = "offerId"
        case duration = "duration"
        case offermode = "offerMode"
        case periodcount = "periodCount"
        case customereligibilitypaidsubscriptiondurationinmonths = "customerEligibilityPaidSubscriptionDurationInMonths"
        case customereligibilitytimesincelastsubscribedinmonths = "customerEligibilityTimeSinceLastSubscribedInMonths"
        case customereligibilitywaitbetweenoffersinmonths = "customerEligibilityWaitBetweenOffersInMonths"
        case startdate = "startDate"
        case enddate = "endDate"
        case priority = "priority"
        case promotionintent = "promotionIntent"
        case prices = "prices"
    }

    /**
     * enum for parameter fieldsWinBackOfferPrices
     */
    public enum FieldsWinBackOfferPrices_subscriptionsWinBackOffersGetToManyRelated: String, CaseIterable {
        case territory = "territory"
        case subscriptionpricepoint = "subscriptionPricePoint"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsWinBackOffersGetToManyRelated: String, CaseIterable {
        case prices = "prices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsWinBackOffers: (query) the fields to include for returned resources of type winBackOffers (optional)
     - parameter fieldsWinBackOfferPrices: (query) the fields to include for returned resources of type winBackOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: WinBackOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsWinBackOffersGetToManyRelated(id: String, fieldsWinBackOffers: [FieldsWinBackOffers_subscriptionsWinBackOffersGetToManyRelated]? = nil, fieldsWinBackOfferPrices: [FieldsWinBackOfferPrices_subscriptionsWinBackOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsWinBackOffersGetToManyRelated]? = nil, limitPrices: Int? = nil) async throws -> WinBackOffersResponse {
        return try await subscriptionsWinBackOffersGetToManyRelatedWithRequestBuilder(id: id, fieldsWinBackOffers: fieldsWinBackOffers, fieldsWinBackOfferPrices: fieldsWinBackOfferPrices, limit: limit, include: include, limitPrices: limitPrices).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: WinBackOffersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func subscriptionsWinBackOffersGetToManyRelated(urlString: String) async throws -> WinBackOffersResponse {
        return try await subscriptionsWinBackOffersGetToManyRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/subscriptions/{id}/winBackOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsWinBackOffers: (query) the fields to include for returned resources of type winBackOffers (optional)
     - parameter fieldsWinBackOfferPrices: (query) the fields to include for returned resources of type winBackOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - returns: RequestBuilder<WinBackOffersResponse> 
     */
    open class func subscriptionsWinBackOffersGetToManyRelatedWithRequestBuilder(id: String, fieldsWinBackOffers: [FieldsWinBackOffers_subscriptionsWinBackOffersGetToManyRelated]? = nil, fieldsWinBackOfferPrices: [FieldsWinBackOfferPrices_subscriptionsWinBackOffersGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_subscriptionsWinBackOffersGetToManyRelated]? = nil, limitPrices: Int? = nil) -> RequestBuilder<WinBackOffersResponse> {
        var localVariablePath = "/v1/subscriptions/{id}/winBackOffers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[winBackOffers]": (wrappedValue: fieldsWinBackOffers?.encodeToJSON(), isExplode: false),
            "fields[winBackOfferPrices]": (wrappedValue: fieldsWinBackOfferPrices?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[prices]": (wrappedValue: limitPrices?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WinBackOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/subscriptions/{id}/winBackOffers
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<WinBackOffersResponse> 
     */
    open class func subscriptionsWinBackOffersGetToManyRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<WinBackOffersResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WinBackOffersResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
