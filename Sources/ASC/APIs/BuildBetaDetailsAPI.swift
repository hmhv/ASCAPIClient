//
// BuildBetaDetailsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BuildBetaDetailsAPI {

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildBetaDetailsBuildGetToOneRelated: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsBuildGetToOneRelated(id: String, fieldsBuilds: [FieldsBuilds_buildBetaDetailsBuildGetToOneRelated]? = nil) async throws -> BuildWithoutIncludesResponse {
        return try await buildBetaDetailsBuildGetToOneRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildWithoutIncludesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsBuildGetToOneRelated(urlString: String) async throws -> BuildWithoutIncludesResponse {
        return try await buildBetaDetailsBuildGetToOneRelatedWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/buildBetaDetails/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func buildBetaDetailsBuildGetToOneRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_buildBetaDetailsBuildGetToOneRelated]? = nil) -> RequestBuilder<BuildWithoutIncludesResponse> {
        var localVariablePath = "/v1/buildBetaDetails/{id}/build"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/buildBetaDetails/{id}/build
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildWithoutIncludesResponse> 
     */
    open class func buildBetaDetailsBuildGetToOneRelatedWithRequestBuilder(urlString: String) -> RequestBuilder<BuildWithoutIncludesResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildWithoutIncludesResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildBetaDetailsGetCollection: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case internalbuildstate = "internalBuildState"
        case externalbuildstate = "externalBuildState"
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildBetaDetailsGetCollection: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildBetaDetailsGetCollection: String, CaseIterable {
        case build = "build"
    }

    /**

     - parameter filterBuild: (query) filter by id(s) of related &#39;build&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: BuildBetaDetailsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsGetCollection(filterBuild: [String]? = nil, filterId: [String]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildBetaDetailsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_buildBetaDetailsGetCollection]? = nil, limit: Int? = nil, include: [Include_buildBetaDetailsGetCollection]? = nil) async throws -> BuildBetaDetailsResponse {
        return try await buildBetaDetailsGetCollectionWithRequestBuilder(filterBuild: filterBuild, filterId: filterId, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBuilds: fieldsBuilds, limit: limit, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildBetaDetailsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsGetCollection(urlString: String) async throws -> BuildBetaDetailsResponse {
        return try await buildBetaDetailsGetCollectionWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/buildBetaDetails
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterBuild: (query) filter by id(s) of related &#39;build&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<BuildBetaDetailsResponse> 
     */
    open class func buildBetaDetailsGetCollectionWithRequestBuilder(filterBuild: [String]? = nil, filterId: [String]? = nil, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildBetaDetailsGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_buildBetaDetailsGetCollection]? = nil, limit: Int? = nil, include: [Include_buildBetaDetailsGetCollection]? = nil) -> RequestBuilder<BuildBetaDetailsResponse> {
        let localVariablePath = "/v1/buildBetaDetails"
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[build]": (wrappedValue: filterBuild?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/buildBetaDetails
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildBetaDetailsResponse> 
     */
    open class func buildBetaDetailsGetCollectionWithRequestBuilder(urlString: String) -> RequestBuilder<BuildBetaDetailsResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailsResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildBetaDetailsGetInstance: String, CaseIterable {
        case autonotifyenabled = "autoNotifyEnabled"
        case internalbuildstate = "internalBuildState"
        case externalbuildstate = "externalBuildState"
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildBetaDetailsGetInstance: String, CaseIterable {
        case version = "version"
        case uploadeddate = "uploadedDate"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case minosversion = "minOsVersion"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case computedminmacosversion = "computedMinMacOsVersion"
        case iconassettoken = "iconAssetToken"
        case processingstate = "processingState"
        case buildaudiencetype = "buildAudienceType"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case prereleaseversion = "preReleaseVersion"
        case individualtesters = "individualTesters"
        case betagroups = "betaGroups"
        case betabuildlocalizations = "betaBuildLocalizations"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case app = "app"
        case buildbetadetail = "buildBetaDetail"
        case appstoreversion = "appStoreVersion"
        case icons = "icons"
        case buildbundles = "buildBundles"
        case perfpowermetrics = "perfPowerMetrics"
        case diagnosticsignatures = "diagnosticSignatures"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildBetaDetailsGetInstance: String, CaseIterable {
        case build = "build"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsGetInstance(id: String, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildBetaDetailsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_buildBetaDetailsGetInstance]? = nil, include: [Include_buildBetaDetailsGetInstance]? = nil) async throws -> BuildBetaDetailResponse {
        return try await buildBetaDetailsGetInstanceWithRequestBuilder(id: id, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBuilds: fieldsBuilds, include: include).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsGetInstance(urlString: String) async throws -> BuildBetaDetailResponse {
        return try await buildBetaDetailsGetInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - GET /v1/buildBetaDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildBetaDetailsGetInstanceWithRequestBuilder(id: String, fieldsBuildBetaDetails: [FieldsBuildBetaDetails_buildBetaDetailsGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_buildBetaDetailsGetInstance]? = nil, include: [Include_buildBetaDetailsGetInstance]? = nil) -> RequestBuilder<BuildBetaDetailResponse> {
        var localVariablePath = "/v1/buildBetaDetails/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[buildBetaDetails]": (wrappedValue: fieldsBuildBetaDetails?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - GET /v1/buildBetaDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildBetaDetailsGetInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BuildBetaDetailResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaDetailUpdateRequest: (body) BuildBetaDetail representation 
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsUpdateInstance(id: String, buildBetaDetailUpdateRequest: BuildBetaDetailUpdateRequest) async throws -> BuildBetaDetailResponse {
        return try await buildBetaDetailsUpdateInstanceWithRequestBuilder(id: id, buildBetaDetailUpdateRequest: buildBetaDetailUpdateRequest).execute().body
    }

    /**
     - parameter urlString: next or first url from App Store Connect API
     - returns: BuildBetaDetailResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func buildBetaDetailsUpdateInstance(urlString: String) async throws -> BuildBetaDetailResponse {
        return try await buildBetaDetailsUpdateInstanceWithRequestBuilder(urlString: urlString).execute().body
    }

    /**
     - PATCH /v1/buildBetaDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter buildBetaDetailUpdateRequest: (body) BuildBetaDetail representation 
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildBetaDetailsUpdateInstanceWithRequestBuilder(id: String, buildBetaDetailUpdateRequest: BuildBetaDetailUpdateRequest) -> RequestBuilder<BuildBetaDetailResponse> {
        var localVariablePath = "/v1/buildBetaDetails/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ASCAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buildBetaDetailUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     - PATCH /v1/buildBetaDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter urlString: next or first url from App Store Connect API
     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildBetaDetailsUpdateInstanceWithRequestBuilder(urlString: String) -> RequestBuilder<BuildBetaDetailResponse> {
        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = ASCAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: urlString, parameters: nil, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
