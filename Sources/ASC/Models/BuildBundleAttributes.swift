//
// BuildBundleAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BuildBundleAttributes: Codable, Hashable {

    public enum BundleType: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case app = "APP"
        case appClip = "APP_CLIP"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var bundleId: String?
    public var bundleType: BundleType?
    public var sdkBuild: String?
    public var platformBuild: String?
    public var fileName: String?
    public var hasSirikit: Bool?
    public var hasOnDemandResources: Bool?
    public var hasPrerenderedIcon: Bool?
    public var usesLocationServices: Bool?
    public var isIosBuildMacAppStoreCompatible: Bool?
    public var includesSymbols: Bool?
    public var dSYMUrl: String?
    public var supportedArchitectures: [String]?
    public var requiredCapabilities: [String]?
    public var deviceProtocols: [String]?
    public var locales: [String]?
    public var entitlements: [String: [String: String]]?

    public init(bundleId: String? = nil, bundleType: BundleType? = nil, sdkBuild: String? = nil, platformBuild: String? = nil, fileName: String? = nil, hasSirikit: Bool? = nil, hasOnDemandResources: Bool? = nil, hasPrerenderedIcon: Bool? = nil, usesLocationServices: Bool? = nil, isIosBuildMacAppStoreCompatible: Bool? = nil, includesSymbols: Bool? = nil, dSYMUrl: String? = nil, supportedArchitectures: [String]? = nil, requiredCapabilities: [String]? = nil, deviceProtocols: [String]? = nil, locales: [String]? = nil, entitlements: [String: [String: String]]? = nil) {
        self.bundleId = bundleId
        self.bundleType = bundleType
        self.sdkBuild = sdkBuild
        self.platformBuild = platformBuild
        self.fileName = fileName
        self.hasSirikit = hasSirikit
        self.hasOnDemandResources = hasOnDemandResources
        self.hasPrerenderedIcon = hasPrerenderedIcon
        self.usesLocationServices = usesLocationServices
        self.isIosBuildMacAppStoreCompatible = isIosBuildMacAppStoreCompatible
        self.includesSymbols = includesSymbols
        self.dSYMUrl = dSYMUrl
        self.supportedArchitectures = supportedArchitectures
        self.requiredCapabilities = requiredCapabilities
        self.deviceProtocols = deviceProtocols
        self.locales = locales
        self.entitlements = entitlements
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bundleId
        case bundleType
        case sdkBuild
        case platformBuild
        case fileName
        case hasSirikit
        case hasOnDemandResources
        case hasPrerenderedIcon
        case usesLocationServices
        case isIosBuildMacAppStoreCompatible
        case includesSymbols
        case dSYMUrl
        case supportedArchitectures
        case requiredCapabilities
        case deviceProtocols
        case locales
        case entitlements
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bundleId, forKey: .bundleId)
        try container.encodeIfPresent(bundleType, forKey: .bundleType)
        try container.encodeIfPresent(sdkBuild, forKey: .sdkBuild)
        try container.encodeIfPresent(platformBuild, forKey: .platformBuild)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(hasSirikit, forKey: .hasSirikit)
        try container.encodeIfPresent(hasOnDemandResources, forKey: .hasOnDemandResources)
        try container.encodeIfPresent(hasPrerenderedIcon, forKey: .hasPrerenderedIcon)
        try container.encodeIfPresent(usesLocationServices, forKey: .usesLocationServices)
        try container.encodeIfPresent(isIosBuildMacAppStoreCompatible, forKey: .isIosBuildMacAppStoreCompatible)
        try container.encodeIfPresent(includesSymbols, forKey: .includesSymbols)
        try container.encodeIfPresent(dSYMUrl, forKey: .dSYMUrl)
        try container.encodeIfPresent(supportedArchitectures, forKey: .supportedArchitectures)
        try container.encodeIfPresent(requiredCapabilities, forKey: .requiredCapabilities)
        try container.encodeIfPresent(deviceProtocols, forKey: .deviceProtocols)
        try container.encodeIfPresent(locales, forKey: .locales)
        try container.encodeIfPresent(entitlements, forKey: .entitlements)
    }
}

