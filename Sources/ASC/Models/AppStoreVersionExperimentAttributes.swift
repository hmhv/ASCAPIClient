//
// AppStoreVersionExperimentAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppStoreVersionExperimentAttributes: Codable, JSONEncodable, Hashable {

    public enum State: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var name: String?
    public var trafficProportion: Int?
    public var state: State?
    public var reviewRequired: Bool?
    public var startDate: Date?
    public var endDate: Date?

    public init(name: String? = nil, trafficProportion: Int? = nil, state: State? = nil, reviewRequired: Bool? = nil, startDate: Date? = nil, endDate: Date? = nil) {
        self.name = name
        self.trafficProportion = trafficProportion
        self.state = state
        self.reviewRequired = reviewRequired
        self.startDate = startDate
        self.endDate = endDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case trafficProportion
        case state
        case reviewRequired
        case startDate
        case endDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(trafficProportion, forKey: .trafficProportion)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(reviewRequired, forKey: .reviewRequired)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
    }
}

