//
// SubscriptionUpdateRequestDataAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SubscriptionUpdateRequestDataAttributes: Codable, JSONEncodable, Hashable {

    public enum SubscriptionPeriod: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case oneWeek = "ONE_WEEK"
        case oneMonth = "ONE_MONTH"
        case twoMonths = "TWO_MONTHS"
        case threeMonths = "THREE_MONTHS"
        case sixMonths = "SIX_MONTHS"
        case oneYear = "ONE_YEAR"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var name: String?
    public var familySharable: Bool?
    public var subscriptionPeriod: SubscriptionPeriod?
    public var reviewNote: String?
    public var groupLevel: Int?
    public var availableInAllTerritories: Bool?

    public init(name: String? = nil, familySharable: Bool? = nil, subscriptionPeriod: SubscriptionPeriod? = nil, reviewNote: String? = nil, groupLevel: Int? = nil, availableInAllTerritories: Bool? = nil) {
        self.name = name
        self.familySharable = familySharable
        self.subscriptionPeriod = subscriptionPeriod
        self.reviewNote = reviewNote
        self.groupLevel = groupLevel
        self.availableInAllTerritories = availableInAllTerritories
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case familySharable
        case subscriptionPeriod
        case reviewNote
        case groupLevel
        case availableInAllTerritories
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(familySharable, forKey: .familySharable)
        try container.encodeIfPresent(subscriptionPeriod, forKey: .subscriptionPeriod)
        try container.encodeIfPresent(reviewNote, forKey: .reviewNote)
        try container.encodeIfPresent(groupLevel, forKey: .groupLevel)
        try container.encodeIfPresent(availableInAllTerritories, forKey: .availableInAllTerritories)
    }
}

