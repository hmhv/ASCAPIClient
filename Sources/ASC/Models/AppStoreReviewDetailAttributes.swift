//
// AppStoreReviewDetailAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppStoreReviewDetailAttributes: Codable, JSONEncodable, Hashable {

    public var contactFirstName: String?
    public var contactLastName: String?
    public var contactPhone: String?
    public var contactEmail: String?
    public var demoAccountName: String?
    public var demoAccountPassword: String?
    public var demoAccountRequired: Bool?
    public var notes: String?

    public init(contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, contactEmail: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, demoAccountRequired: Bool? = nil, notes: String? = nil) {
        self.contactFirstName = contactFirstName
        self.contactLastName = contactLastName
        self.contactPhone = contactPhone
        self.contactEmail = contactEmail
        self.demoAccountName = demoAccountName
        self.demoAccountPassword = demoAccountPassword
        self.demoAccountRequired = demoAccountRequired
        self.notes = notes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contactFirstName
        case contactLastName
        case contactPhone
        case contactEmail
        case demoAccountName
        case demoAccountPassword
        case demoAccountRequired
        case notes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contactFirstName, forKey: .contactFirstName)
        try container.encodeIfPresent(contactLastName, forKey: .contactLastName)
        try container.encodeIfPresent(contactPhone, forKey: .contactPhone)
        try container.encodeIfPresent(contactEmail, forKey: .contactEmail)
        try container.encodeIfPresent(demoAccountName, forKey: .demoAccountName)
        try container.encodeIfPresent(demoAccountPassword, forKey: .demoAccountPassword)
        try container.encodeIfPresent(demoAccountRequired, forKey: .demoAccountRequired)
        try container.encodeIfPresent(notes, forKey: .notes)
    }
}

