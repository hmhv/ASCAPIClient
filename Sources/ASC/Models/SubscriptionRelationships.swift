//
// SubscriptionRelationships.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SubscriptionRelationships: Sendable, Codable, JSONEncodable, Hashable {

    public var subscriptionLocalizations: SubscriptionRelationshipsSubscriptionLocalizations?
    public var appStoreReviewScreenshot: SubscriptionRelationshipsAppStoreReviewScreenshot?
    public var group: SubscriptionGroupLocalizationRelationshipsSubscriptionGroup?
    public var introductoryOffers: SubscriptionRelationshipsIntroductoryOffers?
    public var promotionalOffers: SubscriptionRelationshipsPromotionalOffers?
    public var offerCodes: SubscriptionRelationshipsOfferCodes?
    public var prices: SubscriptionRelationshipsPrices?
    public var pricePoints: AnalyticsReportInstanceRelationshipsSegments?
    public var promotedPurchase: InAppPurchaseV2RelationshipsPromotedPurchase?
    public var subscriptionAvailability: SubscriptionRelationshipsSubscriptionAvailability?
    public var winBackOffers: SubscriptionRelationshipsWinBackOffers?
    public var images: SubscriptionRelationshipsImages?

    public init(subscriptionLocalizations: SubscriptionRelationshipsSubscriptionLocalizations? = nil, appStoreReviewScreenshot: SubscriptionRelationshipsAppStoreReviewScreenshot? = nil, group: SubscriptionGroupLocalizationRelationshipsSubscriptionGroup? = nil, introductoryOffers: SubscriptionRelationshipsIntroductoryOffers? = nil, promotionalOffers: SubscriptionRelationshipsPromotionalOffers? = nil, offerCodes: SubscriptionRelationshipsOfferCodes? = nil, prices: SubscriptionRelationshipsPrices? = nil, pricePoints: AnalyticsReportInstanceRelationshipsSegments? = nil, promotedPurchase: InAppPurchaseV2RelationshipsPromotedPurchase? = nil, subscriptionAvailability: SubscriptionRelationshipsSubscriptionAvailability? = nil, winBackOffers: SubscriptionRelationshipsWinBackOffers? = nil, images: SubscriptionRelationshipsImages? = nil) {
        self.subscriptionLocalizations = subscriptionLocalizations
        self.appStoreReviewScreenshot = appStoreReviewScreenshot
        self.group = group
        self.introductoryOffers = introductoryOffers
        self.promotionalOffers = promotionalOffers
        self.offerCodes = offerCodes
        self.prices = prices
        self.pricePoints = pricePoints
        self.promotedPurchase = promotedPurchase
        self.subscriptionAvailability = subscriptionAvailability
        self.winBackOffers = winBackOffers
        self.images = images
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case subscriptionLocalizations
        case appStoreReviewScreenshot
        case group
        case introductoryOffers
        case promotionalOffers
        case offerCodes
        case prices
        case pricePoints
        case promotedPurchase
        case subscriptionAvailability
        case winBackOffers
        case images
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(subscriptionLocalizations, forKey: .subscriptionLocalizations)
        try container.encodeIfPresent(appStoreReviewScreenshot, forKey: .appStoreReviewScreenshot)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(introductoryOffers, forKey: .introductoryOffers)
        try container.encodeIfPresent(promotionalOffers, forKey: .promotionalOffers)
        try container.encodeIfPresent(offerCodes, forKey: .offerCodes)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(pricePoints, forKey: .pricePoints)
        try container.encodeIfPresent(promotedPurchase, forKey: .promotedPurchase)
        try container.encodeIfPresent(subscriptionAvailability, forKey: .subscriptionAvailability)
        try container.encodeIfPresent(winBackOffers, forKey: .winBackOffers)
        try container.encodeIfPresent(images, forKey: .images)
    }
}

