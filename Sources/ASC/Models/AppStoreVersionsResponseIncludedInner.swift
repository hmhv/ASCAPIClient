//
// AppStoreVersionsResponseIncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum AppStoreVersionsResponseIncludedInner: Codable, JSONEncodable, Hashable {
    case typeAgeRatingDeclaration(AgeRatingDeclaration)
    case typeAlternativeDistributionPackage(AlternativeDistributionPackage)
    case typeApp(App)
    case typeAppClipDefaultExperience(AppClipDefaultExperience)
    case typeAppStoreReviewDetail(AppStoreReviewDetail)
    case typeAppStoreVersionExperiment(AppStoreVersionExperiment)
    case typeAppStoreVersionExperimentV2(AppStoreVersionExperimentV2)
    case typeAppStoreVersionLocalization(AppStoreVersionLocalization)
    case typeAppStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
    case typeAppStoreVersionSubmission(AppStoreVersionSubmission)
    case typeBuild(Build)
    case typeRoutingAppCoverage(RoutingAppCoverage)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAgeRatingDeclaration(let value):
            try container.encode(value)
        case .typeAlternativeDistributionPackage(let value):
            try container.encode(value)
        case .typeApp(let value):
            try container.encode(value)
        case .typeAppClipDefaultExperience(let value):
            try container.encode(value)
        case .typeAppStoreReviewDetail(let value):
            try container.encode(value)
        case .typeAppStoreVersionExperiment(let value):
            try container.encode(value)
        case .typeAppStoreVersionExperimentV2(let value):
            try container.encode(value)
        case .typeAppStoreVersionLocalization(let value):
            try container.encode(value)
        case .typeAppStoreVersionPhasedRelease(let value):
            try container.encode(value)
        case .typeAppStoreVersionSubmission(let value):
            try container.encode(value)
        case .typeBuild(let value):
            try container.encode(value)
        case .typeRoutingAppCoverage(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AgeRatingDeclaration.self) {
            self = .typeAgeRatingDeclaration(value)
        } else if let value = try? container.decode(AlternativeDistributionPackage.self) {
            self = .typeAlternativeDistributionPackage(value)
        } else if let value = try? container.decode(App.self) {
            self = .typeApp(value)
        } else if let value = try? container.decode(AppClipDefaultExperience.self) {
            self = .typeAppClipDefaultExperience(value)
        } else if let value = try? container.decode(AppStoreReviewDetail.self) {
            self = .typeAppStoreReviewDetail(value)
        } else if let value = try? container.decode(AppStoreVersionExperiment.self) {
            self = .typeAppStoreVersionExperiment(value)
        } else if let value = try? container.decode(AppStoreVersionExperimentV2.self) {
            self = .typeAppStoreVersionExperimentV2(value)
        } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
            self = .typeAppStoreVersionLocalization(value)
        } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
            self = .typeAppStoreVersionPhasedRelease(value)
        } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
            self = .typeAppStoreVersionSubmission(value)
        } else if let value = try? container.decode(Build.self) {
            self = .typeBuild(value)
        } else if let value = try? container.decode(RoutingAppCoverage.self) {
            self = .typeRoutingAppCoverage(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of AppStoreVersionsResponseIncludedInner"))
        }
    }
}

