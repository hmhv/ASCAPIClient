//
// BuildAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BuildAttributes: Codable, Hashable {

    public enum ProcessingState: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case processing = "PROCESSING"
        case failed = "FAILED"
        case invalid = "INVALID"
        case valid = "VALID"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var version: String?
    public var uploadedDate: Date?
    public var expirationDate: Date?
    public var expired: Bool?
    public var minOsVersion: String?
    public var lsMinimumSystemVersion: String?
    public var computedMinMacOsVersion: String?
    public var iconAssetToken: ImageAsset?
    public var processingState: ProcessingState?
    public var buildAudienceType: BuildAudienceType?
    public var usesNonExemptEncryption: Bool?

    public init(version: String? = nil, uploadedDate: Date? = nil, expirationDate: Date? = nil, expired: Bool? = nil, minOsVersion: String? = nil, lsMinimumSystemVersion: String? = nil, computedMinMacOsVersion: String? = nil, iconAssetToken: ImageAsset? = nil, processingState: ProcessingState? = nil, buildAudienceType: BuildAudienceType? = nil, usesNonExemptEncryption: Bool? = nil) {
        self.version = version
        self.uploadedDate = uploadedDate
        self.expirationDate = expirationDate
        self.expired = expired
        self.minOsVersion = minOsVersion
        self.lsMinimumSystemVersion = lsMinimumSystemVersion
        self.computedMinMacOsVersion = computedMinMacOsVersion
        self.iconAssetToken = iconAssetToken
        self.processingState = processingState
        self.buildAudienceType = buildAudienceType
        self.usesNonExemptEncryption = usesNonExemptEncryption
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case uploadedDate
        case expirationDate
        case expired
        case minOsVersion
        case lsMinimumSystemVersion
        case computedMinMacOsVersion
        case iconAssetToken
        case processingState
        case buildAudienceType
        case usesNonExemptEncryption
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(uploadedDate, forKey: .uploadedDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(expired, forKey: .expired)
        try container.encodeIfPresent(minOsVersion, forKey: .minOsVersion)
        try container.encodeIfPresent(lsMinimumSystemVersion, forKey: .lsMinimumSystemVersion)
        try container.encodeIfPresent(computedMinMacOsVersion, forKey: .computedMinMacOsVersion)
        try container.encodeIfPresent(iconAssetToken, forKey: .iconAssetToken)
        try container.encodeIfPresent(processingState, forKey: .processingState)
        try container.encodeIfPresent(buildAudienceType, forKey: .buildAudienceType)
        try container.encodeIfPresent(usesNonExemptEncryption, forKey: .usesNonExemptEncryption)
    }
}

