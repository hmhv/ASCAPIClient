//
// ScmPullRequestAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ScmPullRequestAttributes: Codable, JSONEncodable, Hashable {

    public var title: String?
    public var number: Int?
    public var webUrl: String?
    public var sourceRepositoryOwner: String?
    public var sourceRepositoryName: String?
    public var sourceBranchName: String?
    public var destinationRepositoryOwner: String?
    public var destinationRepositoryName: String?
    public var destinationBranchName: String?
    public var isClosed: Bool?
    public var isCrossRepository: Bool?

    public init(title: String? = nil, number: Int? = nil, webUrl: String? = nil, sourceRepositoryOwner: String? = nil, sourceRepositoryName: String? = nil, sourceBranchName: String? = nil, destinationRepositoryOwner: String? = nil, destinationRepositoryName: String? = nil, destinationBranchName: String? = nil, isClosed: Bool? = nil, isCrossRepository: Bool? = nil) {
        self.title = title
        self.number = number
        self.webUrl = webUrl
        self.sourceRepositoryOwner = sourceRepositoryOwner
        self.sourceRepositoryName = sourceRepositoryName
        self.sourceBranchName = sourceBranchName
        self.destinationRepositoryOwner = destinationRepositoryOwner
        self.destinationRepositoryName = destinationRepositoryName
        self.destinationBranchName = destinationBranchName
        self.isClosed = isClosed
        self.isCrossRepository = isCrossRepository
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case number
        case webUrl
        case sourceRepositoryOwner
        case sourceRepositoryName
        case sourceBranchName
        case destinationRepositoryOwner
        case destinationRepositoryName
        case destinationBranchName
        case isClosed
        case isCrossRepository
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(sourceRepositoryOwner, forKey: .sourceRepositoryOwner)
        try container.encodeIfPresent(sourceRepositoryName, forKey: .sourceRepositoryName)
        try container.encodeIfPresent(sourceBranchName, forKey: .sourceBranchName)
        try container.encodeIfPresent(destinationRepositoryOwner, forKey: .destinationRepositoryOwner)
        try container.encodeIfPresent(destinationRepositoryName, forKey: .destinationRepositoryName)
        try container.encodeIfPresent(destinationBranchName, forKey: .destinationBranchName)
        try container.encodeIfPresent(isClosed, forKey: .isClosed)
        try container.encodeIfPresent(isCrossRepository, forKey: .isCrossRepository)
    }
}

