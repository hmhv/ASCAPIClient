//
// ProfileAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ProfileAttributes: Sendable, Codable, JSONEncodable, Hashable {

    public enum ProfileType: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
        case iosAppStore = "IOS_APP_STORE"
        case iosAppAdhoc = "IOS_APP_ADHOC"
        case iosAppInhouse = "IOS_APP_INHOUSE"
        case macAppDevelopment = "MAC_APP_DEVELOPMENT"
        case macAppStore = "MAC_APP_STORE"
        case macAppDirect = "MAC_APP_DIRECT"
        case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
        case tvosAppStore = "TVOS_APP_STORE"
        case tvosAppAdhoc = "TVOS_APP_ADHOC"
        case tvosAppInhouse = "TVOS_APP_INHOUSE"
        case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
        case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
        case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum ProfileState: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case active = "ACTIVE"
        case invalid = "INVALID"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var name: String?
    public var platform: BundleIdPlatform?
    public var profileType: ProfileType?
    public var profileState: ProfileState?
    public var profileContent: String?
    public var uuid: String?
    public var createdDate: Date?
    public var expirationDate: Date?

    public init(name: String? = nil, platform: BundleIdPlatform? = nil, profileType: ProfileType? = nil, profileState: ProfileState? = nil, profileContent: String? = nil, uuid: String? = nil, createdDate: Date? = nil, expirationDate: Date? = nil) {
        self.name = name
        self.platform = platform
        self.profileType = profileType
        self.profileState = profileState
        self.profileContent = profileContent
        self.uuid = uuid
        self.createdDate = createdDate
        self.expirationDate = expirationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case platform
        case profileType
        case profileState
        case profileContent
        case uuid
        case createdDate
        case expirationDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(profileType, forKey: .profileType)
        try container.encodeIfPresent(profileState, forKey: .profileState)
        try container.encodeIfPresent(profileContent, forKey: .profileContent)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
    }
}

