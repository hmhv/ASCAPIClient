//
// BetaGroupUpdateRequestDataAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BetaGroupUpdateRequestDataAttributes: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var publicLinkEnabled: Bool?
    public var publicLinkLimitEnabled: Bool?
    public var publicLinkLimit: Int?
    public var feedbackEnabled: Bool?
    public var iosBuildsAvailableForAppleSiliconMac: Bool?

    public init(name: String? = nil, publicLinkEnabled: Bool? = nil, publicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, feedbackEnabled: Bool? = nil, iosBuildsAvailableForAppleSiliconMac: Bool? = nil) {
        self.name = name
        self.publicLinkEnabled = publicLinkEnabled
        self.publicLinkLimitEnabled = publicLinkLimitEnabled
        self.publicLinkLimit = publicLinkLimit
        self.feedbackEnabled = feedbackEnabled
        self.iosBuildsAvailableForAppleSiliconMac = iosBuildsAvailableForAppleSiliconMac
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case publicLinkEnabled
        case publicLinkLimitEnabled
        case publicLinkLimit
        case feedbackEnabled
        case iosBuildsAvailableForAppleSiliconMac
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(publicLinkEnabled, forKey: .publicLinkEnabled)
        try container.encodeIfPresent(publicLinkLimitEnabled, forKey: .publicLinkLimitEnabled)
        try container.encodeIfPresent(publicLinkLimit, forKey: .publicLinkLimit)
        try container.encodeIfPresent(feedbackEnabled, forKey: .feedbackEnabled)
        try container.encodeIfPresent(iosBuildsAvailableForAppleSiliconMac, forKey: .iosBuildsAvailableForAppleSiliconMac)
    }
}

