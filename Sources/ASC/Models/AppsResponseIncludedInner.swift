//
// AppsResponseIncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum AppsResponseIncludedInner: Codable, JSONEncodable, Hashable {
    case typeAppClip(AppClip)
    case typeAppCustomProductPage(AppCustomProductPage)
    case typeAppEncryptionDeclaration(AppEncryptionDeclaration)
    case typeAppEvent(AppEvent)
    case typeAppInfo(AppInfo)
    case typeAppPreOrder(AppPreOrder)
    case typeAppPrice(AppPrice)
    case typeAppStoreVersion(AppStoreVersion)
    case typeAppStoreVersionExperimentV2(AppStoreVersionExperimentV2)
    case typeBetaAppLocalization(BetaAppLocalization)
    case typeBetaAppReviewDetail(BetaAppReviewDetail)
    case typeBetaGroup(BetaGroup)
    case typeBetaLicenseAgreement(BetaLicenseAgreement)
    case typeBuild(Build)
    case typeCiProduct(CiProduct)
    case typeEndUserLicenseAgreement(EndUserLicenseAgreement)
    case typeGameCenterDetail(GameCenterDetail)
    case typeGameCenterEnabledVersion(GameCenterEnabledVersion)
    case typeInAppPurchase(InAppPurchase)
    case typeInAppPurchaseV2(InAppPurchaseV2)
    case typePrereleaseVersion(PrereleaseVersion)
    case typePromotedPurchase(PromotedPurchase)
    case typeReviewSubmission(ReviewSubmission)
    case typeSubscriptionGracePeriod(SubscriptionGracePeriod)
    case typeSubscriptionGroup(SubscriptionGroup)
    case typeTerritory(Territory)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAppClip(let value):
            try container.encode(value)
        case .typeAppCustomProductPage(let value):
            try container.encode(value)
        case .typeAppEncryptionDeclaration(let value):
            try container.encode(value)
        case .typeAppEvent(let value):
            try container.encode(value)
        case .typeAppInfo(let value):
            try container.encode(value)
        case .typeAppPreOrder(let value):
            try container.encode(value)
        case .typeAppPrice(let value):
            try container.encode(value)
        case .typeAppStoreVersion(let value):
            try container.encode(value)
        case .typeAppStoreVersionExperimentV2(let value):
            try container.encode(value)
        case .typeBetaAppLocalization(let value):
            try container.encode(value)
        case .typeBetaAppReviewDetail(let value):
            try container.encode(value)
        case .typeBetaGroup(let value):
            try container.encode(value)
        case .typeBetaLicenseAgreement(let value):
            try container.encode(value)
        case .typeBuild(let value):
            try container.encode(value)
        case .typeCiProduct(let value):
            try container.encode(value)
        case .typeEndUserLicenseAgreement(let value):
            try container.encode(value)
        case .typeGameCenterDetail(let value):
            try container.encode(value)
        case .typeGameCenterEnabledVersion(let value):
            try container.encode(value)
        case .typeInAppPurchase(let value):
            try container.encode(value)
        case .typeInAppPurchaseV2(let value):
            try container.encode(value)
        case .typePrereleaseVersion(let value):
            try container.encode(value)
        case .typePromotedPurchase(let value):
            try container.encode(value)
        case .typeReviewSubmission(let value):
            try container.encode(value)
        case .typeSubscriptionGracePeriod(let value):
            try container.encode(value)
        case .typeSubscriptionGroup(let value):
            try container.encode(value)
        case .typeTerritory(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AppClip.self) {
            self = .typeAppClip(value)
        } else if let value = try? container.decode(AppCustomProductPage.self) {
            self = .typeAppCustomProductPage(value)
        } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
            self = .typeAppEncryptionDeclaration(value)
        } else if let value = try? container.decode(AppEvent.self) {
            self = .typeAppEvent(value)
        } else if let value = try? container.decode(AppInfo.self) {
            self = .typeAppInfo(value)
        } else if let value = try? container.decode(AppPreOrder.self) {
            self = .typeAppPreOrder(value)
        } else if let value = try? container.decode(AppPrice.self) {
            self = .typeAppPrice(value)
        } else if let value = try? container.decode(AppStoreVersion.self) {
            self = .typeAppStoreVersion(value)
        } else if let value = try? container.decode(AppStoreVersionExperimentV2.self) {
            self = .typeAppStoreVersionExperimentV2(value)
        } else if let value = try? container.decode(BetaAppLocalization.self) {
            self = .typeBetaAppLocalization(value)
        } else if let value = try? container.decode(BetaAppReviewDetail.self) {
            self = .typeBetaAppReviewDetail(value)
        } else if let value = try? container.decode(BetaGroup.self) {
            self = .typeBetaGroup(value)
        } else if let value = try? container.decode(BetaLicenseAgreement.self) {
            self = .typeBetaLicenseAgreement(value)
        } else if let value = try? container.decode(Build.self) {
            self = .typeBuild(value)
        } else if let value = try? container.decode(CiProduct.self) {
            self = .typeCiProduct(value)
        } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
            self = .typeEndUserLicenseAgreement(value)
        } else if let value = try? container.decode(GameCenterDetail.self) {
            self = .typeGameCenterDetail(value)
        } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
            self = .typeGameCenterEnabledVersion(value)
        } else if let value = try? container.decode(InAppPurchase.self) {
            self = .typeInAppPurchase(value)
        } else if let value = try? container.decode(InAppPurchaseV2.self) {
            self = .typeInAppPurchaseV2(value)
        } else if let value = try? container.decode(PrereleaseVersion.self) {
            self = .typePrereleaseVersion(value)
        } else if let value = try? container.decode(PromotedPurchase.self) {
            self = .typePromotedPurchase(value)
        } else if let value = try? container.decode(ReviewSubmission.self) {
            self = .typeReviewSubmission(value)
        } else if let value = try? container.decode(SubscriptionGracePeriod.self) {
            self = .typeSubscriptionGracePeriod(value)
        } else if let value = try? container.decode(SubscriptionGroup.self) {
            self = .typeSubscriptionGroup(value)
        } else if let value = try? container.decode(Territory.self) {
            self = .typeTerritory(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of AppsResponseIncludedInner"))
        }
    }
}

