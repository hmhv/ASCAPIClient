//
// AppStoreVersionRelationships.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppStoreVersionRelationships: Codable, JSONEncodable, Hashable {

    public var app: AppAvailabilityRelationshipsApp?
    @available(*, deprecated, message: "This property is deprecated.")
    public var ageRatingDeclaration: AppStoreVersionRelationshipsAgeRatingDeclaration?
    public var appStoreVersionLocalizations: AppStoreVersionRelationshipsAppStoreVersionLocalizations?
    public var build: AppStoreVersionRelationshipsBuild?
    public var appStoreVersionPhasedRelease: AppStoreVersionRelationshipsAppStoreVersionPhasedRelease?
    public var routingAppCoverage: AppStoreVersionRelationshipsRoutingAppCoverage?
    public var appStoreReviewDetail: AppStoreReviewAttachmentRelationshipsAppStoreReviewDetail?
    public var appStoreVersionSubmission: AppStoreVersionRelationshipsAppStoreVersionSubmission?
    public var appClipDefaultExperience: AppClipAppStoreReviewDetailRelationshipsAppClipDefaultExperience?
    public var appStoreVersionExperiments: AppStoreVersionRelationshipsAppStoreVersionExperiments?
    public var appStoreVersionExperimentsV2: AppStoreVersionRelationshipsAppStoreVersionExperiments?
    public var alternativeDistributionPackage: AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage?

    public init(app: AppAvailabilityRelationshipsApp? = nil, ageRatingDeclaration: AppStoreVersionRelationshipsAgeRatingDeclaration? = nil, appStoreVersionLocalizations: AppStoreVersionRelationshipsAppStoreVersionLocalizations? = nil, build: AppStoreVersionRelationshipsBuild? = nil, appStoreVersionPhasedRelease: AppStoreVersionRelationshipsAppStoreVersionPhasedRelease? = nil, routingAppCoverage: AppStoreVersionRelationshipsRoutingAppCoverage? = nil, appStoreReviewDetail: AppStoreReviewAttachmentRelationshipsAppStoreReviewDetail? = nil, appStoreVersionSubmission: AppStoreVersionRelationshipsAppStoreVersionSubmission? = nil, appClipDefaultExperience: AppClipAppStoreReviewDetailRelationshipsAppClipDefaultExperience? = nil, appStoreVersionExperiments: AppStoreVersionRelationshipsAppStoreVersionExperiments? = nil, appStoreVersionExperimentsV2: AppStoreVersionRelationshipsAppStoreVersionExperiments? = nil, alternativeDistributionPackage: AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage? = nil) {
        self.app = app
        self.ageRatingDeclaration = ageRatingDeclaration
        self.appStoreVersionLocalizations = appStoreVersionLocalizations
        self.build = build
        self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
        self.routingAppCoverage = routingAppCoverage
        self.appStoreReviewDetail = appStoreReviewDetail
        self.appStoreVersionSubmission = appStoreVersionSubmission
        self.appClipDefaultExperience = appClipDefaultExperience
        self.appStoreVersionExperiments = appStoreVersionExperiments
        self.appStoreVersionExperimentsV2 = appStoreVersionExperimentsV2
        self.alternativeDistributionPackage = alternativeDistributionPackage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case app
        case ageRatingDeclaration
        case appStoreVersionLocalizations
        case build
        case appStoreVersionPhasedRelease
        case routingAppCoverage
        case appStoreReviewDetail
        case appStoreVersionSubmission
        case appClipDefaultExperience
        case appStoreVersionExperiments
        case appStoreVersionExperimentsV2
        case alternativeDistributionPackage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(app, forKey: .app)
        try container.encodeIfPresent(ageRatingDeclaration, forKey: .ageRatingDeclaration)
        try container.encodeIfPresent(appStoreVersionLocalizations, forKey: .appStoreVersionLocalizations)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(appStoreVersionPhasedRelease, forKey: .appStoreVersionPhasedRelease)
        try container.encodeIfPresent(routingAppCoverage, forKey: .routingAppCoverage)
        try container.encodeIfPresent(appStoreReviewDetail, forKey: .appStoreReviewDetail)
        try container.encodeIfPresent(appStoreVersionSubmission, forKey: .appStoreVersionSubmission)
        try container.encodeIfPresent(appClipDefaultExperience, forKey: .appClipDefaultExperience)
        try container.encodeIfPresent(appStoreVersionExperiments, forKey: .appStoreVersionExperiments)
        try container.encodeIfPresent(appStoreVersionExperimentsV2, forKey: .appStoreVersionExperimentsV2)
        try container.encodeIfPresent(alternativeDistributionPackage, forKey: .alternativeDistributionPackage)
    }
}

