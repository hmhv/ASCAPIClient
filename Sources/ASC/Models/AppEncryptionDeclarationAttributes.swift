//
// AppEncryptionDeclarationAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppEncryptionDeclarationAttributes: Codable, JSONEncodable, Hashable {

    public var appDescription: String?
    public var createdDate: Date?
    @available(*, deprecated, message: "This property is deprecated.")
    public var usesEncryption: Bool?
    public var exempt: Bool?
    public var containsProprietaryCryptography: Bool?
    public var containsThirdPartyCryptography: Bool?
    public var availableOnFrenchStore: Bool?
    public var platform: Platform?
    @available(*, deprecated, message: "This property is deprecated.")
    public var uploadedDate: Date?
    @available(*, deprecated, message: "This property is deprecated.")
    public var documentUrl: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var documentName: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var documentType: String?
    public var appEncryptionDeclarationState: AppEncryptionDeclarationState?
    public var codeValue: String?

    public init(appDescription: String? = nil, createdDate: Date? = nil, usesEncryption: Bool? = nil, exempt: Bool? = nil, containsProprietaryCryptography: Bool? = nil, containsThirdPartyCryptography: Bool? = nil, availableOnFrenchStore: Bool? = nil, platform: Platform? = nil, uploadedDate: Date? = nil, documentUrl: String? = nil, documentName: String? = nil, documentType: String? = nil, appEncryptionDeclarationState: AppEncryptionDeclarationState? = nil, codeValue: String? = nil) {
        self.appDescription = appDescription
        self.createdDate = createdDate
        self.usesEncryption = usesEncryption
        self.exempt = exempt
        self.containsProprietaryCryptography = containsProprietaryCryptography
        self.containsThirdPartyCryptography = containsThirdPartyCryptography
        self.availableOnFrenchStore = availableOnFrenchStore
        self.platform = platform
        self.uploadedDate = uploadedDate
        self.documentUrl = documentUrl
        self.documentName = documentName
        self.documentType = documentType
        self.appEncryptionDeclarationState = appEncryptionDeclarationState
        self.codeValue = codeValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appDescription
        case createdDate
        case usesEncryption
        case exempt
        case containsProprietaryCryptography
        case containsThirdPartyCryptography
        case availableOnFrenchStore
        case platform
        case uploadedDate
        case documentUrl
        case documentName
        case documentType
        case appEncryptionDeclarationState
        case codeValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appDescription, forKey: .appDescription)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(usesEncryption, forKey: .usesEncryption)
        try container.encodeIfPresent(exempt, forKey: .exempt)
        try container.encodeIfPresent(containsProprietaryCryptography, forKey: .containsProprietaryCryptography)
        try container.encodeIfPresent(containsThirdPartyCryptography, forKey: .containsThirdPartyCryptography)
        try container.encodeIfPresent(availableOnFrenchStore, forKey: .availableOnFrenchStore)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(uploadedDate, forKey: .uploadedDate)
        try container.encodeIfPresent(documentUrl, forKey: .documentUrl)
        try container.encodeIfPresent(documentName, forKey: .documentName)
        try container.encodeIfPresent(documentType, forKey: .documentType)
        try container.encodeIfPresent(appEncryptionDeclarationState, forKey: .appEncryptionDeclarationState)
        try container.encodeIfPresent(codeValue, forKey: .codeValue)
    }
}

