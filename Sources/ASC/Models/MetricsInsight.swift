//
// MetricsInsight.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetricsInsight: Codable, JSONEncodable, Hashable {

    public var metricCategory: MetricCategory?
    public var latestVersion: String?
    public var metric: String?
    public var summaryString: String?
    public var referenceVersions: String?
    public var maxLatestVersionValue: Double?
    public var subSystemLabel: String?
    public var highImpact: Bool?
    public var populations: [MetricsInsightPopulationsInner]?

    public init(metricCategory: MetricCategory? = nil, latestVersion: String? = nil, metric: String? = nil, summaryString: String? = nil, referenceVersions: String? = nil, maxLatestVersionValue: Double? = nil, subSystemLabel: String? = nil, highImpact: Bool? = nil, populations: [MetricsInsightPopulationsInner]? = nil) {
        self.metricCategory = metricCategory
        self.latestVersion = latestVersion
        self.metric = metric
        self.summaryString = summaryString
        self.referenceVersions = referenceVersions
        self.maxLatestVersionValue = maxLatestVersionValue
        self.subSystemLabel = subSystemLabel
        self.highImpact = highImpact
        self.populations = populations
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case metricCategory
        case latestVersion
        case metric
        case summaryString
        case referenceVersions
        case maxLatestVersionValue
        case subSystemLabel
        case highImpact
        case populations
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(metricCategory, forKey: .metricCategory)
        try container.encodeIfPresent(latestVersion, forKey: .latestVersion)
        try container.encodeIfPresent(metric, forKey: .metric)
        try container.encodeIfPresent(summaryString, forKey: .summaryString)
        try container.encodeIfPresent(referenceVersions, forKey: .referenceVersions)
        try container.encodeIfPresent(maxLatestVersionValue, forKey: .maxLatestVersionValue)
        try container.encodeIfPresent(subSystemLabel, forKey: .subSystemLabel)
        try container.encodeIfPresent(highImpact, forKey: .highImpact)
        try container.encodeIfPresent(populations, forKey: .populations)
    }
}

