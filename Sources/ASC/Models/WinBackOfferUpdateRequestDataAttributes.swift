//
// WinBackOfferUpdateRequestDataAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct WinBackOfferUpdateRequestDataAttributes: Sendable, Codable, JSONEncodable, Hashable {

    public enum Priority: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case high = "HIGH"
        case normal = "NORMAL"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum PromotionIntent: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case notPromoted = "NOT_PROMOTED"
        case useAutoGeneratedAssets = "USE_AUTO_GENERATED_ASSETS"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var customerEligibilityPaidSubscriptionDurationInMonths: Int?
    public var customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange?
    public var customerEligibilityWaitBetweenOffersInMonths: Int?
    public var startDate: Date?
    public var endDate: Date?
    public var priority: Priority?
    public var promotionIntent: PromotionIntent?

    public init(customerEligibilityPaidSubscriptionDurationInMonths: Int? = nil, customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange? = nil, customerEligibilityWaitBetweenOffersInMonths: Int? = nil, startDate: Date? = nil, endDate: Date? = nil, priority: Priority? = nil, promotionIntent: PromotionIntent? = nil) {
        self.customerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths
        self.customerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths
        self.customerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths
        self.startDate = startDate
        self.endDate = endDate
        self.priority = priority
        self.promotionIntent = promotionIntent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customerEligibilityPaidSubscriptionDurationInMonths
        case customerEligibilityTimeSinceLastSubscribedInMonths
        case customerEligibilityWaitBetweenOffersInMonths
        case startDate
        case endDate
        case priority
        case promotionIntent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(customerEligibilityPaidSubscriptionDurationInMonths, forKey: .customerEligibilityPaidSubscriptionDurationInMonths)
        try container.encodeIfPresent(customerEligibilityTimeSinceLastSubscribedInMonths, forKey: .customerEligibilityTimeSinceLastSubscribedInMonths)
        try container.encodeIfPresent(customerEligibilityWaitBetweenOffersInMonths, forKey: .customerEligibilityWaitBetweenOffersInMonths)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(promotionIntent, forKey: .promotionIntent)
    }
}

