//
// GameCenterDetailsResponseIncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum GameCenterDetailsResponseIncludedInner: Codable, JSONEncodable, Hashable {
    case typeApp(App)
    case typeGameCenterAchievement(GameCenterAchievement)
    case typeGameCenterAchievementRelease(GameCenterAchievementRelease)
    case typeGameCenterAppVersion(GameCenterAppVersion)
    case typeGameCenterGroup(GameCenterGroup)
    case typeGameCenterLeaderboard(GameCenterLeaderboard)
    case typeGameCenterLeaderboardRelease(GameCenterLeaderboardRelease)
    case typeGameCenterLeaderboardSet(GameCenterLeaderboardSet)
    case typeGameCenterLeaderboardSetRelease(GameCenterLeaderboardSetRelease)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeApp(let value):
            try container.encode(value)
        case .typeGameCenterAchievement(let value):
            try container.encode(value)
        case .typeGameCenterAchievementRelease(let value):
            try container.encode(value)
        case .typeGameCenterAppVersion(let value):
            try container.encode(value)
        case .typeGameCenterGroup(let value):
            try container.encode(value)
        case .typeGameCenterLeaderboard(let value):
            try container.encode(value)
        case .typeGameCenterLeaderboardRelease(let value):
            try container.encode(value)
        case .typeGameCenterLeaderboardSet(let value):
            try container.encode(value)
        case .typeGameCenterLeaderboardSetRelease(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(App.self) {
            self = .typeApp(value)
        } else if let value = try? container.decode(GameCenterAchievement.self) {
            self = .typeGameCenterAchievement(value)
        } else if let value = try? container.decode(GameCenterAchievementRelease.self) {
            self = .typeGameCenterAchievementRelease(value)
        } else if let value = try? container.decode(GameCenterAppVersion.self) {
            self = .typeGameCenterAppVersion(value)
        } else if let value = try? container.decode(GameCenterGroup.self) {
            self = .typeGameCenterGroup(value)
        } else if let value = try? container.decode(GameCenterLeaderboard.self) {
            self = .typeGameCenterLeaderboard(value)
        } else if let value = try? container.decode(GameCenterLeaderboardRelease.self) {
            self = .typeGameCenterLeaderboardRelease(value)
        } else if let value = try? container.decode(GameCenterLeaderboardSet.self) {
            self = .typeGameCenterLeaderboardSet(value)
        } else if let value = try? container.decode(GameCenterLeaderboardSetRelease.self) {
            self = .typeGameCenterLeaderboardSetRelease(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of GameCenterDetailsResponseIncludedInner"))
        }
    }
}

