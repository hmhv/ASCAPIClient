//
// XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInner: Codable, JSONEncodable, Hashable {

    public var identifier: String?
    public var goalKeys: [XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerGoalKeysInner]?
    public var unit: XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerUnit?
    public var datasets: [XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInner]?

    public init(identifier: String? = nil, goalKeys: [XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerGoalKeysInner]? = nil, unit: XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerUnit? = nil, datasets: [XcodeMetricsProductDataInnerMetricCategoriesInnerMetricsInnerDatasetsInner]? = nil) {
        self.identifier = identifier
        self.goalKeys = goalKeys
        self.unit = unit
        self.datasets = datasets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case identifier
        case goalKeys
        case unit
        case datasets
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(identifier, forKey: .identifier)
        try container.encodeIfPresent(goalKeys, forKey: .goalKeys)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(datasets, forKey: .datasets)
    }
}

