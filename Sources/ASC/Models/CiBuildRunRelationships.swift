//
// CiBuildRunRelationships.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CiBuildRunRelationships: Sendable, Codable, JSONEncodable, Hashable {

    public var builds: AppRelationshipsBuilds?
    public var workflow: CiBuildRunRelationshipsWorkflow?
    public var product: CiBuildRunRelationshipsProduct?
    public var sourceBranchOrTag: CiBuildRunRelationshipsSourceBranchOrTag?
    public var destinationBranch: CiBuildRunRelationshipsSourceBranchOrTag?
    public var actions: AnalyticsReportInstanceRelationshipsSegments?
    public var pullRequest: CiBuildRunRelationshipsPullRequest?

    public init(builds: AppRelationshipsBuilds? = nil, workflow: CiBuildRunRelationshipsWorkflow? = nil, product: CiBuildRunRelationshipsProduct? = nil, sourceBranchOrTag: CiBuildRunRelationshipsSourceBranchOrTag? = nil, destinationBranch: CiBuildRunRelationshipsSourceBranchOrTag? = nil, actions: AnalyticsReportInstanceRelationshipsSegments? = nil, pullRequest: CiBuildRunRelationshipsPullRequest? = nil) {
        self.builds = builds
        self.workflow = workflow
        self.product = product
        self.sourceBranchOrTag = sourceBranchOrTag
        self.destinationBranch = destinationBranch
        self.actions = actions
        self.pullRequest = pullRequest
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case builds
        case workflow
        case product
        case sourceBranchOrTag
        case destinationBranch
        case actions
        case pullRequest
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(builds, forKey: .builds)
        try container.encodeIfPresent(workflow, forKey: .workflow)
        try container.encodeIfPresent(product, forKey: .product)
        try container.encodeIfPresent(sourceBranchOrTag, forKey: .sourceBranchOrTag)
        try container.encodeIfPresent(destinationBranch, forKey: .destinationBranch)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(pullRequest, forKey: .pullRequest)
    }
}

