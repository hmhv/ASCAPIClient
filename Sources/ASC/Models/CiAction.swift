//
// CiAction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CiAction: Sendable, Codable, JSONEncodable, Hashable {

    public enum Destination: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case anyIosDevice = "ANY_IOS_DEVICE"
        case anyIosSimulator = "ANY_IOS_SIMULATOR"
        case anyTvosDevice = "ANY_TVOS_DEVICE"
        case anyTvosSimulator = "ANY_TVOS_SIMULATOR"
        case anyWatchosDevice = "ANY_WATCHOS_DEVICE"
        case anyWatchosSimulator = "ANY_WATCHOS_SIMULATOR"
        case anyMac = "ANY_MAC"
        case anyMacCatalyst = "ANY_MAC_CATALYST"
        case anyVisionosDevice = "ANY_VISIONOS_DEVICE"
        case anyVisionosSimulator = "ANY_VISIONOS_SIMULATOR"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum Platform: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case macos = "MACOS"
        case ios = "IOS"
        case tvos = "TVOS"
        case watchos = "WATCHOS"
        case visionos = "VISIONOS"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var name: String?
    public var actionType: CiActionType?
    public var destination: Destination?
    public var buildDistributionAudience: BuildAudienceType?
    public var testConfiguration: CiActionTestConfiguration?
    public var scheme: String?
    public var platform: Platform?
    public var isRequiredToPass: Bool?

    public init(name: String? = nil, actionType: CiActionType? = nil, destination: Destination? = nil, buildDistributionAudience: BuildAudienceType? = nil, testConfiguration: CiActionTestConfiguration? = nil, scheme: String? = nil, platform: Platform? = nil, isRequiredToPass: Bool? = nil) {
        self.name = name
        self.actionType = actionType
        self.destination = destination
        self.buildDistributionAudience = buildDistributionAudience
        self.testConfiguration = testConfiguration
        self.scheme = scheme
        self.platform = platform
        self.isRequiredToPass = isRequiredToPass
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case actionType
        case destination
        case buildDistributionAudience
        case testConfiguration
        case scheme
        case platform
        case isRequiredToPass
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(actionType, forKey: .actionType)
        try container.encodeIfPresent(destination, forKey: .destination)
        try container.encodeIfPresent(buildDistributionAudience, forKey: .buildDistributionAudience)
        try container.encodeIfPresent(testConfiguration, forKey: .testConfiguration)
        try container.encodeIfPresent(scheme, forKey: .scheme)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(isRequiredToPass, forKey: .isRequiredToPass)
    }
}

