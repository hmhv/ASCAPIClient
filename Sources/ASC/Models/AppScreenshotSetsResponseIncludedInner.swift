//
// AppScreenshotSetsResponseIncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum AppScreenshotSetsResponseIncludedInner: Codable, JSONEncodable, Hashable {
    case typeAppCustomProductPageLocalization(AppCustomProductPageLocalization)
    case typeAppScreenshot(AppScreenshot)
    case typeAppStoreVersionExperimentTreatmentLocalization(AppStoreVersionExperimentTreatmentLocalization)
    case typeAppStoreVersionLocalization(AppStoreVersionLocalization)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAppCustomProductPageLocalization(let value):
            try container.encode(value)
        case .typeAppScreenshot(let value):
            try container.encode(value)
        case .typeAppStoreVersionExperimentTreatmentLocalization(let value):
            try container.encode(value)
        case .typeAppStoreVersionLocalization(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AppCustomProductPageLocalization.self) {
            self = .typeAppCustomProductPageLocalization(value)
        } else if let value = try? container.decode(AppScreenshot.self) {
            self = .typeAppScreenshot(value)
        } else if let value = try? container.decode(AppStoreVersionExperimentTreatmentLocalization.self) {
            self = .typeAppStoreVersionExperimentTreatmentLocalization(value)
        } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
            self = .typeAppStoreVersionLocalization(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of AppScreenshotSetsResponseIncludedInner"))
        }
    }
}

