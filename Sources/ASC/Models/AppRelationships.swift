//
// AppRelationships.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppRelationships: Codable, Hashable {

    public var ciProduct: AppRelationshipsCiProduct?
    public var betaGroups: AppRelationshipsBetaGroups?
    public var appStoreVersions: AppRelationshipsAppStoreVersions?
    public var preReleaseVersions: AppRelationshipsPreReleaseVersions?
    public var betaAppLocalizations: AppRelationshipsBetaAppLocalizations?
    public var builds: AppRelationshipsBuilds?
    public var betaLicenseAgreement: AppRelationshipsBetaLicenseAgreement?
    public var betaAppReviewDetail: AppRelationshipsBetaAppReviewDetail?
    public var appInfos: AppRelationshipsAppInfos?
    public var appClips: AppRelationshipsAppClips?
    public var endUserLicenseAgreement: AppRelationshipsEndUserLicenseAgreement?
    public var preOrder: AppRelationshipsPreOrder?
    public var prices: AppRelationshipsPrices?
    public var availableTerritories: AppRelationshipsAvailableTerritories?
    public var inAppPurchases: AppRelationshipsInAppPurchases?
    public var gameCenterEnabledVersions: AppRelationshipsGameCenterEnabledVersions?
    public var appCustomProductPages: AppRelationshipsAppCustomProductPages?
    public var appEvents: AppRelationshipsAppEvents?
    public var reviewSubmissions: AppRelationshipsReviewSubmissions?

    public init(ciProduct: AppRelationshipsCiProduct? = nil, betaGroups: AppRelationshipsBetaGroups? = nil, appStoreVersions: AppRelationshipsAppStoreVersions? = nil, preReleaseVersions: AppRelationshipsPreReleaseVersions? = nil, betaAppLocalizations: AppRelationshipsBetaAppLocalizations? = nil, builds: AppRelationshipsBuilds? = nil, betaLicenseAgreement: AppRelationshipsBetaLicenseAgreement? = nil, betaAppReviewDetail: AppRelationshipsBetaAppReviewDetail? = nil, appInfos: AppRelationshipsAppInfos? = nil, appClips: AppRelationshipsAppClips? = nil, endUserLicenseAgreement: AppRelationshipsEndUserLicenseAgreement? = nil, preOrder: AppRelationshipsPreOrder? = nil, prices: AppRelationshipsPrices? = nil, availableTerritories: AppRelationshipsAvailableTerritories? = nil, inAppPurchases: AppRelationshipsInAppPurchases? = nil, gameCenterEnabledVersions: AppRelationshipsGameCenterEnabledVersions? = nil, appCustomProductPages: AppRelationshipsAppCustomProductPages? = nil, appEvents: AppRelationshipsAppEvents? = nil, reviewSubmissions: AppRelationshipsReviewSubmissions? = nil) {
        self.ciProduct = ciProduct
        self.betaGroups = betaGroups
        self.appStoreVersions = appStoreVersions
        self.preReleaseVersions = preReleaseVersions
        self.betaAppLocalizations = betaAppLocalizations
        self.builds = builds
        self.betaLicenseAgreement = betaLicenseAgreement
        self.betaAppReviewDetail = betaAppReviewDetail
        self.appInfos = appInfos
        self.appClips = appClips
        self.endUserLicenseAgreement = endUserLicenseAgreement
        self.preOrder = preOrder
        self.prices = prices
        self.availableTerritories = availableTerritories
        self.inAppPurchases = inAppPurchases
        self.gameCenterEnabledVersions = gameCenterEnabledVersions
        self.appCustomProductPages = appCustomProductPages
        self.appEvents = appEvents
        self.reviewSubmissions = reviewSubmissions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ciProduct
        case betaGroups
        case appStoreVersions
        case preReleaseVersions
        case betaAppLocalizations
        case builds
        case betaLicenseAgreement
        case betaAppReviewDetail
        case appInfos
        case appClips
        case endUserLicenseAgreement
        case preOrder
        case prices
        case availableTerritories
        case inAppPurchases
        case gameCenterEnabledVersions
        case appCustomProductPages
        case appEvents
        case reviewSubmissions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ciProduct, forKey: .ciProduct)
        try container.encodeIfPresent(betaGroups, forKey: .betaGroups)
        try container.encodeIfPresent(appStoreVersions, forKey: .appStoreVersions)
        try container.encodeIfPresent(preReleaseVersions, forKey: .preReleaseVersions)
        try container.encodeIfPresent(betaAppLocalizations, forKey: .betaAppLocalizations)
        try container.encodeIfPresent(builds, forKey: .builds)
        try container.encodeIfPresent(betaLicenseAgreement, forKey: .betaLicenseAgreement)
        try container.encodeIfPresent(betaAppReviewDetail, forKey: .betaAppReviewDetail)
        try container.encodeIfPresent(appInfos, forKey: .appInfos)
        try container.encodeIfPresent(appClips, forKey: .appClips)
        try container.encodeIfPresent(endUserLicenseAgreement, forKey: .endUserLicenseAgreement)
        try container.encodeIfPresent(preOrder, forKey: .preOrder)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(availableTerritories, forKey: .availableTerritories)
        try container.encodeIfPresent(inAppPurchases, forKey: .inAppPurchases)
        try container.encodeIfPresent(gameCenterEnabledVersions, forKey: .gameCenterEnabledVersions)
        try container.encodeIfPresent(appCustomProductPages, forKey: .appCustomProductPages)
        try container.encodeIfPresent(appEvents, forKey: .appEvents)
        try container.encodeIfPresent(reviewSubmissions, forKey: .reviewSubmissions)
    }
}

