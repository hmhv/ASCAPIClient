//
// AppEventVideoClipAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppEventVideoClipAttributes: Codable, JSONEncodable, Hashable {

    public var fileSize: Int?
    public var fileName: String?
    public var previewFrameTimeCode: String?
    public var videoUrl: String?
    public var previewImage: ImageAsset?
    public var uploadOperations: [UploadOperation]?
    public var assetDeliveryState: AppMediaAssetState?
    public var appEventAssetType: AppEventAssetType?

    public init(fileSize: Int? = nil, fileName: String? = nil, previewFrameTimeCode: String? = nil, videoUrl: String? = nil, previewImage: ImageAsset? = nil, uploadOperations: [UploadOperation]? = nil, assetDeliveryState: AppMediaAssetState? = nil, appEventAssetType: AppEventAssetType? = nil) {
        self.fileSize = fileSize
        self.fileName = fileName
        self.previewFrameTimeCode = previewFrameTimeCode
        self.videoUrl = videoUrl
        self.previewImage = previewImage
        self.uploadOperations = uploadOperations
        self.assetDeliveryState = assetDeliveryState
        self.appEventAssetType = appEventAssetType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileSize
        case fileName
        case previewFrameTimeCode
        case videoUrl
        case previewImage
        case uploadOperations
        case assetDeliveryState
        case appEventAssetType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fileSize, forKey: .fileSize)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(previewFrameTimeCode, forKey: .previewFrameTimeCode)
        try container.encodeIfPresent(videoUrl, forKey: .videoUrl)
        try container.encodeIfPresent(previewImage, forKey: .previewImage)
        try container.encodeIfPresent(uploadOperations, forKey: .uploadOperations)
        try container.encodeIfPresent(assetDeliveryState, forKey: .assetDeliveryState)
        try container.encodeIfPresent(appEventAssetType, forKey: .appEventAssetType)
    }
}

