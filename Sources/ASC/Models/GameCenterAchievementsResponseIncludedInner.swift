//
// GameCenterAchievementsResponseIncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum GameCenterAchievementsResponseIncludedInner: Codable, JSONEncodable, Hashable {
    case typeGameCenterAchievement(GameCenterAchievement)
    case typeGameCenterAchievementLocalization(GameCenterAchievementLocalization)
    case typeGameCenterAchievementRelease(GameCenterAchievementRelease)
    case typeGameCenterDetail(GameCenterDetail)
    case typeGameCenterGroup(GameCenterGroup)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeGameCenterAchievement(let value):
            try container.encode(value)
        case .typeGameCenterAchievementLocalization(let value):
            try container.encode(value)
        case .typeGameCenterAchievementRelease(let value):
            try container.encode(value)
        case .typeGameCenterDetail(let value):
            try container.encode(value)
        case .typeGameCenterGroup(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(GameCenterAchievement.self) {
            self = .typeGameCenterAchievement(value)
        } else if let value = try? container.decode(GameCenterAchievementLocalization.self) {
            self = .typeGameCenterAchievementLocalization(value)
        } else if let value = try? container.decode(GameCenterAchievementRelease.self) {
            self = .typeGameCenterAchievementRelease(value)
        } else if let value = try? container.decode(GameCenterDetail.self) {
            self = .typeGameCenterDetail(value)
        } else if let value = try? container.decode(GameCenterGroup.self) {
            self = .typeGameCenterGroup(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of GameCenterAchievementsResponseIncludedInner"))
        }
    }
}

