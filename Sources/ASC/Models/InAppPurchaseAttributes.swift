//
// InAppPurchaseAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct InAppPurchaseAttributes: Sendable, Codable, JSONEncodable, Hashable {

    public enum InAppPurchaseType: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
        case nonConsumable = "NON_CONSUMABLE"
        case consumable = "CONSUMABLE"
        case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
        case freeSubscription = "FREE_SUBSCRIPTION"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum State: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case created = "CREATED"
        case developerSignedOff = "DEVELOPER_SIGNED_OFF"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case deletionInProgress = "DELETION_IN_PROGRESS"
        case approved = "APPROVED"
        case deleted = "DELETED"
        case removedFromSale = "REMOVED_FROM_SALE"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case waitingForUpload = "WAITING_FOR_UPLOAD"
        case processingContent = "PROCESSING_CONTENT"
        case replaced = "REPLACED"
        case rejected = "REJECTED"
        case waitingForScreenshot = "WAITING_FOR_SCREENSHOT"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case missingMetadata = "MISSING_METADATA"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var referenceName: String?
    public var productId: String?
    public var inAppPurchaseType: InAppPurchaseType?
    public var state: State?

    public init(referenceName: String? = nil, productId: String? = nil, inAppPurchaseType: InAppPurchaseType? = nil, state: State? = nil) {
        self.referenceName = referenceName
        self.productId = productId
        self.inAppPurchaseType = inAppPurchaseType
        self.state = state
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case referenceName
        case productId
        case inAppPurchaseType
        case state
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(referenceName, forKey: .referenceName)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(inAppPurchaseType, forKey: .inAppPurchaseType)
        try container.encodeIfPresent(state, forKey: .state)
    }
}

