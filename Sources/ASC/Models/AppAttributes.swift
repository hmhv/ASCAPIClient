//
// AppAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppAttributes: Codable, JSONEncodable, Hashable {

    public enum ContentRightsDeclaration: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
        case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var name: String?
    public var bundleId: String?
    public var sku: String?
    public var primaryLocale: String?
    public var isOrEverWasMadeForKids: Bool?
    public var subscriptionStatusUrl: String?
    public var subscriptionStatusUrlVersion: SubscriptionStatusUrlVersion?
    public var subscriptionStatusUrlForSandbox: String?
    public var subscriptionStatusUrlVersionForSandbox: SubscriptionStatusUrlVersion?
    @available(*, deprecated, message: "This property is deprecated.")
    public var availableInNewTerritories: Bool?
    public var contentRightsDeclaration: ContentRightsDeclaration?

    public init(name: String? = nil, bundleId: String? = nil, sku: String? = nil, primaryLocale: String? = nil, isOrEverWasMadeForKids: Bool? = nil, subscriptionStatusUrl: String? = nil, subscriptionStatusUrlVersion: SubscriptionStatusUrlVersion? = nil, subscriptionStatusUrlForSandbox: String? = nil, subscriptionStatusUrlVersionForSandbox: SubscriptionStatusUrlVersion? = nil, availableInNewTerritories: Bool? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil) {
        self.name = name
        self.bundleId = bundleId
        self.sku = sku
        self.primaryLocale = primaryLocale
        self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
        self.subscriptionStatusUrl = subscriptionStatusUrl
        self.subscriptionStatusUrlVersion = subscriptionStatusUrlVersion
        self.subscriptionStatusUrlForSandbox = subscriptionStatusUrlForSandbox
        self.subscriptionStatusUrlVersionForSandbox = subscriptionStatusUrlVersionForSandbox
        self.availableInNewTerritories = availableInNewTerritories
        self.contentRightsDeclaration = contentRightsDeclaration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case bundleId
        case sku
        case primaryLocale
        case isOrEverWasMadeForKids
        case subscriptionStatusUrl
        case subscriptionStatusUrlVersion
        case subscriptionStatusUrlForSandbox
        case subscriptionStatusUrlVersionForSandbox
        case availableInNewTerritories
        case contentRightsDeclaration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(bundleId, forKey: .bundleId)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(primaryLocale, forKey: .primaryLocale)
        try container.encodeIfPresent(isOrEverWasMadeForKids, forKey: .isOrEverWasMadeForKids)
        try container.encodeIfPresent(subscriptionStatusUrl, forKey: .subscriptionStatusUrl)
        try container.encodeIfPresent(subscriptionStatusUrlVersion, forKey: .subscriptionStatusUrlVersion)
        try container.encodeIfPresent(subscriptionStatusUrlForSandbox, forKey: .subscriptionStatusUrlForSandbox)
        try container.encodeIfPresent(subscriptionStatusUrlVersionForSandbox, forKey: .subscriptionStatusUrlVersionForSandbox)
        try container.encodeIfPresent(availableInNewTerritories, forKey: .availableInNewTerritories)
        try container.encodeIfPresent(contentRightsDeclaration, forKey: .contentRightsDeclaration)
    }
}

