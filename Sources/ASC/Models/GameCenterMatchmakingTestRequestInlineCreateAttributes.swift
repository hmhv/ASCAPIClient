//
// GameCenterMatchmakingTestRequestInlineCreateAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GameCenterMatchmakingTestRequestInlineCreateAttributes: Codable, JSONEncodable, Hashable {

    public enum Locale: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case arSa = "AR-SA"
        case caEs = "CA-ES"
        case csCz = "CS-CZ"
        case daDk = "DA-DK"
        case deDe = "DE-DE"
        case elGr = "EL-GR"
        case enAu = "EN-AU"
        case enGb = "EN-GB"
        case enUs = "EN-US"
        case enKy = "EN-KY"
        case esEs = "ES-ES"
        case esMx = "ES-MX"
        case fiFi = "FI-FI"
        case frCa = "FR-CA"
        case frFr = "FR-FR"
        case hiIn = "HI-IN"
        case hrHr = "HR-HR"
        case huHu = "HU-HU"
        case idId = "ID-ID"
        case itIt = "IT-IT"
        case iwIl = "IW-IL"
        case jaJp = "JA-JP"
        case koKr = "KO-KR"
        case msMy = "MS-MY"
        case nlNl = "NL-NL"
        case noNo = "NO-NO"
        case plPl = "PL-PL"
        case ptBr = "PT-BR"
        case ptPt = "PT-PT"
        case roRo = "RO-RO"
        case ruRu = "RU-RU"
        case skSk = "SK-SK"
        case svSe = "SV-SE"
        case thTh = "TH-TH"
        case trTr = "TR-TR"
        case ukUa = "UK-UA"
        case zhCn = "ZH-CN"
        case zhTw = "ZH-TW"
        case zhHk = "ZH-HK"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var requestName: String
    public var secondsInQueue: Int
    public var locale: Locale?
    public var location: Location?
    public var minPlayers: Int?
    public var maxPlayers: Int?
    public var playerCount: Int?
    public var bundleId: String
    public var platform: Platform
    public var appVersion: String

    public init(requestName: String, secondsInQueue: Int, locale: Locale? = nil, location: Location? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, playerCount: Int? = nil, bundleId: String, platform: Platform, appVersion: String) {
        self.requestName = requestName
        self.secondsInQueue = secondsInQueue
        self.locale = locale
        self.location = location
        self.minPlayers = minPlayers
        self.maxPlayers = maxPlayers
        self.playerCount = playerCount
        self.bundleId = bundleId
        self.platform = platform
        self.appVersion = appVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case requestName
        case secondsInQueue
        case locale
        case location
        case minPlayers
        case maxPlayers
        case playerCount
        case bundleId
        case platform
        case appVersion
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(requestName, forKey: .requestName)
        try container.encode(secondsInQueue, forKey: .secondsInQueue)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(minPlayers, forKey: .minPlayers)
        try container.encodeIfPresent(maxPlayers, forKey: .maxPlayers)
        try container.encodeIfPresent(playerCount, forKey: .playerCount)
        try container.encode(bundleId, forKey: .bundleId)
        try container.encode(platform, forKey: .platform)
        try container.encode(appVersion, forKey: .appVersion)
    }
}

