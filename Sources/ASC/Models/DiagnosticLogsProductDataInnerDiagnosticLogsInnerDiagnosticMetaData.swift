//
// DiagnosticLogsProductDataInnerDiagnosticLogsInnerDiagnosticMetaData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DiagnosticLogsProductDataInnerDiagnosticLogsInnerDiagnosticMetaData: Codable, JSONEncodable, Hashable {

    public var bundleId: String?
    public var event: String?
    public var osVersion: String?
    public var appVersion: String?
    public var writesCaused: String?
    public var deviceType: String?
    public var platformArchitecture: String?
    public var eventDetail: String?
    public var buildVersion: String?

    public init(bundleId: String? = nil, event: String? = nil, osVersion: String? = nil, appVersion: String? = nil, writesCaused: String? = nil, deviceType: String? = nil, platformArchitecture: String? = nil, eventDetail: String? = nil, buildVersion: String? = nil) {
        self.bundleId = bundleId
        self.event = event
        self.osVersion = osVersion
        self.appVersion = appVersion
        self.writesCaused = writesCaused
        self.deviceType = deviceType
        self.platformArchitecture = platformArchitecture
        self.eventDetail = eventDetail
        self.buildVersion = buildVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bundleId
        case event
        case osVersion
        case appVersion
        case writesCaused
        case deviceType
        case platformArchitecture
        case eventDetail
        case buildVersion
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bundleId, forKey: .bundleId)
        try container.encodeIfPresent(event, forKey: .event)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(appVersion, forKey: .appVersion)
        try container.encodeIfPresent(writesCaused, forKey: .writesCaused)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(platformArchitecture, forKey: .platformArchitecture)
        try container.encodeIfPresent(eventDetail, forKey: .eventDetail)
        try container.encodeIfPresent(buildVersion, forKey: .buildVersion)
    }
}

