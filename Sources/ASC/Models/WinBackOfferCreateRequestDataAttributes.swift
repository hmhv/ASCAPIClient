//
// WinBackOfferCreateRequestDataAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct WinBackOfferCreateRequestDataAttributes: Sendable, Codable, JSONEncodable, Hashable {

    public enum Priority: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case high = "HIGH"
        case normal = "NORMAL"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum PromotionIntent: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case notPromoted = "NOT_PROMOTED"
        case useAutoGeneratedAssets = "USE_AUTO_GENERATED_ASSETS"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var referenceName: String
    public var offerId: String
    public var duration: SubscriptionOfferDuration
    public var offerMode: SubscriptionOfferMode
    public var periodCount: Int
    public var customerEligibilityPaidSubscriptionDurationInMonths: Int
    public var customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange
    public var customerEligibilityWaitBetweenOffersInMonths: Int?
    public var startDate: Date
    public var endDate: Date?
    public var priority: Priority
    public var promotionIntent: PromotionIntent?

    public init(referenceName: String, offerId: String, duration: SubscriptionOfferDuration, offerMode: SubscriptionOfferMode, periodCount: Int, customerEligibilityPaidSubscriptionDurationInMonths: Int, customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange, customerEligibilityWaitBetweenOffersInMonths: Int? = nil, startDate: Date, endDate: Date? = nil, priority: Priority, promotionIntent: PromotionIntent? = nil) {
        self.referenceName = referenceName
        self.offerId = offerId
        self.duration = duration
        self.offerMode = offerMode
        self.periodCount = periodCount
        self.customerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths
        self.customerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths
        self.customerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths
        self.startDate = startDate
        self.endDate = endDate
        self.priority = priority
        self.promotionIntent = promotionIntent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case referenceName
        case offerId
        case duration
        case offerMode
        case periodCount
        case customerEligibilityPaidSubscriptionDurationInMonths
        case customerEligibilityTimeSinceLastSubscribedInMonths
        case customerEligibilityWaitBetweenOffersInMonths
        case startDate
        case endDate
        case priority
        case promotionIntent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(referenceName, forKey: .referenceName)
        try container.encode(offerId, forKey: .offerId)
        try container.encode(duration, forKey: .duration)
        try container.encode(offerMode, forKey: .offerMode)
        try container.encode(periodCount, forKey: .periodCount)
        try container.encode(customerEligibilityPaidSubscriptionDurationInMonths, forKey: .customerEligibilityPaidSubscriptionDurationInMonths)
        try container.encode(customerEligibilityTimeSinceLastSubscribedInMonths, forKey: .customerEligibilityTimeSinceLastSubscribedInMonths)
        try container.encodeIfPresent(customerEligibilityWaitBetweenOffersInMonths, forKey: .customerEligibilityWaitBetweenOffersInMonths)
        try container.encode(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encode(priority, forKey: .priority)
        try container.encodeIfPresent(promotionIntent, forKey: .promotionIntent)
    }
}

