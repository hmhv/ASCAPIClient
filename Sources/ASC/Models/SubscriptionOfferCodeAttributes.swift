//
// SubscriptionOfferCodeAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SubscriptionOfferCodeAttributes: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var customerEligibilities: [SubscriptionCustomerEligibility]?
    public var offerEligibility: SubscriptionOfferEligibility?
    public var duration: SubscriptionOfferDuration?
    public var offerMode: SubscriptionOfferMode?
    public var numberOfPeriods: Int?
    public var totalNumberOfCodes: Int?
    public var active: Bool?

    public init(name: String? = nil, customerEligibilities: [SubscriptionCustomerEligibility]? = nil, offerEligibility: SubscriptionOfferEligibility? = nil, duration: SubscriptionOfferDuration? = nil, offerMode: SubscriptionOfferMode? = nil, numberOfPeriods: Int? = nil, totalNumberOfCodes: Int? = nil, active: Bool? = nil) {
        self.name = name
        self.customerEligibilities = customerEligibilities
        self.offerEligibility = offerEligibility
        self.duration = duration
        self.offerMode = offerMode
        self.numberOfPeriods = numberOfPeriods
        self.totalNumberOfCodes = totalNumberOfCodes
        self.active = active
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case customerEligibilities
        case offerEligibility
        case duration
        case offerMode
        case numberOfPeriods
        case totalNumberOfCodes
        case active
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(customerEligibilities, forKey: .customerEligibilities)
        try container.encodeIfPresent(offerEligibility, forKey: .offerEligibility)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(offerMode, forKey: .offerMode)
        try container.encodeIfPresent(numberOfPeriods, forKey: .numberOfPeriods)
        try container.encodeIfPresent(totalNumberOfCodes, forKey: .totalNumberOfCodes)
        try container.encodeIfPresent(active, forKey: .active)
    }
}

