//
// BetaGroupAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BetaGroupAttributes: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var createdDate: Date?
    public var isInternalGroup: Bool?
    public var hasAccessToAllBuilds: Bool?
    public var publicLinkEnabled: Bool?
    public var publicLinkId: String?
    public var publicLinkLimitEnabled: Bool?
    public var publicLinkLimit: Int?
    public var publicLink: String?
    public var feedbackEnabled: Bool?
    public var iosBuildsAvailableForAppleSiliconMac: Bool?

    public init(name: String? = nil, createdDate: Date? = nil, isInternalGroup: Bool? = nil, hasAccessToAllBuilds: Bool? = nil, publicLinkEnabled: Bool? = nil, publicLinkId: String? = nil, publicLinkLimitEnabled: Bool? = nil, publicLinkLimit: Int? = nil, publicLink: String? = nil, feedbackEnabled: Bool? = nil, iosBuildsAvailableForAppleSiliconMac: Bool? = nil) {
        self.name = name
        self.createdDate = createdDate
        self.isInternalGroup = isInternalGroup
        self.hasAccessToAllBuilds = hasAccessToAllBuilds
        self.publicLinkEnabled = publicLinkEnabled
        self.publicLinkId = publicLinkId
        self.publicLinkLimitEnabled = publicLinkLimitEnabled
        self.publicLinkLimit = publicLinkLimit
        self.publicLink = publicLink
        self.feedbackEnabled = feedbackEnabled
        self.iosBuildsAvailableForAppleSiliconMac = iosBuildsAvailableForAppleSiliconMac
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case createdDate
        case isInternalGroup
        case hasAccessToAllBuilds
        case publicLinkEnabled
        case publicLinkId
        case publicLinkLimitEnabled
        case publicLinkLimit
        case publicLink
        case feedbackEnabled
        case iosBuildsAvailableForAppleSiliconMac
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(isInternalGroup, forKey: .isInternalGroup)
        try container.encodeIfPresent(hasAccessToAllBuilds, forKey: .hasAccessToAllBuilds)
        try container.encodeIfPresent(publicLinkEnabled, forKey: .publicLinkEnabled)
        try container.encodeIfPresent(publicLinkId, forKey: .publicLinkId)
        try container.encodeIfPresent(publicLinkLimitEnabled, forKey: .publicLinkLimitEnabled)
        try container.encodeIfPresent(publicLinkLimit, forKey: .publicLinkLimit)
        try container.encodeIfPresent(publicLink, forKey: .publicLink)
        try container.encodeIfPresent(feedbackEnabled, forKey: .feedbackEnabled)
        try container.encodeIfPresent(iosBuildsAvailableForAppleSiliconMac, forKey: .iosBuildsAvailableForAppleSiliconMac)
    }
}

