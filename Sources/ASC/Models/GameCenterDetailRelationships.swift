//
// GameCenterDetailRelationships.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GameCenterDetailRelationships: Codable, JSONEncodable, Hashable {

    public var app: AppAvailabilityRelationshipsApp?
    public var gameCenterAppVersions: GameCenterAppVersionRelationshipsCompatibilityVersions?
    public var gameCenterGroup: GameCenterAchievementRelationshipsGameCenterGroup?
    public var gameCenterLeaderboards: GameCenterDetailRelationshipsGameCenterLeaderboards?
    public var gameCenterLeaderboardSets: GameCenterDetailRelationshipsGameCenterLeaderboardSets?
    public var gameCenterAchievements: GameCenterDetailRelationshipsGameCenterAchievements?
    public var defaultLeaderboard: GameCenterDetailRelationshipsDefaultLeaderboard?
    public var defaultGroupLeaderboard: GameCenterDetailRelationshipsDefaultLeaderboard?
    public var achievementReleases: GameCenterAchievementRelationshipsReleases?
    public var leaderboardReleases: GameCenterDetailRelationshipsLeaderboardReleases?
    public var leaderboardSetReleases: GameCenterDetailRelationshipsLeaderboardSetReleases?

    public init(app: AppAvailabilityRelationshipsApp? = nil, gameCenterAppVersions: GameCenterAppVersionRelationshipsCompatibilityVersions? = nil, gameCenterGroup: GameCenterAchievementRelationshipsGameCenterGroup? = nil, gameCenterLeaderboards: GameCenterDetailRelationshipsGameCenterLeaderboards? = nil, gameCenterLeaderboardSets: GameCenterDetailRelationshipsGameCenterLeaderboardSets? = nil, gameCenterAchievements: GameCenterDetailRelationshipsGameCenterAchievements? = nil, defaultLeaderboard: GameCenterDetailRelationshipsDefaultLeaderboard? = nil, defaultGroupLeaderboard: GameCenterDetailRelationshipsDefaultLeaderboard? = nil, achievementReleases: GameCenterAchievementRelationshipsReleases? = nil, leaderboardReleases: GameCenterDetailRelationshipsLeaderboardReleases? = nil, leaderboardSetReleases: GameCenterDetailRelationshipsLeaderboardSetReleases? = nil) {
        self.app = app
        self.gameCenterAppVersions = gameCenterAppVersions
        self.gameCenterGroup = gameCenterGroup
        self.gameCenterLeaderboards = gameCenterLeaderboards
        self.gameCenterLeaderboardSets = gameCenterLeaderboardSets
        self.gameCenterAchievements = gameCenterAchievements
        self.defaultLeaderboard = defaultLeaderboard
        self.defaultGroupLeaderboard = defaultGroupLeaderboard
        self.achievementReleases = achievementReleases
        self.leaderboardReleases = leaderboardReleases
        self.leaderboardSetReleases = leaderboardSetReleases
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case app
        case gameCenterAppVersions
        case gameCenterGroup
        case gameCenterLeaderboards
        case gameCenterLeaderboardSets
        case gameCenterAchievements
        case defaultLeaderboard
        case defaultGroupLeaderboard
        case achievementReleases
        case leaderboardReleases
        case leaderboardSetReleases
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(app, forKey: .app)
        try container.encodeIfPresent(gameCenterAppVersions, forKey: .gameCenterAppVersions)
        try container.encodeIfPresent(gameCenterGroup, forKey: .gameCenterGroup)
        try container.encodeIfPresent(gameCenterLeaderboards, forKey: .gameCenterLeaderboards)
        try container.encodeIfPresent(gameCenterLeaderboardSets, forKey: .gameCenterLeaderboardSets)
        try container.encodeIfPresent(gameCenterAchievements, forKey: .gameCenterAchievements)
        try container.encodeIfPresent(defaultLeaderboard, forKey: .defaultLeaderboard)
        try container.encodeIfPresent(defaultGroupLeaderboard, forKey: .defaultGroupLeaderboard)
        try container.encodeIfPresent(achievementReleases, forKey: .achievementReleases)
        try container.encodeIfPresent(leaderboardReleases, forKey: .leaderboardReleases)
        try container.encodeIfPresent(leaderboardSetReleases, forKey: .leaderboardSetReleases)
    }
}

