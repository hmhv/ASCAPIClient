//
// AppInfoAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AppInfoAttributes: Sendable, Codable, JSONEncodable, Hashable {

    public enum State: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case accepted = "ACCEPTED"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case pendingRelease = "PENDING_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForDistribution = "READY_FOR_DISTRIBUTION"
        case readyForReview = "READY_FOR_REVIEW"
        case rejected = "REJECTED"
        case replacedWithNewInfo = "REPLACED_WITH_NEW_INFO"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum AustraliaAgeRating: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case fifteen = "FIFTEEN"
        case eighteen = "EIGHTEEN"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum BrazilAgeRatingV2: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case selfRatedL = "SELF_RATED_L"
        case selfRatedTen = "SELF_RATED_TEN"
        case selfRatedTwelve = "SELF_RATED_TWELVE"
        case selfRatedFourteen = "SELF_RATED_FOURTEEN"
        case selfRatedSixteen = "SELF_RATED_SIXTEEN"
        case selfRatedEighteen = "SELF_RATED_EIGHTEEN"
        case officialL = "OFFICIAL_L"
        case officialTen = "OFFICIAL_TEN"
        case officialTwelve = "OFFICIAL_TWELVE"
        case officialFourteen = "OFFICIAL_FOURTEEN"
        case officialSixteen = "OFFICIAL_SIXTEEN"
        case officialEighteen = "OFFICIAL_EIGHTEEN"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum FranceAgeRating: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case eighteen = "EIGHTEEN"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum KoreaAgeRating: String, Sendable, Codable, CaseIterable, CaseIterableDefaultsLast {
        case all = "ALL"
        case twelve = "TWELVE"
        case fifteen = "FIFTEEN"
        case nineteen = "NINETEEN"
        case notApplicable = "NOT_APPLICABLE"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var appStoreState: AppStoreVersionState?
    public var state: State?
    public var appStoreAgeRating: AppStoreAgeRating?
    public var australiaAgeRating: AustraliaAgeRating?
    public var brazilAgeRating: BrazilAgeRating?
    public var brazilAgeRatingV2: BrazilAgeRatingV2?
    public var franceAgeRating: FranceAgeRating?
    public var koreaAgeRating: KoreaAgeRating?
    public var kidsAgeBand: KidsAgeBand?

    public init(appStoreState: AppStoreVersionState? = nil, state: State? = nil, appStoreAgeRating: AppStoreAgeRating? = nil, australiaAgeRating: AustraliaAgeRating? = nil, brazilAgeRating: BrazilAgeRating? = nil, brazilAgeRatingV2: BrazilAgeRatingV2? = nil, franceAgeRating: FranceAgeRating? = nil, koreaAgeRating: KoreaAgeRating? = nil, kidsAgeBand: KidsAgeBand? = nil) {
        self.appStoreState = appStoreState
        self.state = state
        self.appStoreAgeRating = appStoreAgeRating
        self.australiaAgeRating = australiaAgeRating
        self.brazilAgeRating = brazilAgeRating
        self.brazilAgeRatingV2 = brazilAgeRatingV2
        self.franceAgeRating = franceAgeRating
        self.koreaAgeRating = koreaAgeRating
        self.kidsAgeBand = kidsAgeBand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appStoreState
        case state
        case appStoreAgeRating
        case australiaAgeRating
        case brazilAgeRating
        case brazilAgeRatingV2
        case franceAgeRating
        case koreaAgeRating
        case kidsAgeBand
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appStoreState, forKey: .appStoreState)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(appStoreAgeRating, forKey: .appStoreAgeRating)
        try container.encodeIfPresent(australiaAgeRating, forKey: .australiaAgeRating)
        try container.encodeIfPresent(brazilAgeRating, forKey: .brazilAgeRating)
        try container.encodeIfPresent(brazilAgeRatingV2, forKey: .brazilAgeRatingV2)
        try container.encodeIfPresent(franceAgeRating, forKey: .franceAgeRating)
        try container.encodeIfPresent(koreaAgeRating, forKey: .koreaAgeRating)
        try container.encodeIfPresent(kidsAgeBand, forKey: .kidsAgeBand)
    }
}

